
ADC_AT_TEST_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000090c0  0800e020  0800e020  0001e020  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080170e0  080170e0  00030d98  2**0
                  CONTENTS
  4 .ARM          00000008  080170e0  080170e0  000270e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080170e8  080170e8  00030d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080170e8  080170e8  000270e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080170ec  080170ec  000270ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000d98  20000000  080170f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012d14  20000d98  08017e88  00030d98  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20013aac  08017e88  00033aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030d98  2**0
                  CONTENTS, READONLY
 12 .comment      00000108  00000000  00000000  00030dc8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018de4  00000000  00000000  00030ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000369a  00000000  00000000  00049cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  0004d350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c26  00000000  00000000  0004e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7f3  00000000  00000000  0004efe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d48  00000000  00000000  000697d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8fa6  00000000  00000000  0007f521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a14  00000000  00000000  001284c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0012dedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000031cc  00000000  00000000  0012df23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000130  00000000  00000000  001310ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000d98 	.word	0x20000d98
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dff4 	.word	0x0800dff4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000d9c 	.word	0x20000d9c
 80001dc:	0800dff4 	.word	0x0800dff4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <argmax>:
		sprintf(x,"%f",Sample[i]);
		HAL_UART_Transmit(&huart1,x,sizeof(x),10);
		HAL_UART_Transmit(&huart1,",",sizeof(","),10);
	}
}
void argmax(float arr[], uint8_t size) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
	int idx = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
	float max = arr[0];
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	613b      	str	r3, [r7, #16]
	float tmp;

	for (int i = 0; i < size; i++) {
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e015      	b.n	8001048 <argmax+0x48>
//		char x[7];
//		sprintf(x,"%f",arr[i]);
//		HAL_UART_Transmit(&huart1,"\n",sizeof("\n"),10);
//		HAL_UART_Transmit(&huart1,x,sizeof(x),10);
		tmp = arr[i];
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60bb      	str	r3, [r7, #8]
		if (tmp > max) {
 8001028:	ed97 7a02 	vldr	s14, [r7, #8]
 800102c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001038:	dd03      	ble.n	8001042 <argmax+0x42>
			max = tmp;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	613b      	str	r3, [r7, #16]
			idx = i;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < size; i++) {
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbe5      	blt.n	800101c <argmax+0x1c>
//	HAL_UART_Transmit(&huart1,"\n===========\n",sizeof("\n===========\n"),10);
//	sprintf(x,"%d",idx);
//	HAL_UART_Transmit(&huart1,"KQ:  ",sizeof("KQ:  "),10);
//	HAL_UART_Transmit(&huart1,x,sizeof(x),10);
//	HAL_UART_Transmit(&huart1,"\n===========\n",sizeof("\n===========\n"),10);
	switch (idx)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d017      	beq.n	8001086 <argmax+0x86>
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2b02      	cmp	r3, #2
 800105a:	dc1c      	bgt.n	8001096 <argmax+0x96>
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <argmax+0x6a>
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d007      	beq.n	8001078 <argmax+0x78>
	case 2:
		HAL_UART_Transmit(&huart1,"Go\n",sizeof("Go\n"),10);
		break;
	}

	return idx;
 8001068:	e015      	b.n	8001096 <argmax+0x96>
		HAL_UART_Transmit(&huart1,"Right\n",sizeof("Right\n"),10);
 800106a:	230a      	movs	r3, #10
 800106c:	2207      	movs	r2, #7
 800106e:	490c      	ldr	r1, [pc, #48]	; (80010a0 <argmax+0xa0>)
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <argmax+0xa4>)
 8001072:	f002 ff72 	bl	8003f5a <HAL_UART_Transmit>
		break;
 8001076:	e00d      	b.n	8001094 <argmax+0x94>
		HAL_UART_Transmit(&huart1,"Noise\n",sizeof("Noise\n"),10);
 8001078:	230a      	movs	r3, #10
 800107a:	2207      	movs	r2, #7
 800107c:	490a      	ldr	r1, [pc, #40]	; (80010a8 <argmax+0xa8>)
 800107e:	4809      	ldr	r0, [pc, #36]	; (80010a4 <argmax+0xa4>)
 8001080:	f002 ff6b 	bl	8003f5a <HAL_UART_Transmit>
		break;
 8001084:	e006      	b.n	8001094 <argmax+0x94>
		HAL_UART_Transmit(&huart1,"Go\n",sizeof("Go\n"),10);
 8001086:	230a      	movs	r3, #10
 8001088:	2204      	movs	r2, #4
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <argmax+0xac>)
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <argmax+0xa4>)
 800108e:	f002 ff64 	bl	8003f5a <HAL_UART_Transmit>
		break;
 8001092:	bf00      	nop
	return idx;
 8001094:	bf00      	nop
 8001096:	bf00      	nop
}
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	0800e028 	.word	0x0800e028
 80010a4:	20000e4c 	.word	0x20000e4c
 80010a8:	0800e030 	.word	0x0800e030
 80010ac:	0800e038 	.word	0x0800e038

080010b0 <AI_Run>:
	HAL_UART_Transmit(&huart1,"ok\n",sizeof("ok\n"),10);
}


static void AI_Run(float *pIn, float *pOut)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	ai_i32 batch;
	ai_error err;
//	ai_input[0].n_batches = 1;
//	ai_output[0].n_batches = 1;
	/* Update IO handlers with the data payload */
	ai_input[0].data = AI_HANDLE_PTR(pIn);
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <AI_Run+0x60>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	605a      	str	r2, [r3, #4]

	ai_output[0].data = AI_HANDLE_PTR(pOut);
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <AI_Run+0x64>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	605a      	str	r2, [r3, #4]
	/* Run the network */
//	HAL_UART_Transmit(&huart1,"Done2\n",sizeof("Done2\n"),10);
	batch = ai_network_run(network, ai_input, ai_output);
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <AI_Run+0x68>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <AI_Run+0x60>)
 80010d0:	6811      	ldr	r1, [r2, #0]
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <AI_Run+0x64>)
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 f902 	bl	80052e0 <ai_network_run>
 80010dc:	60f8      	str	r0, [r7, #12]
//	HAL_UART_Transmit(&huart1,"Done3\n",sizeof("Done3\n"),10);
	if (batch != 1) {
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d00c      	beq.n	80010fe <AI_Run+0x4e>
		err = ai_network_get_error(network);
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <AI_Run+0x68>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 fff3 	bl	80050d4 <ai_network_get_error>
 80010ee:	4603      	mov	r3, r0
 80010f0:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart1,"AI ai_network_run error - type=%d code=%d\r\n",sizeof("AI ai_network_run error - type=%d code=%d\r\n"),10);
 80010f2:	230a      	movs	r3, #10
 80010f4:	222c      	movs	r2, #44	; 0x2c
 80010f6:	4909      	ldr	r1, [pc, #36]	; (800111c <AI_Run+0x6c>)
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <AI_Run+0x70>)
 80010fa:	f002 ff2e 	bl	8003f5a <HAL_UART_Transmit>
//		Error_Handler();
	}
//	HAL_UART_Transmit(&huart1,"\n===========\n",sizeof("\n===========\n"),10);

	argmax(aiOutData,AI_NETWORK_OUT_1_SIZE);
 80010fe:	2103      	movs	r1, #3
 8001100:	4808      	ldr	r0, [pc, #32]	; (8001124 <AI_Run+0x74>)
 8001102:	f7ff ff7d 	bl	8001000 <argmax>

}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20013898 	.word	0x20013898
 8001114:	2001389c 	.word	0x2001389c
 8001118:	20013894 	.word	0x20013894
 800111c:	0800e06c 	.word	0x0800e06c
 8001120:	20000e4c 	.word	0x20000e4c
 8001124:	20013874 	.word	0x20013874

08001128 <stft_cus>:

void stft_cus()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	int i,j;
//
	memset(Input, 0, SAMPLES *sizeof(Input[0]));
 800112e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001132:	2100      	movs	r1, #0
 8001134:	4832      	ldr	r0, [pc, #200]	; (8001200 <stft_cus+0xd8>)
 8001136:	f009 faa4 	bl	800a682 <memset>
	for(i=0;i<40;i++)
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	e057      	b.n	80011f0 <stft_cus+0xc8>
//		char x[2];
//		sprintf(x,"%d",i);
//		HAL_UART_Transmit(&huart1,"\n",sizeof("\n"),10);
//		HAL_UART_Transmit(&huart1,x,sizeof(x),10);
//		HAL_UART_Transmit(&huart1,"\n",sizeof("\n"),10);
		for(j=0;j<256;j++)
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	e028      	b.n	8001198 <stft_cus+0x70>
		{
			Input[j*2] = Sample[i*200+j];
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	22c8      	movs	r2, #200	; 0xc8
 800114a:	fb03 f202 	mul.w	r2, r3, r2
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	441a      	add	r2, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	492b      	ldr	r1, [pc, #172]	; (8001204 <stft_cus+0xdc>)
 8001158:	0092      	lsls	r2, r2, #2
 800115a:	440a      	add	r2, r1
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	4928      	ldr	r1, [pc, #160]	; (8001200 <stft_cus+0xd8>)
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	601a      	str	r2, [r3, #0]
			Input[j*2] = Input[j*2] * hamm[j];
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4a25      	ldr	r2, [pc, #148]	; (8001200 <stft_cus+0xd8>)
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	ed93 7a00 	vldr	s14, [r3]
 8001174:	4a24      	ldr	r2, [pc, #144]	; (8001208 <stft_cus+0xe0>)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001188:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <stft_cus+0xd8>)
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	edc3 7a00 	vstr	s15, [r3]
		for(j=0;j<256;j++)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	2bff      	cmp	r3, #255	; 0xff
 800119c:	ddd3      	ble.n	8001146 <stft_cus+0x1e>
//			sprintf(x,"%f",Input[j]);
//			HAL_UART_Transmit(&huart1,", ",sizeof(", "),10);
//			HAL_UART_Transmit(&huart1,x,sizeof(x),10);
//		}
//		HAL_UART_Transmit(&huart1,"\n",sizeof("\n"),10);
		arm_cfft_radix4_f32(&S, Input);
 800119e:	4918      	ldr	r1, [pc, #96]	; (8001200 <stft_cus+0xd8>)
 80011a0:	481a      	ldr	r0, [pc, #104]	; (800120c <stft_cus+0xe4>)
 80011a2:	f008 f821 	bl	80091e8 <arm_cfft_radix4_f32>
		arm_cmplx_mag_f32(Input, Output, FFT_SIZE);
 80011a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011aa:	4919      	ldr	r1, [pc, #100]	; (8001210 <stft_cus+0xe8>)
 80011ac:	4814      	ldr	r0, [pc, #80]	; (8001200 <stft_cus+0xd8>)
 80011ae:	f008 f8ab 	bl	8009308 <arm_cmplx_mag_f32>
//		memcpy(Output_sam[i*256],Output,sizeof(Output));

		for(j=0;j<256;j++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	e00f      	b.n	80011d8 <stft_cus+0xb0>
		{
			Output_sam[i*256+j] = Output[j];
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	021a      	lsls	r2, r3, #8
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	4913      	ldr	r1, [pc, #76]	; (8001210 <stft_cus+0xe8>)
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	0092      	lsls	r2, r2, #2
 80011c6:	440a      	add	r2, r1
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	4912      	ldr	r1, [pc, #72]	; (8001214 <stft_cus+0xec>)
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	601a      	str	r2, [r3, #0]
		for(j=0;j<256;j++)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2bff      	cmp	r3, #255	; 0xff
 80011dc:	ddec      	ble.n	80011b8 <stft_cus+0x90>
//			sprintf(x,"%f",Output[j]);
//			HAL_UART_Transmit(&huart1,", ",sizeof(", "),10);
//			HAL_UART_Transmit(&huart1,x,sizeof(x),10);
		}
//		HAL_UART_Transmit(&huart1,"\n",sizeof("\n"),10);
		memset(Input, 0, SAMPLES *sizeof(Input[0]));
 80011de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011e2:	2100      	movs	r1, #0
 80011e4:	4806      	ldr	r0, [pc, #24]	; (8001200 <stft_cus+0xd8>)
 80011e6:	f009 fa4c 	bl	800a682 <memset>
	for(i=0;i<40;i++)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3301      	adds	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b27      	cmp	r3, #39	; 0x27
 80011f4:	dda4      	ble.n	8001140 <stft_cus+0x18>
//		sprintf(x,"ok%d\n, ",i);

	}
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000e90 	.word	0x20000e90
 8001204:	20001690 	.word	0x20001690
 8001208:	20000000 	.word	0x20000000
 800120c:	20013880 	.word	0x20013880
 8001210:	20009474 	.word	0x20009474
 8001214:	20009874 	.word	0x20009874

08001218 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

		Sample[count] = (float)(HAL_ADC_GetValue(hadc))/4095.0;
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 ff1b 	bl	800205c <HAL_ADC_GetValue>
 8001226:	ee07 0a90 	vmov	s15, r0
 800122a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800122e:	ee17 0a90 	vmov	r0, s15
 8001232:	f7ff f991 	bl	8000558 <__aeabi_f2d>
 8001236:	a31e      	add	r3, pc, #120	; (adr r3, 80012b0 <HAL_ADC_ConvCpltCallback+0x98>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fb0e 	bl	800085c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4916      	ldr	r1, [pc, #88]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x88>)
 8001246:	680c      	ldr	r4, [r1, #0]
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fcd4 	bl	8000bf8 <__aeabi_d2f>
 8001250:	4602      	mov	r2, r0
 8001252:	4914      	ldr	r1, [pc, #80]	; (80012a4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001254:	00a3      	lsls	r3, r4, #2
 8001256:	440b      	add	r3, r1
 8001258:	601a      	str	r2, [r3, #0]
		count++;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x88>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x88>)
 8001262:	6013      	str	r3, [r2, #0]
	//	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
		if(count == 8056 && count > 8054)
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x88>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f641 7278 	movw	r2, #8056	; 0x1f78
 800126c:	4293      	cmp	r3, r2
 800126e:	d112      	bne.n	8001296 <HAL_ADC_ConvCpltCallback+0x7e>
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x88>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f641 7276 	movw	r2, #8054	; 0x1f76
 8001278:	4293      	cmp	r3, r2
 800127a:	dd0c      	ble.n	8001296 <HAL_ADC_ConvCpltCallback+0x7e>
		{
			count = 8058;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x88>)
 800127e:	f641 727a 	movw	r2, #8058	; 0x1f7a
 8001282:	601a      	str	r2, [r3, #0]
//			HAL_UART_Transmit(&huart1,"Done\n",sizeof("Done\n"),10);
//			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
//			cout();
			stft_cus();
 8001284:	f7ff ff50 	bl	8001128 <stft_cus>
			AI_Run(Output_sam,aiOutData);
 8001288:	4907      	ldr	r1, [pc, #28]	; (80012a8 <HAL_ADC_ConvCpltCallback+0x90>)
 800128a:	4808      	ldr	r0, [pc, #32]	; (80012ac <HAL_ADC_ConvCpltCallback+0x94>)
 800128c:	f7ff ff10 	bl	80010b0 <AI_Run>
//			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
//			HAL_UART_Transmit(&huart1,"\n",sizeof("\n"),10);
//			HAL_UART_Transmit(&huart1,"Recording..........\n",sizeof("Recording..........\n"),10);
//			check=1;
			count = 0;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x88>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]

		}

}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	bf00      	nop
 80012a0:	20009470 	.word	0x20009470
 80012a4:	20001690 	.word	0x20001690
 80012a8:	20013874 	.word	0x20013874
 80012ac:	20009874 	.word	0x20009874
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40affe00 	.word	0x40affe00

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	f5ad 4d24 	sub.w	sp, sp, #41984	; 0xa400
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */
//	ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c2:	f000 fc47 	bl	8001b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c6:	f000 f865 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ca:	f000 f9cd 	bl	8001668 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012ce:	f000 f8c9 	bl	8001464 <MX_ADC1_Init>
  MX_CRC_Init();
 80012d2:	f000 f919 	bl	8001508 <MX_CRC_Init>
  MX_TIM3_Init();
 80012d6:	f000 f92b 	bl	8001530 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012da:	f000 f99b 	bl	8001614 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ai_error err;
  	ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];
  	/* Create a local array with the addresses of the activations buffers */
  	const ai_handle act_addr[] = { activations };
 80012de:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80012e2:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	3b04      	subs	r3, #4
 80012ec:	6013      	str	r3, [r2, #0]
  	/* Create an instance of the model */
  	err = ai_network_create_and_init(&network, act_addr, NULL);
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	3b08      	subs	r3, #8
 80012f4:	2200      	movs	r2, #0
 80012f6:	4619      	mov	r1, r3
 80012f8:	481d      	ldr	r0, [pc, #116]	; (8001370 <main+0xb8>)
 80012fa:	f003 ff0d 	bl	8005118 <ai_network_create_and_init>
 80012fe:	4603      	mov	r3, r0
 8001300:	f507 4224 	add.w	r2, r7, #41984	; 0xa400
 8001304:	f102 0204 	add.w	r2, r2, #4
 8001308:	6013      	str	r3, [r2, #0]
  	if (err.type != AI_ERROR_NONE) {
 800130a:	f507 4324 	add.w	r3, r7, #41984	; 0xa400
 800130e:	f103 0304 	add.w	r3, r3, #4
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <main+0x6c>
  		HAL_UART_Transmit(&huart1,"ai_network_create error - type=%d code=%d\r\n",sizeof("ai_network_create error - type=%d code=%d\r\n"),10);
 8001318:	230a      	movs	r3, #10
 800131a:	222c      	movs	r2, #44	; 0x2c
 800131c:	4915      	ldr	r1, [pc, #84]	; (8001374 <main+0xbc>)
 800131e:	4816      	ldr	r0, [pc, #88]	; (8001378 <main+0xc0>)
 8001320:	f002 fe1b 	bl	8003f5a <HAL_UART_Transmit>
  //		Error_Handler();
  	}
  	ai_input = ai_network_inputs_get(network, NULL);
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <main+0xb8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f003 ff68 	bl	8005200 <ai_network_inputs_get>
 8001330:	4603      	mov	r3, r0
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <main+0xc4>)
 8001334:	6013      	str	r3, [r2, #0]
  	ai_output = ai_network_outputs_get(network, NULL);
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <main+0xb8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f003 ff79 	bl	8005234 <ai_network_outputs_get>
 8001342:	4603      	mov	r3, r0
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <main+0xc8>)
 8001346:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(&htim3);
 8001348:	480e      	ldr	r0, [pc, #56]	; (8001384 <main+0xcc>)
 800134a:	f002 f8cd 	bl	80034e8 <HAL_TIM_Base_Start>
	HAL_ADC_Start_IT(&hadc1);
 800134e:	480e      	ldr	r0, [pc, #56]	; (8001388 <main+0xd0>)
 8001350:	f000 fcb6 	bl	8001cc0 <HAL_ADC_Start_IT>
	HAL_UART_Transmit(&huart1,"YYYYYYYYYY\n",sizeof("YYYYYYYYYY\n"),10);
 8001354:	230a      	movs	r3, #10
 8001356:	220c      	movs	r2, #12
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <main+0xd4>)
 800135a:	4807      	ldr	r0, [pc, #28]	; (8001378 <main+0xc0>)
 800135c:	f002 fdfd 	bl	8003f5a <HAL_UART_Transmit>
	arm_cfft_radix4_init_f32(&S, FFT_SIZE, 0, 1);
 8001360:	2301      	movs	r3, #1
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001368:	4809      	ldr	r0, [pc, #36]	; (8001390 <main+0xd8>)
 800136a:	f007 fb79 	bl	8008a60 <arm_cfft_radix4_init_f32>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800136e:	e7fe      	b.n	800136e <main+0xb6>
 8001370:	20013894 	.word	0x20013894
 8001374:	0800e03c 	.word	0x0800e03c
 8001378:	20000e4c 	.word	0x20000e4c
 800137c:	20013898 	.word	0x20013898
 8001380:	2001389c 	.word	0x2001389c
 8001384:	20000e04 	.word	0x20000e04
 8001388:	20000db4 	.word	0x20000db4
 800138c:	0800e098 	.word	0x0800e098
 8001390:	20013880 	.word	0x20013880

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b094      	sub	sp, #80	; 0x50
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	2230      	movs	r2, #48	; 0x30
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f009 f96d 	bl	800a682 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <SystemClock_Config+0xc8>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	4a26      	ldr	r2, [pc, #152]	; (800145c <SystemClock_Config+0xc8>)
 80013c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c6:	6413      	str	r3, [r2, #64]	; 0x40
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <SystemClock_Config+0xc8>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <SystemClock_Config+0xcc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a20      	ldr	r2, [pc, #128]	; (8001460 <SystemClock_Config+0xcc>)
 80013de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <SystemClock_Config+0xcc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f0:	2302      	movs	r3, #2
 80013f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f4:	2301      	movs	r3, #1
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f8:	2310      	movs	r3, #16
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fc:	2302      	movs	r3, #2
 80013fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001400:	2300      	movs	r3, #0
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001404:	2308      	movs	r3, #8
 8001406:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001408:	2340      	movs	r3, #64	; 0x40
 800140a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140c:	2302      	movs	r3, #2
 800140e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001410:	2307      	movs	r3, #7
 8001412:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4618      	mov	r0, r3
 800141a:	f001 fbbd 	bl	8002b98 <HAL_RCC_OscConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001424:	f000 f948 	bl	80016b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001428:	230f      	movs	r3, #15
 800142a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142c:	2302      	movs	r3, #2
 800142e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001430:	23a0      	movs	r3, #160	; 0xa0
 8001432:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001438:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f001 fe1f 	bl	8003088 <HAL_RCC_ClockConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001450:	f000 f932 	bl	80016b8 <Error_Handler>
  }
}
 8001454:	bf00      	nop
 8001456:	3750      	adds	r7, #80	; 0x50
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	40007000 	.word	0x40007000

08001464 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <MX_ADC1_Init+0x9c>)
 8001478:	4a22      	ldr	r2, [pc, #136]	; (8001504 <MX_ADC1_Init+0xa0>)
 800147a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <MX_ADC1_Init+0x9c>)
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001482:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <MX_ADC1_Init+0x9c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <MX_ADC1_Init+0x9c>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <MX_ADC1_Init+0x9c>)
 8001490:	2200      	movs	r2, #0
 8001492:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_ADC1_Init+0x9c>)
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_ADC1_Init+0x9c>)
 800149e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_ADC1_Init+0x9c>)
 80014a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_ADC1_Init+0x9c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <MX_ADC1_Init+0x9c>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_ADC1_Init+0x9c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_ADC1_Init+0x9c>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c6:	480e      	ldr	r0, [pc, #56]	; (8001500 <MX_ADC1_Init+0x9c>)
 80014c8:	f000 fbb6 	bl	8001c38 <HAL_ADC_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80014d2:	f000 f8f1 	bl	80016b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014da:	2301      	movs	r3, #1
 80014dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80014de:	2307      	movs	r3, #7
 80014e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e2:	463b      	mov	r3, r7
 80014e4:	4619      	mov	r1, r3
 80014e6:	4806      	ldr	r0, [pc, #24]	; (8001500 <MX_ADC1_Init+0x9c>)
 80014e8:	f000 fdda 	bl	80020a0 <HAL_ADC_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80014f2:	f000 f8e1 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000db4 	.word	0x20000db4
 8001504:	40012000 	.word	0x40012000

08001508 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_CRC_Init+0x20>)
 800150e:	4a07      	ldr	r2, [pc, #28]	; (800152c <MX_CRC_Init+0x24>)
 8001510:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_CRC_Init+0x20>)
 8001514:	f001 f90d 	bl	8002732 <HAL_CRC_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800151e:	f000 f8cb 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000dfc 	.word	0x20000dfc
 800152c:	40023000 	.word	0x40023000

08001530 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08e      	sub	sp, #56	; 0x38
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	615a      	str	r2, [r3, #20]
 800155e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <MX_TIM3_Init+0xdc>)
 8001562:	4a2b      	ldr	r2, [pc, #172]	; (8001610 <MX_TIM3_Init+0xe0>)
 8001564:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001566:	4b29      	ldr	r3, [pc, #164]	; (800160c <MX_TIM3_Init+0xdc>)
 8001568:	2207      	movs	r2, #7
 800156a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <MX_TIM3_Init+0xdc>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 124;
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <MX_TIM3_Init+0xdc>)
 8001574:	227c      	movs	r2, #124	; 0x7c
 8001576:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <MX_TIM3_Init+0xdc>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <MX_TIM3_Init+0xdc>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001584:	4821      	ldr	r0, [pc, #132]	; (800160c <MX_TIM3_Init+0xdc>)
 8001586:	f001 ff5f 	bl	8003448 <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001590:	f000 f892 	bl	80016b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800159a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800159e:	4619      	mov	r1, r3
 80015a0:	481a      	ldr	r0, [pc, #104]	; (800160c <MX_TIM3_Init+0xdc>)
 80015a2:	f002 f8b1 	bl	8003708 <HAL_TIM_ConfigClockSource>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80015ac:	f000 f884 	bl	80016b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80015b0:	4816      	ldr	r0, [pc, #88]	; (800160c <MX_TIM3_Init+0xdc>)
 80015b2:	f001 fff3 	bl	800359c <HAL_TIM_OC_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80015bc:	f000 f87c 	bl	80016b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015c0:	2320      	movs	r3, #32
 80015c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015c8:	f107 0320 	add.w	r3, r7, #32
 80015cc:	4619      	mov	r1, r3
 80015ce:	480f      	ldr	r0, [pc, #60]	; (800160c <MX_TIM3_Init+0xdc>)
 80015d0:	f002 fc08 	bl	8003de4 <HAL_TIMEx_MasterConfigSynchronization>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80015da:	f000 f86d 	bl	80016b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_TIM3_Init+0xdc>)
 80015f6:	f002 f82b 	bl	8003650 <HAL_TIM_OC_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001600:	f000 f85a 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3738      	adds	r7, #56	; 0x38
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000e04 	.word	0x20000e04
 8001610:	40000400 	.word	0x40000400

08001614 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <MX_USART1_UART_Init+0x50>)
 800161c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001624:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 800164c:	f002 fc38 	bl	8003ec0 <HAL_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001656:	f000 f82f 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000e4c 	.word	0x20000e4c
 8001664:	40011000 	.word	0x40011000

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <MX_GPIO_Init+0x4c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <MX_GPIO_Init+0x4c>)
 8001678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <MX_GPIO_Init+0x4c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_GPIO_Init+0x4c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <MX_GPIO_Init+0x4c>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_GPIO_Init+0x4c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <Error_Handler+0x8>
	...

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <HAL_MspInit+0x4c>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x4c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <HAL_ADC_MspInit+0x8c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12f      	bne.n	8001796 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_ADC_MspInit+0x90>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <HAL_ADC_MspInit+0x90>)
 8001740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001744:	6453      	str	r3, [r2, #68]	; 0x44
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_ADC_MspInit+0x90>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_ADC_MspInit+0x90>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <HAL_ADC_MspInit+0x90>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_ADC_MspInit+0x90>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800176e:	2301      	movs	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001772:	2303      	movs	r3, #3
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4809      	ldr	r0, [pc, #36]	; (80017a8 <HAL_ADC_MspInit+0x94>)
 8001782:	f001 f885 	bl	8002890 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2012      	movs	r0, #18
 800178c:	f000 ff9b 	bl	80026c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001790:	2012      	movs	r0, #18
 8001792:	f000 ffb4 	bl	80026fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	; 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40012000 	.word	0x40012000
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020000 	.word	0x40020000

080017ac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <HAL_CRC_MspInit+0x3c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d10d      	bne.n	80017da <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_CRC_MspInit+0x40>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_CRC_MspInit+0x40>)
 80017c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <HAL_CRC_MspInit+0x40>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40023000 	.word	0x40023000
 80017ec:	40023800 	.word	0x40023800

080017f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_TIM_Base_MspInit+0x3c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d10d      	bne.n	800181e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_TIM_Base_MspInit+0x40>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_TIM_Base_MspInit+0x40>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <HAL_TIM_Base_MspInit+0x40>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40000400 	.word	0x40000400
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_UART_MspInit+0x94>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d134      	bne.n	80018c0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <HAL_UART_MspInit+0x98>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <HAL_UART_MspInit+0x98>)
 8001860:	f043 0310 	orr.w	r3, r3, #16
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_UART_MspInit+0x98>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_UART_MspInit+0x98>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_UART_MspInit+0x98>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_UART_MspInit+0x98>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800188e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018a0:	2307      	movs	r3, #7
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4809      	ldr	r0, [pc, #36]	; (80018d0 <HAL_UART_MspInit+0x9c>)
 80018ac:	f000 fff0 	bl	8002890 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2100      	movs	r1, #0
 80018b4:	2025      	movs	r0, #37	; 0x25
 80018b6:	f000 ff06 	bl	80026c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018ba:	2025      	movs	r0, #37	; 0x25
 80018bc:	f000 ff1f 	bl	80026fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018c0:	bf00      	nop
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40011000 	.word	0x40011000
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020000 	.word	0x40020000

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <NMI_Handler+0x4>

080018da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <MemManage_Handler+0x4>

080018e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001920:	f000 f96a 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}

08001928 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <ADC_IRQHandler+0x10>)
 800192e:	f000 fa85 	bl	8001e3c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000db4 	.word	0x20000db4

0800193c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <USART1_IRQHandler+0x10>)
 8001942:	f002 fb9d 	bl	8004080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000e4c 	.word	0x20000e4c

08001950 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return 1;
 8001954:	2301      	movs	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_kill>:

int _kill(int pid, int sig)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800196a:	f008 feed 	bl	800a748 <__errno>
 800196e:	4603      	mov	r3, r0
 8001970:	2216      	movs	r2, #22
 8001972:	601a      	str	r2, [r3, #0]
  return -1;
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_exit>:

void _exit (int status)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ffe7 	bl	8001960 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001992:	e7fe      	b.n	8001992 <_exit+0x12>

08001994 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e00a      	b.n	80019bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019a6:	f3af 8000 	nop.w
 80019aa:	4601      	mov	r1, r0
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	60ba      	str	r2, [r7, #8]
 80019b2:	b2ca      	uxtb	r2, r1
 80019b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dbf0      	blt.n	80019a6 <_read+0x12>
  }

  return len;
 80019c4:	687b      	ldr	r3, [r7, #4]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e009      	b.n	80019f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dbf1      	blt.n	80019e0 <_write+0x12>
  }
  return len;
 80019fc:	687b      	ldr	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_close>:

int _close(int file)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_isatty>:

int _isatty(int file)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d207      	bcs.n	8001ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa0:	f008 fe52 	bl	800a748 <__errno>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e009      	b.n	8001ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <_sbrk+0x64>)
 8001ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20020000 	.word	0x20020000
 8001ad0:	00000800 	.word	0x00000800
 8001ad4:	200138a0 	.word	0x200138a0
 8001ad8:	20013ab0 	.word	0x20013ab0

08001adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <SystemInit+0x20>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <SystemInit+0x20>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b06:	490e      	ldr	r1, [pc, #56]	; (8001b40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b08:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b1c:	4c0b      	ldr	r4, [pc, #44]	; (8001b4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b2a:	f7ff ffd7 	bl	8001adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f008 fe11 	bl	800a754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b32:	f7ff fbc1 	bl	80012b8 <main>
  bx  lr    
 8001b36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	20000d98 	.word	0x20000d98
  ldr r2, =_sidata
 8001b44:	080170f0 	.word	0x080170f0
  ldr r2, =_sbss
 8001b48:	20000d98 	.word	0x20000d98
  ldr r4, =_ebss
 8001b4c:	20013aac 	.word	0x20013aac

08001b50 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <DMA1_Stream0_IRQHandler>
	...

08001b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <HAL_Init+0x40>)
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_Init+0x40>)
 8001b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_Init+0x40>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f000 fd97 	bl	80026b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b82:	200f      	movs	r0, #15
 8001b84:	f000 f808 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b88:	f7ff fd9c 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x54>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x58>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 fdaf 	bl	800271a <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00e      	b.n	8001be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b0f      	cmp	r3, #15
 8001bca:	d80a      	bhi.n	8001be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f000 fd77 	bl	80026c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <HAL_InitTick+0x5c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000400 	.word	0x20000400
 8001bf0:	20000408 	.word	0x20000408
 8001bf4:	20000404 	.word	0x20000404

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x20>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x24>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <HAL_IncTick+0x24>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000408 	.word	0x20000408
 8001c1c:	200138a4 	.word	0x200138a4

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	200138a4 	.word	0x200138a4

08001c38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e033      	b.n	8001cb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d109      	bne.n	8001c6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fd5c 	bl	8001714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d118      	bne.n	8001ca8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c7e:	f023 0302 	bic.w	r3, r3, #2
 8001c82:	f043 0202 	orr.w	r2, r3, #2
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 fb3a 	bl	8002304 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f023 0303 	bic.w	r3, r3, #3
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ca6:	e001      	b.n	8001cac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_Start_IT+0x1a>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e0a1      	b.n	8001e1e <HAL_ADC_Start_IT+0x15e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d018      	beq.n	8001d22 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d00:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <HAL_ADC_Start_IT+0x16c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a4a      	ldr	r2, [pc, #296]	; (8001e30 <HAL_ADC_Start_IT+0x170>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0c9a      	lsrs	r2, r3, #18
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d14:	e002      	b.n	8001d1c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f9      	bne.n	8001d16 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d169      	bne.n	8001e04 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d6e:	d106      	bne.n	8001d7e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	f023 0206 	bic.w	r2, r3, #6
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	645a      	str	r2, [r3, #68]	; 0x44
 8001d7c:	e002      	b.n	8001d84 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <HAL_ADC_Start_IT+0x174>)
 8001d8e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d98:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001da8:	f043 0320 	orr.w	r3, r3, #32
 8001dac:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10f      	bne.n	8001dda <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d129      	bne.n	8001e1c <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	e020      	b.n	8001e1c <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a16      	ldr	r2, [pc, #88]	; (8001e38 <HAL_ADC_Start_IT+0x178>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d11b      	bne.n	8001e1c <HAL_ADC_Start_IT+0x15c>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d114      	bne.n	8001e1c <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	e00b      	b.n	8001e1c <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f043 0210 	orr.w	r2, r3, #16
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000400 	.word	0x20000400
 8001e30:	431bde83 	.word	0x431bde83
 8001e34:	40012300 	.word	0x40012300
 8001e38:	40012000 	.word	0x40012000

08001e3c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d049      	beq.n	8001f06 <HAL_ADC_IRQHandler+0xca>
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d046      	beq.n	8001f06 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d105      	bne.n	8001e90 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d12b      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d127      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d006      	beq.n	8001ec2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d119      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0220 	bic.w	r2, r2, #32
 8001ed0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff f98e 	bl	8001218 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0212 	mvn.w	r2, #18
 8001f04:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f14:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d057      	beq.n	8001fcc <HAL_ADC_IRQHandler+0x190>
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d054      	beq.n	8001fcc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d105      	bne.n	8001f3a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d139      	bne.n	8001fbc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d006      	beq.n	8001f64 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d12b      	bne.n	8001fbc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d124      	bne.n	8001fbc <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d11d      	bne.n	8001fbc <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d119      	bne.n	8001fbc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f043 0201 	orr.w	r2, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fa9d 	bl	80024fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f06f 020c 	mvn.w	r2, #12
 8001fca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fda:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d017      	beq.n	8002012 <HAL_ADC_IRQHandler+0x1d6>
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d014      	beq.n	8002012 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d10d      	bne.n	8002012 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f837 	bl	8002076 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0201 	mvn.w	r2, #1
 8002010:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002020:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d015      	beq.n	8002054 <HAL_ADC_IRQHandler+0x218>
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d012      	beq.n	8002054 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f043 0202 	orr.w	r2, r3, #2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f06f 0220 	mvn.w	r2, #32
 8002042:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f820 	bl	800208a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f06f 0220 	mvn.w	r2, #32
 8002052:	601a      	str	r2, [r3, #0]
  }
}
 8002054:	bf00      	nop
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x1c>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e113      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x244>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b09      	cmp	r3, #9
 80020ca:	d925      	bls.n	8002118 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68d9      	ldr	r1, [r3, #12]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	3b1e      	subs	r3, #30
 80020e2:	2207      	movs	r2, #7
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43da      	mvns	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	400a      	ands	r2, r1
 80020f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68d9      	ldr	r1, [r3, #12]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	4618      	mov	r0, r3
 8002104:	4603      	mov	r3, r0
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4403      	add	r3, r0
 800210a:	3b1e      	subs	r3, #30
 800210c:	409a      	lsls	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	e022      	b.n	800215e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6919      	ldr	r1, [r3, #16]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	2207      	movs	r2, #7
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	400a      	ands	r2, r1
 800213a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6919      	ldr	r1, [r3, #16]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	4618      	mov	r0, r3
 800214e:	4603      	mov	r3, r0
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4403      	add	r3, r0
 8002154:	409a      	lsls	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b06      	cmp	r3, #6
 8002164:	d824      	bhi.n	80021b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	3b05      	subs	r3, #5
 8002178:	221f      	movs	r2, #31
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	400a      	ands	r2, r1
 8002186:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3b05      	subs	r3, #5
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34
 80021ae:	e04c      	b.n	800224a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b0c      	cmp	r3, #12
 80021b6:	d824      	bhi.n	8002202 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	3b23      	subs	r3, #35	; 0x23
 80021ca:	221f      	movs	r2, #31
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43da      	mvns	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	400a      	ands	r2, r1
 80021d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	3b23      	subs	r3, #35	; 0x23
 80021f4:	fa00 f203 	lsl.w	r2, r0, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002200:	e023      	b.n	800224a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	3b41      	subs	r3, #65	; 0x41
 8002214:	221f      	movs	r2, #31
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	400a      	ands	r2, r1
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	4618      	mov	r0, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	3b41      	subs	r3, #65	; 0x41
 800223e:	fa00 f203 	lsl.w	r2, r0, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800224a:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_ADC_ConfigChannel+0x250>)
 800224c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a28      	ldr	r2, [pc, #160]	; (80022f4 <HAL_ADC_ConfigChannel+0x254>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d10f      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x1d8>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b12      	cmp	r3, #18
 800225e:	d10b      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <HAL_ADC_ConfigChannel+0x254>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d12b      	bne.n	80022da <HAL_ADC_ConfigChannel+0x23a>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <HAL_ADC_ConfigChannel+0x258>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d003      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x1f4>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b11      	cmp	r3, #17
 8002292:	d122      	bne.n	80022da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <HAL_ADC_ConfigChannel+0x258>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d111      	bne.n	80022da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_ADC_ConfigChannel+0x25c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a11      	ldr	r2, [pc, #68]	; (8002300 <HAL_ADC_ConfigChannel+0x260>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	0c9a      	lsrs	r2, r3, #18
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022cc:	e002      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f9      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40012300 	.word	0x40012300
 80022f4:	40012000 	.word	0x40012000
 80022f8:	10000012 	.word	0x10000012
 80022fc:	20000400 	.word	0x20000400
 8002300:	431bde83 	.word	0x431bde83

08002304 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800230c:	4b79      	ldr	r3, [pc, #484]	; (80024f4 <ADC_Init+0x1f0>)
 800230e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	431a      	orrs	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002338:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6859      	ldr	r1, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	021a      	lsls	r2, r3, #8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800235c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800237e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6899      	ldr	r1, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	4a58      	ldr	r2, [pc, #352]	; (80024f8 <ADC_Init+0x1f4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d022      	beq.n	80023e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6899      	ldr	r1, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6899      	ldr	r1, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	e00f      	b.n	8002402 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002400:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0202 	bic.w	r2, r2, #2
 8002410:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6899      	ldr	r1, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	7e1b      	ldrb	r3, [r3, #24]
 800241c:	005a      	lsls	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01b      	beq.n	8002468 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800243e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800244e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	3b01      	subs	r3, #1
 800245c:	035a      	lsls	r2, r3, #13
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	e007      	b.n	8002478 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002476:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	3b01      	subs	r3, #1
 8002494:	051a      	lsls	r2, r3, #20
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6899      	ldr	r1, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024ba:	025a      	lsls	r2, r3, #9
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6899      	ldr	r1, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	029a      	lsls	r2, r3, #10
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	609a      	str	r2, [r3, #8]
}
 80024e8:	bf00      	nop
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40012300 	.word	0x40012300
 80024f8:	0f000001 	.word	0x0f000001

080024fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800252c:	4013      	ands	r3, r2
 800252e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800253c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002542:	4a04      	ldr	r2, [pc, #16]	; (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	60d3      	str	r3, [r2, #12]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <__NVIC_GetPriorityGrouping+0x18>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 0307 	and.w	r3, r3, #7
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	db0b      	blt.n	800259e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4907      	ldr	r1, [pc, #28]	; (80025ac <__NVIC_EnableIRQ+0x38>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	2001      	movs	r0, #1
 8002596:	fa00 f202 	lsl.w	r2, r0, r2
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000e100 	.word	0xe000e100

080025b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	db0a      	blt.n	80025da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	490c      	ldr	r1, [pc, #48]	; (80025fc <__NVIC_SetPriority+0x4c>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	0112      	lsls	r2, r2, #4
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	440b      	add	r3, r1
 80025d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d8:	e00a      	b.n	80025f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4908      	ldr	r1, [pc, #32]	; (8002600 <__NVIC_SetPriority+0x50>)
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	3b04      	subs	r3, #4
 80025e8:	0112      	lsls	r2, r2, #4
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	440b      	add	r3, r1
 80025ee:	761a      	strb	r2, [r3, #24]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000e100 	.word	0xe000e100
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	; 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f1c3 0307 	rsb	r3, r3, #7
 800261e:	2b04      	cmp	r3, #4
 8002620:	bf28      	it	cs
 8002622:	2304      	movcs	r3, #4
 8002624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3304      	adds	r3, #4
 800262a:	2b06      	cmp	r3, #6
 800262c:	d902      	bls.n	8002634 <NVIC_EncodePriority+0x30>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3b03      	subs	r3, #3
 8002632:	e000      	b.n	8002636 <NVIC_EncodePriority+0x32>
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	401a      	ands	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800264c:	f04f 31ff 	mov.w	r1, #4294967295
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	43d9      	mvns	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	4313      	orrs	r3, r2
         );
}
 800265e:	4618      	mov	r0, r3
 8002660:	3724      	adds	r7, #36	; 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800267c:	d301      	bcc.n	8002682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800267e:	2301      	movs	r3, #1
 8002680:	e00f      	b.n	80026a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002682:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <SysTick_Config+0x40>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268a:	210f      	movs	r1, #15
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f7ff ff8e 	bl	80025b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <SysTick_Config+0x40>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <SysTick_Config+0x40>)
 800269c:	2207      	movs	r2, #7
 800269e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	e000e010 	.word	0xe000e010

080026b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff29 	bl	8002510 <__NVIC_SetPriorityGrouping>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d8:	f7ff ff3e 	bl	8002558 <__NVIC_GetPriorityGrouping>
 80026dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	6978      	ldr	r0, [r7, #20]
 80026e4:	f7ff ff8e 	bl	8002604 <NVIC_EncodePriority>
 80026e8:	4602      	mov	r2, r0
 80026ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff5d 	bl	80025b0 <__NVIC_SetPriority>
}
 80026f6:	bf00      	nop
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff31 	bl	8002574 <__NVIC_EnableIRQ>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff ffa2 	bl	800266c <SysTick_Config>
 8002728:	4603      	mov	r3, r0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e00e      	b.n	8002762 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	795b      	ldrb	r3, [r3, #5]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d105      	bne.n	800275a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff f829 	bl	80017ac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002778:	f7ff fa52 	bl	8001c20 <HAL_GetTick>
 800277c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d008      	beq.n	800279c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e052      	b.n	8002842 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0216 	bic.w	r2, r2, #22
 80027aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d103      	bne.n	80027cc <HAL_DMA_Abort+0x62>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0208 	bic.w	r2, r2, #8
 80027da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ec:	e013      	b.n	8002816 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ee:	f7ff fa17 	bl	8001c20 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b05      	cmp	r3, #5
 80027fa:	d90c      	bls.n	8002816 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2203      	movs	r2, #3
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e015      	b.n	8002842 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e4      	bne.n	80027ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	223f      	movs	r2, #63	; 0x3f
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d004      	beq.n	8002868 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e00c      	b.n	8002882 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2205      	movs	r2, #5
 800286c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	; 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	e159      	b.n	8002b60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028ac:	2201      	movs	r2, #1
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	f040 8148 	bne.w	8002b5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d005      	beq.n	80028e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d130      	bne.n	8002944 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	2203      	movs	r2, #3
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002918:	2201      	movs	r2, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 0201 	and.w	r2, r3, #1
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b03      	cmp	r3, #3
 800294e:	d017      	beq.n	8002980 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	2203      	movs	r2, #3
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d123      	bne.n	80029d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	08da      	lsrs	r2, r3, #3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3208      	adds	r2, #8
 8002994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	220f      	movs	r2, #15
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	08da      	lsrs	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3208      	adds	r2, #8
 80029ce:	69b9      	ldr	r1, [r7, #24]
 80029d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	2203      	movs	r2, #3
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0203 	and.w	r2, r3, #3
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80a2 	beq.w	8002b5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	4b57      	ldr	r3, [pc, #348]	; (8002b78 <HAL_GPIO_Init+0x2e8>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	4a56      	ldr	r2, [pc, #344]	; (8002b78 <HAL_GPIO_Init+0x2e8>)
 8002a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a24:	6453      	str	r3, [r2, #68]	; 0x44
 8002a26:	4b54      	ldr	r3, [pc, #336]	; (8002b78 <HAL_GPIO_Init+0x2e8>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a32:	4a52      	ldr	r2, [pc, #328]	; (8002b7c <HAL_GPIO_Init+0x2ec>)
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	3302      	adds	r3, #2
 8002a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	220f      	movs	r2, #15
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a49      	ldr	r2, [pc, #292]	; (8002b80 <HAL_GPIO_Init+0x2f0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d019      	beq.n	8002a92 <HAL_GPIO_Init+0x202>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a48      	ldr	r2, [pc, #288]	; (8002b84 <HAL_GPIO_Init+0x2f4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_GPIO_Init+0x1fe>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a47      	ldr	r2, [pc, #284]	; (8002b88 <HAL_GPIO_Init+0x2f8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00d      	beq.n	8002a8a <HAL_GPIO_Init+0x1fa>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a46      	ldr	r2, [pc, #280]	; (8002b8c <HAL_GPIO_Init+0x2fc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <HAL_GPIO_Init+0x1f6>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a45      	ldr	r2, [pc, #276]	; (8002b90 <HAL_GPIO_Init+0x300>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_GPIO_Init+0x1f2>
 8002a7e:	2304      	movs	r3, #4
 8002a80:	e008      	b.n	8002a94 <HAL_GPIO_Init+0x204>
 8002a82:	2307      	movs	r3, #7
 8002a84:	e006      	b.n	8002a94 <HAL_GPIO_Init+0x204>
 8002a86:	2303      	movs	r3, #3
 8002a88:	e004      	b.n	8002a94 <HAL_GPIO_Init+0x204>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e002      	b.n	8002a94 <HAL_GPIO_Init+0x204>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_GPIO_Init+0x204>
 8002a92:	2300      	movs	r3, #0
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	f002 0203 	and.w	r2, r2, #3
 8002a9a:	0092      	lsls	r2, r2, #2
 8002a9c:	4093      	lsls	r3, r2
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa4:	4935      	ldr	r1, [pc, #212]	; (8002b7c <HAL_GPIO_Init+0x2ec>)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	3302      	adds	r3, #2
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab2:	4b38      	ldr	r3, [pc, #224]	; (8002b94 <HAL_GPIO_Init+0x304>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad6:	4a2f      	ldr	r2, [pc, #188]	; (8002b94 <HAL_GPIO_Init+0x304>)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002adc:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <HAL_GPIO_Init+0x304>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b00:	4a24      	ldr	r2, [pc, #144]	; (8002b94 <HAL_GPIO_Init+0x304>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b06:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <HAL_GPIO_Init+0x304>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b2a:	4a1a      	ldr	r2, [pc, #104]	; (8002b94 <HAL_GPIO_Init+0x304>)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <HAL_GPIO_Init+0x304>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b54:	4a0f      	ldr	r2, [pc, #60]	; (8002b94 <HAL_GPIO_Init+0x304>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	2b0f      	cmp	r3, #15
 8002b64:	f67f aea2 	bls.w	80028ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	3724      	adds	r7, #36	; 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40013800 	.word	0x40013800
 8002b80:	40020000 	.word	0x40020000
 8002b84:	40020400 	.word	0x40020400
 8002b88:	40020800 	.word	0x40020800
 8002b8c:	40020c00 	.word	0x40020c00
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40013c00 	.word	0x40013c00

08002b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e267      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d075      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bb6:	4b88      	ldr	r3, [pc, #544]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d00c      	beq.n	8002bdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc2:	4b85      	ldr	r3, [pc, #532]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d112      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bce:	4b82      	ldr	r3, [pc, #520]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bda:	d10b      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	4b7e      	ldr	r3, [pc, #504]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d05b      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x108>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d157      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e242      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfc:	d106      	bne.n	8002c0c <HAL_RCC_OscConfig+0x74>
 8002bfe:	4b76      	ldr	r3, [pc, #472]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a75      	ldr	r2, [pc, #468]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e01d      	b.n	8002c48 <HAL_RCC_OscConfig+0xb0>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x98>
 8002c16:	4b70      	ldr	r3, [pc, #448]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a6f      	ldr	r2, [pc, #444]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b6d      	ldr	r3, [pc, #436]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6c      	ldr	r2, [pc, #432]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0xb0>
 8002c30:	4b69      	ldr	r3, [pc, #420]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a68      	ldr	r2, [pc, #416]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b66      	ldr	r3, [pc, #408]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a65      	ldr	r2, [pc, #404]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe ffe6 	bl	8001c20 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fe ffe2 	bl	8001c20 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e207      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b5b      	ldr	r3, [pc, #364]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xc0>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe ffd2 	bl	8001c20 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe ffce 	bl	8001c20 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1f3      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	4b51      	ldr	r3, [pc, #324]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0xe8>
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d063      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cae:	4b4a      	ldr	r3, [pc, #296]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cba:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d11c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc6:	4b44      	ldr	r3, [pc, #272]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_RCC_OscConfig+0x152>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e1c7      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cea:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4937      	ldr	r1, [pc, #220]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	e03a      	b.n	8002d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d08:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <HAL_RCC_OscConfig+0x244>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7fe ff87 	bl	8001c20 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d16:	f7fe ff83 	bl	8001c20 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e1a8      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	4b2b      	ldr	r3, [pc, #172]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d34:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4925      	ldr	r1, [pc, #148]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
 8002d48:	e015      	b.n	8002d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4a:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_RCC_OscConfig+0x244>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe ff66 	bl	8001c20 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d58:	f7fe ff62 	bl	8001c20 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e187      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d036      	beq.n	8002df0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d016      	beq.n	8002db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_RCC_OscConfig+0x248>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7fe ff46 	bl	8001c20 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d98:	f7fe ff42 	bl	8001c20 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e167      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_OscConfig+0x240>)
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x200>
 8002db6:	e01b      	b.n	8002df0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_RCC_OscConfig+0x248>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbe:	f7fe ff2f 	bl	8001c20 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc4:	e00e      	b.n	8002de4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc6:	f7fe ff2b 	bl	8001c20 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d907      	bls.n	8002de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e150      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	42470000 	.word	0x42470000
 8002de0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de4:	4b88      	ldr	r3, [pc, #544]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ea      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 8097 	beq.w	8002f2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e02:	4b81      	ldr	r3, [pc, #516]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10f      	bne.n	8002e2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	4b7d      	ldr	r3, [pc, #500]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	4a7c      	ldr	r2, [pc, #496]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1e:	4b7a      	ldr	r3, [pc, #488]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	4b77      	ldr	r3, [pc, #476]	; (800300c <HAL_RCC_OscConfig+0x474>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d118      	bne.n	8002e6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3a:	4b74      	ldr	r3, [pc, #464]	; (800300c <HAL_RCC_OscConfig+0x474>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a73      	ldr	r2, [pc, #460]	; (800300c <HAL_RCC_OscConfig+0x474>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e46:	f7fe feeb 	bl	8001c20 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4e:	f7fe fee7 	bl	8001c20 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e10c      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	4b6a      	ldr	r3, [pc, #424]	; (800300c <HAL_RCC_OscConfig+0x474>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d106      	bne.n	8002e82 <HAL_RCC_OscConfig+0x2ea>
 8002e74:	4b64      	ldr	r3, [pc, #400]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	4a63      	ldr	r2, [pc, #396]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e80:	e01c      	b.n	8002ebc <HAL_RCC_OscConfig+0x324>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b05      	cmp	r3, #5
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x30c>
 8002e8a:	4b5f      	ldr	r3, [pc, #380]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4a5e      	ldr	r2, [pc, #376]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002e90:	f043 0304 	orr.w	r3, r3, #4
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
 8002e96:	4b5c      	ldr	r3, [pc, #368]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	4a5b      	ldr	r2, [pc, #364]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCC_OscConfig+0x324>
 8002ea4:	4b58      	ldr	r3, [pc, #352]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	4a57      	ldr	r2, [pc, #348]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002eaa:	f023 0301 	bic.w	r3, r3, #1
 8002eae:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb0:	4b55      	ldr	r3, [pc, #340]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	4a54      	ldr	r2, [pc, #336]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002eb6:	f023 0304 	bic.w	r3, r3, #4
 8002eba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d015      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fe feac 	bl	8001c20 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fea8 	bl	8001c20 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e0cb      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee2:	4b49      	ldr	r3, [pc, #292]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0ee      	beq.n	8002ecc <HAL_RCC_OscConfig+0x334>
 8002eee:	e014      	b.n	8002f1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef0:	f7fe fe96 	bl	8001c20 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7fe fe92 	bl	8001c20 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e0b5      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0e:	4b3e      	ldr	r3, [pc, #248]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1ee      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f20:	4b39      	ldr	r3, [pc, #228]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	4a38      	ldr	r2, [pc, #224]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80a1 	beq.w	8003078 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f36:	4b34      	ldr	r3, [pc, #208]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d05c      	beq.n	8002ffc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d141      	bne.n	8002fce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4a:	4b31      	ldr	r3, [pc, #196]	; (8003010 <HAL_RCC_OscConfig+0x478>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fe66 	bl	8001c20 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe fe62 	bl	8001c20 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e087      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6a:	4b27      	ldr	r3, [pc, #156]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	019b      	lsls	r3, r3, #6
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	085b      	lsrs	r3, r3, #1
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	041b      	lsls	r3, r3, #16
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	061b      	lsls	r3, r3, #24
 8002f9a:	491b      	ldr	r1, [pc, #108]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_RCC_OscConfig+0x478>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa6:	f7fe fe3b 	bl	8001c20 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fae:	f7fe fe37 	bl	8001c20 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e05c      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0f0      	beq.n	8002fae <HAL_RCC_OscConfig+0x416>
 8002fcc:	e054      	b.n	8003078 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <HAL_RCC_OscConfig+0x478>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fe24 	bl	8001c20 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fdc:	f7fe fe20 	bl	8001c20 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e045      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x444>
 8002ffa:	e03d      	b.n	8003078 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d107      	bne.n	8003014 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e038      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
 8003008:	40023800 	.word	0x40023800
 800300c:	40007000 	.word	0x40007000
 8003010:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <HAL_RCC_OscConfig+0x4ec>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d028      	beq.n	8003074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d121      	bne.n	8003074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d11a      	bne.n	8003074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003044:	4013      	ands	r3, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800304a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800304c:	4293      	cmp	r3, r2
 800304e:	d111      	bne.n	8003074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	3b01      	subs	r3, #1
 800305e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d107      	bne.n	8003074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800

08003088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0cc      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b68      	ldr	r3, [pc, #416]	; (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d90c      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b65      	ldr	r3, [pc, #404]	; (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b63      	ldr	r3, [pc, #396]	; (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0b8      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d020      	beq.n	8003112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030dc:	4b59      	ldr	r3, [pc, #356]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a58      	ldr	r2, [pc, #352]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f4:	4b53      	ldr	r3, [pc, #332]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a52      	ldr	r2, [pc, #328]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003100:	4b50      	ldr	r3, [pc, #320]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	494d      	ldr	r1, [pc, #308]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d044      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	4b47      	ldr	r3, [pc, #284]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d119      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e07f      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d003      	beq.n	8003146 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003142:	2b03      	cmp	r3, #3
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003146:	4b3f      	ldr	r3, [pc, #252]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e06f      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003156:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e067      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003166:	4b37      	ldr	r3, [pc, #220]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f023 0203 	bic.w	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4934      	ldr	r1, [pc, #208]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003178:	f7fe fd52 	bl	8001c20 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	e00a      	b.n	8003196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003180:	f7fe fd4e 	bl	8001c20 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e04f      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 020c 	and.w	r2, r3, #12
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d1eb      	bne.n	8003180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a8:	4b25      	ldr	r3, [pc, #148]	; (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d20c      	bcs.n	80031d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b22      	ldr	r3, [pc, #136]	; (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b20      	ldr	r3, [pc, #128]	; (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e032      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031dc:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4916      	ldr	r1, [pc, #88]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031fa:	4b12      	ldr	r3, [pc, #72]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	490e      	ldr	r1, [pc, #56]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800320e:	f000 f821 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 8003212:	4602      	mov	r2, r0
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	490a      	ldr	r1, [pc, #40]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	5ccb      	ldrb	r3, [r1, r3]
 8003222:	fa22 f303 	lsr.w	r3, r2, r3
 8003226:	4a09      	ldr	r2, [pc, #36]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fcb2 	bl	8001b98 <HAL_InitTick>

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023c00 	.word	0x40023c00
 8003244:	40023800 	.word	0x40023800
 8003248:	0800e0d4 	.word	0x0800e0d4
 800324c:	20000400 	.word	0x20000400
 8003250:	20000404 	.word	0x20000404

08003254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003258:	b090      	sub	sp, #64	; 0x40
 800325a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
 8003260:	2300      	movs	r3, #0
 8003262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003264:	2300      	movs	r3, #0
 8003266:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800326c:	4b59      	ldr	r3, [pc, #356]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 030c 	and.w	r3, r3, #12
 8003274:	2b08      	cmp	r3, #8
 8003276:	d00d      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x40>
 8003278:	2b08      	cmp	r3, #8
 800327a:	f200 80a1 	bhi.w	80033c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x34>
 8003282:	2b04      	cmp	r3, #4
 8003284:	d003      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0x3a>
 8003286:	e09b      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003288:	4b53      	ldr	r3, [pc, #332]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800328a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800328c:	e09b      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800328e:	4b53      	ldr	r3, [pc, #332]	; (80033dc <HAL_RCC_GetSysClockFreq+0x188>)
 8003290:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003292:	e098      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003294:	4b4f      	ldr	r3, [pc, #316]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800329e:	4b4d      	ldr	r3, [pc, #308]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d028      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032aa:	4b4a      	ldr	r3, [pc, #296]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	099b      	lsrs	r3, r3, #6
 80032b0:	2200      	movs	r2, #0
 80032b2:	623b      	str	r3, [r7, #32]
 80032b4:	627a      	str	r2, [r7, #36]	; 0x24
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032bc:	2100      	movs	r1, #0
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <HAL_RCC_GetSysClockFreq+0x188>)
 80032c0:	fb03 f201 	mul.w	r2, r3, r1
 80032c4:	2300      	movs	r3, #0
 80032c6:	fb00 f303 	mul.w	r3, r0, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	4a43      	ldr	r2, [pc, #268]	; (80033dc <HAL_RCC_GetSysClockFreq+0x188>)
 80032ce:	fba0 1202 	umull	r1, r2, r0, r2
 80032d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032d4:	460a      	mov	r2, r1
 80032d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80032d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032da:	4413      	add	r3, r2
 80032dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e0:	2200      	movs	r2, #0
 80032e2:	61bb      	str	r3, [r7, #24]
 80032e4:	61fa      	str	r2, [r7, #28]
 80032e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032ee:	f7fd fcd3 	bl	8000c98 <__aeabi_uldivmod>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4613      	mov	r3, r2
 80032f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032fa:	e053      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fc:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	099b      	lsrs	r3, r3, #6
 8003302:	2200      	movs	r2, #0
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	617a      	str	r2, [r7, #20]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800330e:	f04f 0b00 	mov.w	fp, #0
 8003312:	4652      	mov	r2, sl
 8003314:	465b      	mov	r3, fp
 8003316:	f04f 0000 	mov.w	r0, #0
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	0159      	lsls	r1, r3, #5
 8003320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003324:	0150      	lsls	r0, r2, #5
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	ebb2 080a 	subs.w	r8, r2, sl
 800332e:	eb63 090b 	sbc.w	r9, r3, fp
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800333e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003342:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003346:	ebb2 0408 	subs.w	r4, r2, r8
 800334a:	eb63 0509 	sbc.w	r5, r3, r9
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	00eb      	lsls	r3, r5, #3
 8003358:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800335c:	00e2      	lsls	r2, r4, #3
 800335e:	4614      	mov	r4, r2
 8003360:	461d      	mov	r5, r3
 8003362:	eb14 030a 	adds.w	r3, r4, sl
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	eb45 030b 	adc.w	r3, r5, fp
 800336c:	607b      	str	r3, [r7, #4]
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800337a:	4629      	mov	r1, r5
 800337c:	028b      	lsls	r3, r1, #10
 800337e:	4621      	mov	r1, r4
 8003380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003384:	4621      	mov	r1, r4
 8003386:	028a      	lsls	r2, r1, #10
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338e:	2200      	movs	r2, #0
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	60fa      	str	r2, [r7, #12]
 8003394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003398:	f7fd fc7e 	bl	8000c98 <__aeabi_uldivmod>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4613      	mov	r3, r2
 80033a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	0c1b      	lsrs	r3, r3, #16
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	3301      	adds	r3, #1
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80033b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033be:	e002      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80033c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3740      	adds	r7, #64	; 0x40
 80033cc:	46bd      	mov	sp, r7
 80033ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	00f42400 	.word	0x00f42400
 80033dc:	017d7840 	.word	0x017d7840

080033e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000400 	.word	0x20000400

080033f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033fc:	f7ff fff0 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 8003400:	4602      	mov	r2, r0
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	0a9b      	lsrs	r3, r3, #10
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4903      	ldr	r1, [pc, #12]	; (800341c <HAL_RCC_GetPCLK1Freq+0x24>)
 800340e:	5ccb      	ldrb	r3, [r1, r3]
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	0800e0e4 	.word	0x0800e0e4

08003420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003424:	f7ff ffdc 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	0b5b      	lsrs	r3, r3, #13
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4903      	ldr	r1, [pc, #12]	; (8003444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40023800 	.word	0x40023800
 8003444:	0800e0e4 	.word	0x0800e0e4

08003448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e041      	b.n	80034de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fe f9be 	bl	80017f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f000 fa06 	bl	8003898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d001      	beq.n	8003500 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e03c      	b.n	800357a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1e      	ldr	r2, [pc, #120]	; (8003588 <HAL_TIM_Base_Start+0xa0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d018      	beq.n	8003544 <HAL_TIM_Base_Start+0x5c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351a:	d013      	beq.n	8003544 <HAL_TIM_Base_Start+0x5c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1a      	ldr	r2, [pc, #104]	; (800358c <HAL_TIM_Base_Start+0xa4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00e      	beq.n	8003544 <HAL_TIM_Base_Start+0x5c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a19      	ldr	r2, [pc, #100]	; (8003590 <HAL_TIM_Base_Start+0xa8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d009      	beq.n	8003544 <HAL_TIM_Base_Start+0x5c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a17      	ldr	r2, [pc, #92]	; (8003594 <HAL_TIM_Base_Start+0xac>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d004      	beq.n	8003544 <HAL_TIM_Base_Start+0x5c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a16      	ldr	r2, [pc, #88]	; (8003598 <HAL_TIM_Base_Start+0xb0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d111      	bne.n	8003568 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b06      	cmp	r3, #6
 8003554:	d010      	beq.n	8003578 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0201 	orr.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003566:	e007      	b.n	8003578 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40010000 	.word	0x40010000
 800358c:	40000400 	.word	0x40000400
 8003590:	40000800 	.word	0x40000800
 8003594:	40000c00 	.word	0x40000c00
 8003598:	40014000 	.word	0x40014000

0800359c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e041      	b.n	8003632 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f839 	bl	800363a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f000 f95c 	bl	8003898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_TIM_OC_ConfigChannel+0x1e>
 800366a:	2302      	movs	r3, #2
 800366c:	e048      	b.n	8003700 <HAL_TIM_OC_ConfigChannel+0xb0>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b0c      	cmp	r3, #12
 800367a:	d839      	bhi.n	80036f0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800367c:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <HAL_TIM_OC_ConfigChannel+0x34>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	080036b9 	.word	0x080036b9
 8003688:	080036f1 	.word	0x080036f1
 800368c:	080036f1 	.word	0x080036f1
 8003690:	080036f1 	.word	0x080036f1
 8003694:	080036c7 	.word	0x080036c7
 8003698:	080036f1 	.word	0x080036f1
 800369c:	080036f1 	.word	0x080036f1
 80036a0:	080036f1 	.word	0x080036f1
 80036a4:	080036d5 	.word	0x080036d5
 80036a8:	080036f1 	.word	0x080036f1
 80036ac:	080036f1 	.word	0x080036f1
 80036b0:	080036f1 	.word	0x080036f1
 80036b4:	080036e3 	.word	0x080036e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f96a 	bl	8003998 <TIM_OC1_SetConfig>
      break;
 80036c4:	e017      	b.n	80036f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f9c9 	bl	8003a64 <TIM_OC2_SetConfig>
      break;
 80036d2:	e010      	b.n	80036f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fa2e 	bl	8003b3c <TIM_OC3_SetConfig>
      break;
 80036e0:	e009      	b.n	80036f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fa91 	bl	8003c10 <TIM_OC4_SetConfig>
      break;
 80036ee:	e002      	b.n	80036f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	75fb      	strb	r3, [r7, #23]
      break;
 80036f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_TIM_ConfigClockSource+0x1c>
 8003720:	2302      	movs	r3, #2
 8003722:	e0b4      	b.n	800388e <HAL_TIM_ConfigClockSource+0x186>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800374a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375c:	d03e      	beq.n	80037dc <HAL_TIM_ConfigClockSource+0xd4>
 800375e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003762:	f200 8087 	bhi.w	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376a:	f000 8086 	beq.w	800387a <HAL_TIM_ConfigClockSource+0x172>
 800376e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003772:	d87f      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 8003774:	2b70      	cmp	r3, #112	; 0x70
 8003776:	d01a      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0xa6>
 8003778:	2b70      	cmp	r3, #112	; 0x70
 800377a:	d87b      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b60      	cmp	r3, #96	; 0x60
 800377e:	d050      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x11a>
 8003780:	2b60      	cmp	r3, #96	; 0x60
 8003782:	d877      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 8003784:	2b50      	cmp	r3, #80	; 0x50
 8003786:	d03c      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0xfa>
 8003788:	2b50      	cmp	r3, #80	; 0x50
 800378a:	d873      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d058      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x13a>
 8003790:	2b40      	cmp	r3, #64	; 0x40
 8003792:	d86f      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 8003794:	2b30      	cmp	r3, #48	; 0x30
 8003796:	d064      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0x15a>
 8003798:	2b30      	cmp	r3, #48	; 0x30
 800379a:	d86b      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 800379c:	2b20      	cmp	r3, #32
 800379e:	d060      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0x15a>
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d867      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d05c      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0x15a>
 80037a8:	2b10      	cmp	r3, #16
 80037aa:	d05a      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0x15a>
 80037ac:	e062      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6899      	ldr	r1, [r3, #8]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f000 faf1 	bl	8003da4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	609a      	str	r2, [r3, #8]
      break;
 80037da:	e04f      	b.n	800387c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	6899      	ldr	r1, [r3, #8]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f000 fada 	bl	8003da4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037fe:	609a      	str	r2, [r3, #8]
      break;
 8003800:	e03c      	b.n	800387c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6859      	ldr	r1, [r3, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	461a      	mov	r2, r3
 8003810:	f000 fa4e 	bl	8003cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2150      	movs	r1, #80	; 0x50
 800381a:	4618      	mov	r0, r3
 800381c:	f000 faa7 	bl	8003d6e <TIM_ITRx_SetConfig>
      break;
 8003820:	e02c      	b.n	800387c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	6859      	ldr	r1, [r3, #4]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	461a      	mov	r2, r3
 8003830:	f000 fa6d 	bl	8003d0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2160      	movs	r1, #96	; 0x60
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fa97 	bl	8003d6e <TIM_ITRx_SetConfig>
      break;
 8003840:	e01c      	b.n	800387c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6859      	ldr	r1, [r3, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	461a      	mov	r2, r3
 8003850:	f000 fa2e 	bl	8003cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2140      	movs	r1, #64	; 0x40
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fa87 	bl	8003d6e <TIM_ITRx_SetConfig>
      break;
 8003860:	e00c      	b.n	800387c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4619      	mov	r1, r3
 800386c:	4610      	mov	r0, r2
 800386e:	f000 fa7e 	bl	8003d6e <TIM_ITRx_SetConfig>
      break;
 8003872:	e003      	b.n	800387c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
      break;
 8003878:	e000      	b.n	800387c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800387a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a34      	ldr	r2, [pc, #208]	; (800397c <TIM_Base_SetConfig+0xe4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00f      	beq.n	80038d0 <TIM_Base_SetConfig+0x38>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b6:	d00b      	beq.n	80038d0 <TIM_Base_SetConfig+0x38>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a31      	ldr	r2, [pc, #196]	; (8003980 <TIM_Base_SetConfig+0xe8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d007      	beq.n	80038d0 <TIM_Base_SetConfig+0x38>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a30      	ldr	r2, [pc, #192]	; (8003984 <TIM_Base_SetConfig+0xec>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d003      	beq.n	80038d0 <TIM_Base_SetConfig+0x38>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a2f      	ldr	r2, [pc, #188]	; (8003988 <TIM_Base_SetConfig+0xf0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d108      	bne.n	80038e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a25      	ldr	r2, [pc, #148]	; (800397c <TIM_Base_SetConfig+0xe4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01b      	beq.n	8003922 <TIM_Base_SetConfig+0x8a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f0:	d017      	beq.n	8003922 <TIM_Base_SetConfig+0x8a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a22      	ldr	r2, [pc, #136]	; (8003980 <TIM_Base_SetConfig+0xe8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <TIM_Base_SetConfig+0x8a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a21      	ldr	r2, [pc, #132]	; (8003984 <TIM_Base_SetConfig+0xec>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00f      	beq.n	8003922 <TIM_Base_SetConfig+0x8a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a20      	ldr	r2, [pc, #128]	; (8003988 <TIM_Base_SetConfig+0xf0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00b      	beq.n	8003922 <TIM_Base_SetConfig+0x8a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a1f      	ldr	r2, [pc, #124]	; (800398c <TIM_Base_SetConfig+0xf4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <TIM_Base_SetConfig+0x8a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a1e      	ldr	r2, [pc, #120]	; (8003990 <TIM_Base_SetConfig+0xf8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <TIM_Base_SetConfig+0x8a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <TIM_Base_SetConfig+0xfc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d108      	bne.n	8003934 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a08      	ldr	r2, [pc, #32]	; (800397c <TIM_Base_SetConfig+0xe4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d103      	bne.n	8003968 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	615a      	str	r2, [r3, #20]
}
 800396e:	bf00      	nop
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40010000 	.word	0x40010000
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800
 8003988:	40000c00 	.word	0x40000c00
 800398c:	40014000 	.word	0x40014000
 8003990:	40014400 	.word	0x40014400
 8003994:	40014800 	.word	0x40014800

08003998 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f023 0201 	bic.w	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0303 	bic.w	r3, r3, #3
 80039ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 0302 	bic.w	r3, r3, #2
 80039e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a1c      	ldr	r2, [pc, #112]	; (8003a60 <TIM_OC1_SetConfig+0xc8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d10c      	bne.n	8003a0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f023 0308 	bic.w	r3, r3, #8
 80039fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f023 0304 	bic.w	r3, r3, #4
 8003a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a13      	ldr	r2, [pc, #76]	; (8003a60 <TIM_OC1_SetConfig+0xc8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d111      	bne.n	8003a3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	621a      	str	r2, [r3, #32]
}
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40010000 	.word	0x40010000

08003a64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f023 0210 	bic.w	r2, r3, #16
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f023 0320 	bic.w	r3, r3, #32
 8003aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a1e      	ldr	r2, [pc, #120]	; (8003b38 <TIM_OC2_SetConfig+0xd4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d10d      	bne.n	8003ae0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <TIM_OC2_SetConfig+0xd4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d113      	bne.n	8003b10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	621a      	str	r2, [r3, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40010000 	.word	0x40010000

08003b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a1d      	ldr	r2, [pc, #116]	; (8003c0c <TIM_OC3_SetConfig+0xd0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d10d      	bne.n	8003bb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a14      	ldr	r2, [pc, #80]	; (8003c0c <TIM_OC3_SetConfig+0xd0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d113      	bne.n	8003be6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	621a      	str	r2, [r3, #32]
}
 8003c00:	bf00      	nop
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	40010000 	.word	0x40010000

08003c10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	031b      	lsls	r3, r3, #12
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a10      	ldr	r2, [pc, #64]	; (8003cac <TIM_OC4_SetConfig+0x9c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d109      	bne.n	8003c84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	019b      	lsls	r3, r3, #6
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	621a      	str	r2, [r3, #32]
}
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40010000 	.word	0x40010000

08003cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f023 0201 	bic.w	r2, r3, #1
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f023 030a 	bic.w	r3, r3, #10
 8003cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b087      	sub	sp, #28
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	f023 0210 	bic.w	r2, r3, #16
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	031b      	lsls	r3, r3, #12
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f043 0307 	orr.w	r3, r3, #7
 8003d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	609a      	str	r2, [r3, #8]
}
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	021a      	lsls	r2, r3, #8
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	609a      	str	r2, [r3, #8]
}
 8003dd8:	bf00      	nop
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e050      	b.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d018      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e48:	d013      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a16      	ldr	r2, [pc, #88]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10c      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40000800 	.word	0x40000800
 8003eb8:	40000c00 	.word	0x40000c00
 8003ebc:	40014000 	.word	0x40014000

08003ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e03f      	b.n	8003f52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fd fca4 	bl	8001834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2224      	movs	r2, #36	; 0x24
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fd7b 	bl	8004a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b08a      	sub	sp, #40	; 0x28
 8003f5e:	af02      	add	r7, sp, #8
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d17c      	bne.n	8004074 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_UART_Transmit+0x2c>
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e075      	b.n	8004076 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_UART_Transmit+0x3e>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e06e      	b.n	8004076 <HAL_UART_Transmit+0x11c>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2221      	movs	r2, #33	; 0x21
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fae:	f7fd fe37 	bl	8001c20 <HAL_GetTick>
 8003fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc8:	d108      	bne.n	8003fdc <HAL_UART_Transmit+0x82>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d104      	bne.n	8003fdc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	e003      	b.n	8003fe4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fec:	e02a      	b.n	8004044 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2180      	movs	r1, #128	; 0x80
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 faf9 	bl	80045f0 <UART_WaitOnFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e036      	b.n	8004076 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800401c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	3302      	adds	r3, #2
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	e007      	b.n	8004036 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	781a      	ldrb	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	3301      	adds	r3, #1
 8004034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1cf      	bne.n	8003fee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2200      	movs	r2, #0
 8004056:	2140      	movs	r1, #64	; 0x40
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fac9 	bl	80045f0 <UART_WaitOnFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e006      	b.n	8004076 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	e000      	b.n	8004076 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004074:	2302      	movs	r3, #2
  }
}
 8004076:	4618      	mov	r0, r3
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b0ba      	sub	sp, #232	; 0xe8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80040be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_UART_IRQHandler+0x66>
 80040d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fbd3 	bl	800488a <UART_Receive_IT>
      return;
 80040e4:	e256      	b.n	8004594 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80de 	beq.w	80042ac <HAL_UART_IRQHandler+0x22c>
 80040f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004100:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80d1 	beq.w	80042ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_UART_IRQHandler+0xae>
 8004116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800411a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f043 0201 	orr.w	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800412e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00b      	beq.n	8004152 <HAL_UART_IRQHandler+0xd2>
 800413a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f043 0202 	orr.w	r2, r3, #2
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <HAL_UART_IRQHandler+0xf6>
 800415e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f043 0204 	orr.w	r2, r3, #4
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d011      	beq.n	80041a6 <HAL_UART_IRQHandler+0x126>
 8004182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d105      	bne.n	800419a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800418e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f043 0208 	orr.w	r2, r3, #8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 81ed 	beq.w	800458a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_UART_IRQHandler+0x14e>
 80041bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fb5e 	bl	800488a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d103      	bne.n	80041fa <HAL_UART_IRQHandler+0x17a>
 80041f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d04f      	beq.n	800429a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa66 	bl	80046cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	d141      	bne.n	8004292 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3314      	adds	r3, #20
 8004214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3314      	adds	r3, #20
 8004236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800423a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800423e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1d9      	bne.n	800420e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	2b00      	cmp	r3, #0
 8004260:	d013      	beq.n	800428a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	4a7d      	ldr	r2, [pc, #500]	; (800445c <HAL_UART_IRQHandler+0x3dc>)
 8004268:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe faeb 	bl	800284a <HAL_DMA_Abort_IT>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d016      	beq.n	80042a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004284:	4610      	mov	r0, r2
 8004286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004288:	e00e      	b.n	80042a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f99a 	bl	80045c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004290:	e00a      	b.n	80042a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f996 	bl	80045c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004298:	e006      	b.n	80042a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f992 	bl	80045c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042a6:	e170      	b.n	800458a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a8:	bf00      	nop
    return;
 80042aa:	e16e      	b.n	800458a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	f040 814a 	bne.w	800454a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ba:	f003 0310 	and.w	r3, r3, #16
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8143 	beq.w	800454a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 813c 	beq.w	800454a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042d2:	2300      	movs	r3, #0
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	f040 80b4 	bne.w	8004460 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004304:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 8140 	beq.w	800458e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004316:	429a      	cmp	r2, r3
 8004318:	f080 8139 	bcs.w	800458e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004322:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432e:	f000 8088 	beq.w	8004442 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	330c      	adds	r3, #12
 8004338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004340:	e853 3f00 	ldrex	r3, [r3]
 8004344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800434c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004350:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800435e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004362:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800436a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1d9      	bne.n	8004332 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3314      	adds	r3, #20
 8004384:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800438e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3314      	adds	r3, #20
 800439e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e1      	bne.n	800437e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3314      	adds	r3, #20
 80043c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3314      	adds	r3, #20
 80043da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e3      	bne.n	80043ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	330c      	adds	r3, #12
 8004406:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004412:	f023 0310 	bic.w	r3, r3, #16
 8004416:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	330c      	adds	r3, #12
 8004420:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004424:	65ba      	str	r2, [r7, #88]	; 0x58
 8004426:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800442a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e3      	bne.n	8004400 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	4618      	mov	r0, r3
 800443e:	f7fe f994 	bl	800276a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800444a:	b29b      	uxth	r3, r3
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	b29b      	uxth	r3, r3
 8004450:	4619      	mov	r1, r3
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f8c0 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004458:	e099      	b.n	800458e <HAL_UART_IRQHandler+0x50e>
 800445a:	bf00      	nop
 800445c:	08004793 	.word	0x08004793
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004468:	b29b      	uxth	r3, r3
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 808b 	beq.w	8004592 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800447c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8086 	beq.w	8004592 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800449c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044aa:	647a      	str	r2, [r7, #68]	; 0x44
 80044ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e3      	bne.n	8004486 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3314      	adds	r3, #20
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	623b      	str	r3, [r7, #32]
   return(result);
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f023 0301 	bic.w	r3, r3, #1
 80044d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3314      	adds	r3, #20
 80044de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044e2:	633a      	str	r2, [r7, #48]	; 0x30
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e3      	bne.n	80044be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	60fb      	str	r3, [r7, #12]
   return(result);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0310 	bic.w	r3, r3, #16
 800451a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004528:	61fa      	str	r2, [r7, #28]
 800452a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	69b9      	ldr	r1, [r7, #24]
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	617b      	str	r3, [r7, #20]
   return(result);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e3      	bne.n	8004504 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800453c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004540:	4619      	mov	r1, r3
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f848 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004548:	e023      	b.n	8004592 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800454a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <HAL_UART_IRQHandler+0x4ea>
 8004556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f929 	bl	80047ba <UART_Transmit_IT>
    return;
 8004568:	e014      	b.n	8004594 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800456a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00e      	beq.n	8004594 <HAL_UART_IRQHandler+0x514>
 8004576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800457a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f969 	bl	800485a <UART_EndTransmit_IT>
    return;
 8004588:	e004      	b.n	8004594 <HAL_UART_IRQHandler+0x514>
    return;
 800458a:	bf00      	nop
 800458c:	e002      	b.n	8004594 <HAL_UART_IRQHandler+0x514>
      return;
 800458e:	bf00      	nop
 8004590:	e000      	b.n	8004594 <HAL_UART_IRQHandler+0x514>
      return;
 8004592:	bf00      	nop
  }
}
 8004594:	37e8      	adds	r7, #232	; 0xe8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop

0800459c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b090      	sub	sp, #64	; 0x40
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004600:	e050      	b.n	80046a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004608:	d04c      	beq.n	80046a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800460a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460c:	2b00      	cmp	r3, #0
 800460e:	d007      	beq.n	8004620 <UART_WaitOnFlagUntilTimeout+0x30>
 8004610:	f7fd fb06 	bl	8001c20 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800461c:	429a      	cmp	r2, r3
 800461e:	d241      	bcs.n	80046a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004640:	637a      	str	r2, [r7, #52]	; 0x34
 8004642:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e5      	bne.n	8004620 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3314      	adds	r3, #20
 800465a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	613b      	str	r3, [r7, #16]
   return(result);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	63bb      	str	r3, [r7, #56]	; 0x38
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3314      	adds	r3, #20
 8004672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004674:	623a      	str	r2, [r7, #32]
 8004676:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	69f9      	ldr	r1, [r7, #28]
 800467a:	6a3a      	ldr	r2, [r7, #32]
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	61bb      	str	r3, [r7, #24]
   return(result);
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e5      	bne.n	8004654 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e00f      	b.n	80046c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4013      	ands	r3, r2
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d09f      	beq.n	8004602 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3740      	adds	r7, #64	; 0x40
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b095      	sub	sp, #84	; 0x54
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	330c      	adds	r3, #12
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046de:	e853 3f00 	ldrex	r3, [r3]
 80046e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	330c      	adds	r3, #12
 80046f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046f4:	643a      	str	r2, [r7, #64]	; 0x40
 80046f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046fc:	e841 2300 	strex	r3, r2, [r1]
 8004700:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1e5      	bne.n	80046d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3314      	adds	r3, #20
 800470e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	e853 3f00 	ldrex	r3, [r3]
 8004716:	61fb      	str	r3, [r7, #28]
   return(result);
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f023 0301 	bic.w	r3, r3, #1
 800471e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3314      	adds	r3, #20
 8004726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004728:	62fa      	str	r2, [r7, #44]	; 0x2c
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800472e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e5      	bne.n	8004708 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	2b01      	cmp	r3, #1
 8004742:	d119      	bne.n	8004778 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	330c      	adds	r3, #12
 800474a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	e853 3f00 	ldrex	r3, [r3]
 8004752:	60bb      	str	r3, [r7, #8]
   return(result);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f023 0310 	bic.w	r3, r3, #16
 800475a:	647b      	str	r3, [r7, #68]	; 0x44
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	330c      	adds	r3, #12
 8004762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004764:	61ba      	str	r2, [r7, #24]
 8004766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	6979      	ldr	r1, [r7, #20]
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	613b      	str	r3, [r7, #16]
   return(result);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e5      	bne.n	8004744 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004786:	bf00      	nop
 8004788:	3754      	adds	r7, #84	; 0x54
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7ff ff09 	bl	80045c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047b2:	bf00      	nop
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b085      	sub	sp, #20
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b21      	cmp	r3, #33	; 0x21
 80047cc:	d13e      	bne.n	800484c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d6:	d114      	bne.n	8004802 <UART_Transmit_IT+0x48>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d110      	bne.n	8004802 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	1c9a      	adds	r2, r3, #2
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	621a      	str	r2, [r3, #32]
 8004800:	e008      	b.n	8004814 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	1c59      	adds	r1, r3, #1
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6211      	str	r1, [r2, #32]
 800480c:	781a      	ldrb	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29b      	uxth	r3, r3
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	4619      	mov	r1, r3
 8004822:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10f      	bne.n	8004848 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004836:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004846:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e000      	b.n	800484e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800484c:	2302      	movs	r3, #2
  }
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004870:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff fe8e 	bl	800459c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b08c      	sub	sp, #48	; 0x30
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b22      	cmp	r3, #34	; 0x22
 800489c:	f040 80ab 	bne.w	80049f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a8:	d117      	bne.n	80048da <UART_Receive_IT+0x50>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d113      	bne.n	80048da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	1c9a      	adds	r2, r3, #2
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	629a      	str	r2, [r3, #40]	; 0x28
 80048d8:	e026      	b.n	8004928 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ec:	d007      	beq.n	80048fe <UART_Receive_IT+0x74>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10a      	bne.n	800490c <UART_Receive_IT+0x82>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	b2da      	uxtb	r2, r3
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	e008      	b.n	800491e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004918:	b2da      	uxtb	r2, r3
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29b      	uxth	r3, r3
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	4619      	mov	r1, r3
 8004936:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004938:	2b00      	cmp	r3, #0
 800493a:	d15a      	bne.n	80049f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0220 	bic.w	r2, r2, #32
 800494a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800495a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0201 	bic.w	r2, r2, #1
 800496a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	2b01      	cmp	r3, #1
 800497a:	d135      	bne.n	80049e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	613b      	str	r3, [r7, #16]
   return(result);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f023 0310 	bic.w	r3, r3, #16
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	330c      	adds	r3, #12
 80049a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a2:	623a      	str	r2, [r7, #32]
 80049a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	69f9      	ldr	r1, [r7, #28]
 80049a8:	6a3a      	ldr	r2, [r7, #32]
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e5      	bne.n	8004982 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d10a      	bne.n	80049da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049de:	4619      	mov	r1, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff fdf9 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
 80049e6:	e002      	b.n	80049ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff fde1 	bl	80045b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e002      	b.n	80049f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	e000      	b.n	80049f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
  }
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3730      	adds	r7, #48	; 0x30
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a04:	b0c0      	sub	sp, #256	; 0x100
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	68d9      	ldr	r1, [r3, #12]
 8004a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	ea40 0301 	orr.w	r3, r0, r1
 8004a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a58:	f021 010c 	bic.w	r1, r1, #12
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a66:	430b      	orrs	r3, r1
 8004a68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	6999      	ldr	r1, [r3, #24]
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	ea40 0301 	orr.w	r3, r0, r1
 8004a86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4b8f      	ldr	r3, [pc, #572]	; (8004ccc <UART_SetConfig+0x2cc>)
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d005      	beq.n	8004aa0 <UART_SetConfig+0xa0>
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b8d      	ldr	r3, [pc, #564]	; (8004cd0 <UART_SetConfig+0x2d0>)
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d104      	bne.n	8004aaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004aa0:	f7fe fcbe 	bl	8003420 <HAL_RCC_GetPCLK2Freq>
 8004aa4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004aa8:	e003      	b.n	8004ab2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aaa:	f7fe fca5 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 8004aae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004abc:	f040 810c 	bne.w	8004cd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004aca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ace:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ad2:	4622      	mov	r2, r4
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	1891      	adds	r1, r2, r2
 8004ad8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ada:	415b      	adcs	r3, r3
 8004adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ade:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	eb12 0801 	adds.w	r8, r2, r1
 8004ae8:	4629      	mov	r1, r5
 8004aea:	eb43 0901 	adc.w	r9, r3, r1
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b02:	4690      	mov	r8, r2
 8004b04:	4699      	mov	r9, r3
 8004b06:	4623      	mov	r3, r4
 8004b08:	eb18 0303 	adds.w	r3, r8, r3
 8004b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b10:	462b      	mov	r3, r5
 8004b12:	eb49 0303 	adc.w	r3, r9, r3
 8004b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b2e:	460b      	mov	r3, r1
 8004b30:	18db      	adds	r3, r3, r3
 8004b32:	653b      	str	r3, [r7, #80]	; 0x50
 8004b34:	4613      	mov	r3, r2
 8004b36:	eb42 0303 	adc.w	r3, r2, r3
 8004b3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b44:	f7fc f8a8 	bl	8000c98 <__aeabi_uldivmod>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4b61      	ldr	r3, [pc, #388]	; (8004cd4 <UART_SetConfig+0x2d4>)
 8004b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	011c      	lsls	r4, r3, #4
 8004b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b68:	4642      	mov	r2, r8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	1891      	adds	r1, r2, r2
 8004b6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b70:	415b      	adcs	r3, r3
 8004b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b78:	4641      	mov	r1, r8
 8004b7a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b7e:	4649      	mov	r1, r9
 8004b80:	eb43 0b01 	adc.w	fp, r3, r1
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b98:	4692      	mov	sl, r2
 8004b9a:	469b      	mov	fp, r3
 8004b9c:	4643      	mov	r3, r8
 8004b9e:	eb1a 0303 	adds.w	r3, sl, r3
 8004ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	eb4b 0303 	adc.w	r3, fp, r3
 8004bac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	18db      	adds	r3, r3, r3
 8004bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bca:	4613      	mov	r3, r2
 8004bcc:	eb42 0303 	adc.w	r3, r2, r3
 8004bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bda:	f7fc f85d 	bl	8000c98 <__aeabi_uldivmod>
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	4611      	mov	r1, r2
 8004be4:	4b3b      	ldr	r3, [pc, #236]	; (8004cd4 <UART_SetConfig+0x2d4>)
 8004be6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	2264      	movs	r2, #100	; 0x64
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	1acb      	subs	r3, r1, r3
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bfa:	4b36      	ldr	r3, [pc, #216]	; (8004cd4 <UART_SetConfig+0x2d4>)
 8004bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c08:	441c      	add	r4, r3
 8004c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	464b      	mov	r3, r9
 8004c20:	1891      	adds	r1, r2, r2
 8004c22:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c24:	415b      	adcs	r3, r3
 8004c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	1851      	adds	r1, r2, r1
 8004c30:	6339      	str	r1, [r7, #48]	; 0x30
 8004c32:	4649      	mov	r1, r9
 8004c34:	414b      	adcs	r3, r1
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c44:	4659      	mov	r1, fp
 8004c46:	00cb      	lsls	r3, r1, #3
 8004c48:	4651      	mov	r1, sl
 8004c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c4e:	4651      	mov	r1, sl
 8004c50:	00ca      	lsls	r2, r1, #3
 8004c52:	4610      	mov	r0, r2
 8004c54:	4619      	mov	r1, r3
 8004c56:	4603      	mov	r3, r0
 8004c58:	4642      	mov	r2, r8
 8004c5a:	189b      	adds	r3, r3, r2
 8004c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c60:	464b      	mov	r3, r9
 8004c62:	460a      	mov	r2, r1
 8004c64:	eb42 0303 	adc.w	r3, r2, r3
 8004c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c80:	460b      	mov	r3, r1
 8004c82:	18db      	adds	r3, r3, r3
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c86:	4613      	mov	r3, r2
 8004c88:	eb42 0303 	adc.w	r3, r2, r3
 8004c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c96:	f7fb ffff 	bl	8000c98 <__aeabi_uldivmod>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <UART_SetConfig+0x2d4>)
 8004ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	2164      	movs	r1, #100	; 0x64
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	3332      	adds	r3, #50	; 0x32
 8004cb2:	4a08      	ldr	r2, [pc, #32]	; (8004cd4 <UART_SetConfig+0x2d4>)
 8004cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	f003 0207 	and.w	r2, r3, #7
 8004cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4422      	add	r2, r4
 8004cc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cc8:	e106      	b.n	8004ed8 <UART_SetConfig+0x4d8>
 8004cca:	bf00      	nop
 8004ccc:	40011000 	.word	0x40011000
 8004cd0:	40011400 	.word	0x40011400
 8004cd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ce2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ce6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cea:	4642      	mov	r2, r8
 8004cec:	464b      	mov	r3, r9
 8004cee:	1891      	adds	r1, r2, r2
 8004cf0:	6239      	str	r1, [r7, #32]
 8004cf2:	415b      	adcs	r3, r3
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cfa:	4641      	mov	r1, r8
 8004cfc:	1854      	adds	r4, r2, r1
 8004cfe:	4649      	mov	r1, r9
 8004d00:	eb43 0501 	adc.w	r5, r3, r1
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	00eb      	lsls	r3, r5, #3
 8004d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d12:	00e2      	lsls	r2, r4, #3
 8004d14:	4614      	mov	r4, r2
 8004d16:	461d      	mov	r5, r3
 8004d18:	4643      	mov	r3, r8
 8004d1a:	18e3      	adds	r3, r4, r3
 8004d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d20:	464b      	mov	r3, r9
 8004d22:	eb45 0303 	adc.w	r3, r5, r3
 8004d26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d46:	4629      	mov	r1, r5
 8004d48:	008b      	lsls	r3, r1, #2
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d50:	4621      	mov	r1, r4
 8004d52:	008a      	lsls	r2, r1, #2
 8004d54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d58:	f7fb ff9e 	bl	8000c98 <__aeabi_uldivmod>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4b60      	ldr	r3, [pc, #384]	; (8004ee4 <UART_SetConfig+0x4e4>)
 8004d62:	fba3 2302 	umull	r2, r3, r3, r2
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	011c      	lsls	r4, r3, #4
 8004d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	464b      	mov	r3, r9
 8004d80:	1891      	adds	r1, r2, r2
 8004d82:	61b9      	str	r1, [r7, #24]
 8004d84:	415b      	adcs	r3, r3
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	1851      	adds	r1, r2, r1
 8004d90:	6139      	str	r1, [r7, #16]
 8004d92:	4649      	mov	r1, r9
 8004d94:	414b      	adcs	r3, r1
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004da4:	4659      	mov	r1, fp
 8004da6:	00cb      	lsls	r3, r1, #3
 8004da8:	4651      	mov	r1, sl
 8004daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dae:	4651      	mov	r1, sl
 8004db0:	00ca      	lsls	r2, r1, #3
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	4642      	mov	r2, r8
 8004dba:	189b      	adds	r3, r3, r2
 8004dbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	460a      	mov	r2, r1
 8004dc4:	eb42 0303 	adc.w	r3, r2, r3
 8004dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004de4:	4649      	mov	r1, r9
 8004de6:	008b      	lsls	r3, r1, #2
 8004de8:	4641      	mov	r1, r8
 8004dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dee:	4641      	mov	r1, r8
 8004df0:	008a      	lsls	r2, r1, #2
 8004df2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004df6:	f7fb ff4f 	bl	8000c98 <__aeabi_uldivmod>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4611      	mov	r1, r2
 8004e00:	4b38      	ldr	r3, [pc, #224]	; (8004ee4 <UART_SetConfig+0x4e4>)
 8004e02:	fba3 2301 	umull	r2, r3, r3, r1
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	2264      	movs	r2, #100	; 0x64
 8004e0a:	fb02 f303 	mul.w	r3, r2, r3
 8004e0e:	1acb      	subs	r3, r1, r3
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	3332      	adds	r3, #50	; 0x32
 8004e14:	4a33      	ldr	r2, [pc, #204]	; (8004ee4 <UART_SetConfig+0x4e4>)
 8004e16:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e20:	441c      	add	r4, r3
 8004e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e26:	2200      	movs	r2, #0
 8004e28:	673b      	str	r3, [r7, #112]	; 0x70
 8004e2a:	677a      	str	r2, [r7, #116]	; 0x74
 8004e2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e30:	4642      	mov	r2, r8
 8004e32:	464b      	mov	r3, r9
 8004e34:	1891      	adds	r1, r2, r2
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	415b      	adcs	r3, r3
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e40:	4641      	mov	r1, r8
 8004e42:	1851      	adds	r1, r2, r1
 8004e44:	6039      	str	r1, [r7, #0]
 8004e46:	4649      	mov	r1, r9
 8004e48:	414b      	adcs	r3, r1
 8004e4a:	607b      	str	r3, [r7, #4]
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e58:	4659      	mov	r1, fp
 8004e5a:	00cb      	lsls	r3, r1, #3
 8004e5c:	4651      	mov	r1, sl
 8004e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e62:	4651      	mov	r1, sl
 8004e64:	00ca      	lsls	r2, r1, #3
 8004e66:	4610      	mov	r0, r2
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	189b      	adds	r3, r3, r2
 8004e70:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e72:	464b      	mov	r3, r9
 8004e74:	460a      	mov	r2, r1
 8004e76:	eb42 0303 	adc.w	r3, r2, r3
 8004e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	663b      	str	r3, [r7, #96]	; 0x60
 8004e86:	667a      	str	r2, [r7, #100]	; 0x64
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e94:	4649      	mov	r1, r9
 8004e96:	008b      	lsls	r3, r1, #2
 8004e98:	4641      	mov	r1, r8
 8004e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e9e:	4641      	mov	r1, r8
 8004ea0:	008a      	lsls	r2, r1, #2
 8004ea2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ea6:	f7fb fef7 	bl	8000c98 <__aeabi_uldivmod>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <UART_SetConfig+0x4e4>)
 8004eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	2164      	movs	r1, #100	; 0x64
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	3332      	adds	r3, #50	; 0x32
 8004ec2:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <UART_SetConfig+0x4e4>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	f003 020f 	and.w	r2, r3, #15
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4422      	add	r2, r4
 8004ed6:	609a      	str	r2, [r3, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ee4:	51eb851f 	.word	0x51eb851f

08004ee8 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	4829      	ldr	r0, [pc, #164]	; (8004f9c <network_configure_activations+0xb4>)
 8004ef8:	f000 fad0 	bl	800549c <ai_platform_get_activations_map>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d041      	beq.n	8004f86 <network_configure_activations+0x9e>
    /* Updating activations (byte) offsets */
    
    serving_default_reshape_4_input0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004f02:	4b26      	ldr	r3, [pc, #152]	; (8004f9c <network_configure_activations+0xb4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a26      	ldr	r2, [pc, #152]	; (8004fa0 <network_configure_activations+0xb8>)
 8004f08:	6093      	str	r3, [r2, #8]
    serving_default_reshape_4_input0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004f0a:	4b24      	ldr	r3, [pc, #144]	; (8004f9c <network_configure_activations+0xb4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a24      	ldr	r2, [pc, #144]	; (8004fa0 <network_configure_activations+0xb8>)
 8004f10:	60d3      	str	r3, [r2, #12]
    
    upsample_4_output_array.data = AI_PTR(g_network_activations_map[0] + 40960);
 8004f12:	4b22      	ldr	r3, [pc, #136]	; (8004f9c <network_configure_activations+0xb4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8004f1a:	4a22      	ldr	r2, [pc, #136]	; (8004fa4 <network_configure_activations+0xbc>)
 8004f1c:	6093      	str	r3, [r2, #8]
    upsample_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 40960);
 8004f1e:	4b1f      	ldr	r3, [pc, #124]	; (8004f9c <network_configure_activations+0xb4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8004f26:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <network_configure_activations+0xbc>)
 8004f28:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004f2a:	4b1c      	ldr	r3, [pc, #112]	; (8004f9c <network_configure_activations+0xb4>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1e      	ldr	r2, [pc, #120]	; (8004fa8 <network_configure_activations+0xc0>)
 8004f30:	6093      	str	r3, [r2, #8]
    conv2d_5_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004f32:	4b1a      	ldr	r3, [pc, #104]	; (8004f9c <network_configure_activations+0xb4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <network_configure_activations+0xc0>)
 8004f38:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_output_array.data = AI_PTR(g_network_activations_map[0] + 224);
 8004f3a:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <network_configure_activations+0xb4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	33e0      	adds	r3, #224	; 0xe0
 8004f40:	4a1a      	ldr	r2, [pc, #104]	; (8004fac <network_configure_activations+0xc4>)
 8004f42:	6093      	str	r3, [r2, #8]
    conv2d_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 224);
 8004f44:	4b15      	ldr	r3, [pc, #84]	; (8004f9c <network_configure_activations+0xb4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	33e0      	adds	r3, #224	; 0xe0
 8004f4a:	4a18      	ldr	r2, [pc, #96]	; (8004fac <network_configure_activations+0xc4>)
 8004f4c:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <network_configure_activations+0xb4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a17      	ldr	r2, [pc, #92]	; (8004fb0 <network_configure_activations+0xc8>)
 8004f54:	6093      	str	r3, [r2, #8]
    conv2d_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004f56:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <network_configure_activations+0xb4>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a15      	ldr	r2, [pc, #84]	; (8004fb0 <network_configure_activations+0xc8>)
 8004f5c:	60d3      	str	r3, [r2, #12]
    
    dense_11_output_array.data = AI_PTR(g_network_activations_map[0] + 200);
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <network_configure_activations+0xb4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	33c8      	adds	r3, #200	; 0xc8
 8004f64:	4a13      	ldr	r2, [pc, #76]	; (8004fb4 <network_configure_activations+0xcc>)
 8004f66:	6093      	str	r3, [r2, #8]
    dense_11_output_array.data_start = AI_PTR(g_network_activations_map[0] + 200);
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <network_configure_activations+0xb4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	33c8      	adds	r3, #200	; 0xc8
 8004f6e:	4a11      	ldr	r2, [pc, #68]	; (8004fb4 <network_configure_activations+0xcc>)
 8004f70:	60d3      	str	r3, [r2, #12]
    
    nl_12_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004f72:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <network_configure_activations+0xb4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a10      	ldr	r2, [pc, #64]	; (8004fb8 <network_configure_activations+0xd0>)
 8004f78:	6093      	str	r3, [r2, #8]
    nl_12_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004f7a:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <network_configure_activations+0xb4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a0e      	ldr	r2, [pc, #56]	; (8004fb8 <network_configure_activations+0xd0>)
 8004f80:	60d3      	str	r3, [r2, #12]
    
    return true;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e005      	b.n	8004f92 <network_configure_activations+0xaa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8004f86:	2213      	movs	r2, #19
 8004f88:	2130      	movs	r1, #48	; 0x30
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fb6a 	bl	8005664 <ai_platform_network_set_error>
  return false;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	200138a8 	.word	0x200138a8
 8004fa0:	2000041c 	.word	0x2000041c
 8004fa4:	2000043c 	.word	0x2000043c
 8004fa8:	200004ac 	.word	0x200004ac
 8004fac:	2000044c 	.word	0x2000044c
 8004fb0:	2000046c 	.word	0x2000046c
 8004fb4:	2000047c 	.word	0x2000047c
 8004fb8:	2000049c 	.word	0x2000049c

08004fbc <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	2101      	movs	r1, #1
 8004fca:	483b      	ldr	r0, [pc, #236]	; (80050b8 <network_configure_weights+0xfc>)
 8004fcc:	f000 fa12 	bl	80053f4 <ai_platform_get_weights_map>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d065      	beq.n	80050a2 <network_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fd6:	4b39      	ldr	r3, [pc, #228]	; (80050bc <network_configure_weights+0x100>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fde:	4a37      	ldr	r2, [pc, #220]	; (80050bc <network_configure_weights+0x100>)
 8004fe0:	6013      	str	r3, [r2, #0]
    conv2d_9_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8004fe2:	4b35      	ldr	r3, [pc, #212]	; (80050b8 <network_configure_weights+0xfc>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a35      	ldr	r2, [pc, #212]	; (80050bc <network_configure_weights+0x100>)
 8004fe8:	6093      	str	r3, [r2, #8]
    conv2d_9_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8004fea:	4b33      	ldr	r3, [pc, #204]	; (80050b8 <network_configure_weights+0xfc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a33      	ldr	r2, [pc, #204]	; (80050bc <network_configure_weights+0x100>)
 8004ff0:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ff2:	4b33      	ldr	r3, [pc, #204]	; (80050c0 <network_configure_weights+0x104>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ffa:	4a31      	ldr	r2, [pc, #196]	; (80050c0 <network_configure_weights+0x104>)
 8004ffc:	6013      	str	r3, [r2, #0]
    conv2d_9_bias_array.data = AI_PTR(g_network_weights_map[0] + 144);
 8004ffe:	4b2e      	ldr	r3, [pc, #184]	; (80050b8 <network_configure_weights+0xfc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3390      	adds	r3, #144	; 0x90
 8005004:	4a2e      	ldr	r2, [pc, #184]	; (80050c0 <network_configure_weights+0x104>)
 8005006:	6093      	str	r3, [r2, #8]
    conv2d_9_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 144);
 8005008:	4b2b      	ldr	r3, [pc, #172]	; (80050b8 <network_configure_weights+0xfc>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3390      	adds	r3, #144	; 0x90
 800500e:	4a2c      	ldr	r2, [pc, #176]	; (80050c0 <network_configure_weights+0x104>)
 8005010:	60d3      	str	r3, [r2, #12]
    
    dense_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8005012:	4b2c      	ldr	r3, [pc, #176]	; (80050c4 <network_configure_weights+0x108>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800501a:	4a2a      	ldr	r2, [pc, #168]	; (80050c4 <network_configure_weights+0x108>)
 800501c:	6013      	str	r3, [r2, #0]
    dense_11_weights_array.data = AI_PTR(g_network_weights_map[0] + 152);
 800501e:	4b26      	ldr	r3, [pc, #152]	; (80050b8 <network_configure_weights+0xfc>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3398      	adds	r3, #152	; 0x98
 8005024:	4a27      	ldr	r2, [pc, #156]	; (80050c4 <network_configure_weights+0x108>)
 8005026:	6093      	str	r3, [r2, #8]
    dense_11_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 152);
 8005028:	4b23      	ldr	r3, [pc, #140]	; (80050b8 <network_configure_weights+0xfc>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3398      	adds	r3, #152	; 0x98
 800502e:	4a25      	ldr	r2, [pc, #148]	; (80050c4 <network_configure_weights+0x108>)
 8005030:	60d3      	str	r3, [r2, #12]
    
    dense_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8005032:	4b25      	ldr	r3, [pc, #148]	; (80050c8 <network_configure_weights+0x10c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800503a:	4a23      	ldr	r2, [pc, #140]	; (80050c8 <network_configure_weights+0x10c>)
 800503c:	6013      	str	r3, [r2, #0]
    dense_11_bias_array.data = AI_PTR(g_network_weights_map[0] + 752);
 800503e:	4b1e      	ldr	r3, [pc, #120]	; (80050b8 <network_configure_weights+0xfc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8005046:	4a20      	ldr	r2, [pc, #128]	; (80050c8 <network_configure_weights+0x10c>)
 8005048:	6093      	str	r3, [r2, #8]
    dense_11_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 752);
 800504a:	4b1b      	ldr	r3, [pc, #108]	; (80050b8 <network_configure_weights+0xfc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8005052:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <network_configure_weights+0x10c>)
 8005054:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005056:	4b1d      	ldr	r3, [pc, #116]	; (80050cc <network_configure_weights+0x110>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800505e:	4a1b      	ldr	r2, [pc, #108]	; (80050cc <network_configure_weights+0x110>)
 8005060:	6013      	str	r3, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 764);
 8005062:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <network_configure_weights+0xfc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 800506a:	4a18      	ldr	r2, [pc, #96]	; (80050cc <network_configure_weights+0x110>)
 800506c:	6093      	str	r3, [r2, #8]
    conv2d_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 764);
 800506e:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <network_configure_weights+0xfc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8005076:	4a15      	ldr	r2, [pc, #84]	; (80050cc <network_configure_weights+0x110>)
 8005078:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800507a:	4b15      	ldr	r3, [pc, #84]	; (80050d0 <network_configure_weights+0x114>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005082:	4a13      	ldr	r2, [pc, #76]	; (80050d0 <network_configure_weights+0x114>)
 8005084:	6013      	str	r3, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 836);
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <network_configure_weights+0xfc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800508e:	4a10      	ldr	r2, [pc, #64]	; (80050d0 <network_configure_weights+0x114>)
 8005090:	6093      	str	r3, [r2, #8]
    conv2d_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 836);
 8005092:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <network_configure_weights+0xfc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800509a:	4a0d      	ldr	r2, [pc, #52]	; (80050d0 <network_configure_weights+0x114>)
 800509c:	60d3      	str	r3, [r2, #12]
    
    return true;
 800509e:	2301      	movs	r3, #1
 80050a0:	e005      	b.n	80050ae <network_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80050a2:	2212      	movs	r2, #18
 80050a4:	2130      	movs	r1, #48	; 0x30
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fadc 	bl	8005664 <ai_platform_network_set_error>
  return false;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	200138ac 	.word	0x200138ac
 80050bc:	2000040c 	.word	0x2000040c
 80050c0:	2000042c 	.word	0x2000042c
 80050c4:	2000045c 	.word	0x2000045c
 80050c8:	2000048c 	.word	0x2000048c
 80050cc:	200004bc 	.word	0x200004bc
 80050d0:	200004cc 	.word	0x200004cc

080050d4 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fa53 	bl	8005588 <ai_platform_network_get_error>
 80050e2:	4603      	mov	r3, r0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80050f6:	2300      	movs	r3, #0
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	2305      	movs	r3, #5
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	2301      	movs	r3, #1
 8005100:	4a04      	ldr	r2, [pc, #16]	; (8005114 <ai_network_create+0x28>)
 8005102:	6839      	ldr	r1, [r7, #0]
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fc59 	bl	80059bc <ai_platform_network_create>
 800510a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	20000b2c 	.word	0x20000b2c

08005118 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b096      	sub	sp, #88	; 0x58
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8005124:	2100      	movs	r1, #0
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f7ff ffe0 	bl	80050ec <ai_network_create>
 800512c:	4603      	mov	r3, r0
 800512e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8005130:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <ai_network_create_and_init+0x24>
        return err;
 8005138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800513a:	e05d      	b.n	80051f8 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 800513c:	f107 0314 	add.w	r3, r7, #20
 8005140:	4618      	mov	r0, r3
 8005142:	f000 f8dd 	bl	8005300 <ai_network_data_params_get>
 8005146:	4603      	mov	r3, r0
 8005148:	f083 0301 	eor.w	r3, r3, #1
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff ffbc 	bl	80050d4 <ai_network_get_error>
 800515c:	4603      	mov	r3, r0
 800515e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8005160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005162:	e049      	b.n	80051f8 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d016      	beq.n	8005198 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800516a:	2300      	movs	r3, #0
 800516c:	657b      	str	r3, [r7, #84]	; 0x54
 800516e:	e00e      	b.n	800518e <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005170:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	4413      	add	r3, r2
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	f107 0314 	add.w	r3, r7, #20
 8005180:	330c      	adds	r3, #12
 8005182:	4618      	mov	r0, r3
 8005184:	f000 f922 	bl	80053cc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800518a:	3301      	adds	r3, #1
 800518c:	657b      	str	r3, [r7, #84]	; 0x54
 800518e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005190:	461a      	mov	r2, r3
 8005192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005194:	4293      	cmp	r3, r2
 8005196:	dbeb      	blt.n	8005170 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800519e:	2300      	movs	r3, #0
 80051a0:	653b      	str	r3, [r7, #80]	; 0x50
 80051a2:	e00e      	b.n	80051c2 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80051a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4413      	add	r3, r2
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	f107 0314 	add.w	r3, r7, #20
 80051b4:	3304      	adds	r3, #4
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 f908 	bl	80053cc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80051bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051be:	3301      	adds	r3, #1
 80051c0:	653b      	str	r3, [r7, #80]	; 0x50
 80051c2:	8b7b      	ldrh	r3, [r7, #26]
 80051c4:	461a      	mov	r2, r3
 80051c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c8:	4293      	cmp	r3, r2
 80051ca:	dbeb      	blt.n	80051a4 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f107 0214 	add.w	r2, r7, #20
 80051d4:	4611      	mov	r1, r2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 f846 	bl	8005268 <ai_network_init>
 80051dc:	4603      	mov	r3, r0
 80051de:	f083 0301 	eor.w	r3, r3, #1
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d006      	beq.n	80051f6 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff ff71 	bl	80050d4 <ai_network_get_error>
 80051f2:	4603      	mov	r3, r0
 80051f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80051f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3758      	adds	r7, #88	; 0x58
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d104      	bne.n	800521a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <ai_network_inputs_get+0x2c>)
 8005212:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a06      	ldr	r2, [pc, #24]	; (8005230 <ai_network_inputs_get+0x30>)
 8005218:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fa27 	bl	8005670 <ai_platform_inputs_get>
 8005222:	4603      	mov	r3, r0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20000b2c 	.word	0x20000b2c
 8005230:	a1c00100 	.word	0xa1c00100

08005234 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005244:	4b06      	ldr	r3, [pc, #24]	; (8005260 <ai_network_outputs_get+0x2c>)
 8005246:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a06      	ldr	r2, [pc, #24]	; (8005264 <ai_network_outputs_get+0x30>)
 800524c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800524e:	6839      	ldr	r1, [r7, #0]
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fae3 	bl	800581c <ai_platform_outputs_get>
 8005256:	4603      	mov	r3, r0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20000b2c 	.word	0x20000b2c
 8005264:	a1c00100 	.word	0xa1c00100

08005268 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005272:	6839      	ldr	r1, [r7, #0]
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fc77 	bl	8005b68 <ai_platform_network_init>
 800527a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <ai_network_init+0x1e>
 8005282:	2300      	movs	r3, #0
 8005284:	e028      	b.n	80052d8 <ai_network_init+0x70>

  ai_bool ok = true;
 8005286:	2301      	movs	r3, #1
 8005288:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff fe95 	bl	8004fbc <network_configure_weights>
 8005292:	4603      	mov	r3, r0
 8005294:	461a      	mov	r2, r3
 8005296:	7afb      	ldrb	r3, [r7, #11]
 8005298:	4013      	ands	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	bf14      	ite	ne
 800529e:	2301      	movne	r3, #1
 80052a0:	2300      	moveq	r3, #0
 80052a2:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7ff fe1e 	bl	8004ee8 <network_configure_activations>
 80052ac:	4603      	mov	r3, r0
 80052ae:	461a      	mov	r2, r3
 80052b0:	7afb      	ldrb	r3, [r7, #11]
 80052b2:	4013      	ands	r3, r2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bf14      	ite	ne
 80052b8:	2301      	movne	r3, #1
 80052ba:	2300      	moveq	r3, #0
 80052bc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fd40 	bl	8005d44 <ai_platform_network_post_init>
 80052c4:	4603      	mov	r3, r0
 80052c6:	461a      	mov	r2, r3
 80052c8:	7afb      	ldrb	r3, [r7, #11]
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bf14      	ite	ne
 80052d0:	2301      	movne	r3, #1
 80052d2:	2300      	moveq	r3, #0
 80052d4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80052d6:	7afb      	ldrb	r3, [r7, #11]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 fdaf 	bl	8005e54 <ai_platform_network_process>
 80052f6:	4603      	mov	r3, r0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <ai_network_data_params_get+0x12>
 800530e:	2300      	movs	r3, #0
 8005310:	e016      	b.n	8005340 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8005312:	4a0d      	ldr	r2, [pc, #52]	; (8005348 <ai_network_data_params_get+0x48>)
 8005314:	f107 0310 	add.w	r3, r7, #16
 8005318:	e892 0003 	ldmia.w	r2, {r0, r1}
 800531c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005320:	4a0a      	ldr	r2, [pc, #40]	; (800534c <ai_network_data_params_get+0x4c>)
 8005322:	f107 0308 	add.w	r3, r7, #8
 8005326:	e892 0003 	ldmia.w	r2, {r0, r1}
 800532a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800532e:	f107 0210 	add.w	r2, r7, #16
 8005332:	f107 0308 	add.w	r3, r7, #8
 8005336:	4619      	mov	r1, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f903 	bl	8005544 <ai_platform_bind_network_params>
 800533e:	4603      	mov	r3, r0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	0800e0c4 	.word	0x0800e0c4
 800534c:	0800e0cc 	.word	0x0800e0cc

08005350 <ai_buffer_get_size>:
 8005350:	b378      	cbz	r0, 80053b2 <ai_buffer_get_size+0x62>
 8005352:	b410      	push	{r4}
 8005354:	6803      	ldr	r3, [r0, #0]
 8005356:	4a17      	ldr	r2, [pc, #92]	; (80053b4 <ai_buffer_get_size+0x64>)
 8005358:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800535c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005360:	4293      	cmp	r3, r2
 8005362:	d01e      	beq.n	80053a2 <ai_buffer_get_size+0x52>
 8005364:	6984      	ldr	r4, [r0, #24]
 8005366:	6862      	ldr	r2, [r4, #4]
 8005368:	7d03      	ldrb	r3, [r0, #20]
 800536a:	6941      	ldr	r1, [r0, #20]
 800536c:	f1a3 0301 	sub.w	r3, r3, #1
 8005370:	fab3 f383 	clz	r3, r3
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800537a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800537e:	da0b      	bge.n	8005398 <ai_buffer_get_size+0x48>
 8005380:	2b01      	cmp	r3, #1
 8005382:	d102      	bne.n	800538a <ai_buffer_get_size+0x3a>
 8005384:	2802      	cmp	r0, #2
 8005386:	d007      	beq.n	8005398 <ai_buffer_get_size+0x48>
 8005388:	2302      	movs	r3, #2
 800538a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800538e:	3301      	adds	r3, #1
 8005390:	4298      	cmp	r0, r3
 8005392:	fb01 f202 	mul.w	r2, r1, r2
 8005396:	d1f3      	bne.n	8005380 <ai_buffer_get_size+0x30>
 8005398:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800539c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	2900      	cmp	r1, #0
 80053a4:	d0de      	beq.n	8005364 <ai_buffer_get_size+0x14>
 80053a6:	6984      	ldr	r4, [r0, #24]
 80053a8:	6863      	ldr	r3, [r4, #4]
 80053aa:	331f      	adds	r3, #31
 80053ac:	f023 021f 	bic.w	r2, r3, #31
 80053b0:	e7da      	b.n	8005368 <ai_buffer_get_size+0x18>
 80053b2:	4770      	bx	lr
 80053b4:	000400c0 	.word	0x000400c0

080053b8 <ai_buffer_array_sane>:
 80053b8:	b138      	cbz	r0, 80053ca <ai_buffer_array_sane+0x12>
 80053ba:	6843      	ldr	r3, [r0, #4]
 80053bc:	b123      	cbz	r3, 80053c8 <ai_buffer_array_sane+0x10>
 80053be:	8840      	ldrh	r0, [r0, #2]
 80053c0:	3800      	subs	r0, #0
 80053c2:	bf18      	it	ne
 80053c4:	2001      	movne	r0, #1
 80053c6:	4770      	bx	lr
 80053c8:	4618      	mov	r0, r3
 80053ca:	4770      	bx	lr

080053cc <ai_buffer_array_item_set_address>:
 80053cc:	b150      	cbz	r0, 80053e4 <ai_buffer_array_item_set_address+0x18>
 80053ce:	6843      	ldr	r3, [r0, #4]
 80053d0:	b14b      	cbz	r3, 80053e6 <ai_buffer_array_item_set_address+0x1a>
 80053d2:	8840      	ldrh	r0, [r0, #2]
 80053d4:	b900      	cbnz	r0, 80053d8 <ai_buffer_array_item_set_address+0xc>
 80053d6:	4770      	bx	lr
 80053d8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80053dc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80053e0:	2001      	movs	r0, #1
 80053e2:	604a      	str	r2, [r1, #4]
 80053e4:	4770      	bx	lr
 80053e6:	4618      	mov	r0, r3
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop

080053ec <_ai_platform_acquire_crc>:
 80053ec:	2001      	movs	r0, #1
 80053ee:	4770      	bx	lr

080053f0 <_ai_platform_release_crc>:
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop

080053f4 <ai_platform_get_weights_map>:
 80053f4:	2a00      	cmp	r2, #0
 80053f6:	d037      	beq.n	8005468 <ai_platform_get_weights_map+0x74>
 80053f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fa:	4604      	mov	r4, r0
 80053fc:	b1a0      	cbz	r0, 8005428 <ai_platform_get_weights_map+0x34>
 80053fe:	460f      	mov	r7, r1
 8005400:	b191      	cbz	r1, 8005428 <ai_platform_get_weights_map+0x34>
 8005402:	4b25      	ldr	r3, [pc, #148]	; (8005498 <ai_platform_get_weights_map+0xa4>)
 8005404:	6810      	ldr	r0, [r2, #0]
 8005406:	4298      	cmp	r0, r3
 8005408:	4615      	mov	r5, r2
 800540a:	d00f      	beq.n	800542c <ai_platform_get_weights_map+0x38>
 800540c:	6855      	ldr	r5, [r2, #4]
 800540e:	b15d      	cbz	r5, 8005428 <ai_platform_get_weights_map+0x34>
 8005410:	682e      	ldr	r6, [r5, #0]
 8005412:	429e      	cmp	r6, r3
 8005414:	d02a      	beq.n	800546c <ai_platform_get_weights_map+0x78>
 8005416:	f1a1 0001 	sub.w	r0, r1, #1
 800541a:	6025      	str	r5, [r4, #0]
 800541c:	fab0 f080 	clz	r0, r0
 8005420:	0940      	lsrs	r0, r0, #5
 8005422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005424:	42a7      	cmp	r7, r4
 8005426:	d034      	beq.n	8005492 <ai_platform_get_weights_map+0x9e>
 8005428:	2000      	movs	r0, #0
 800542a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800542c:	1d10      	adds	r0, r2, #4
 800542e:	f7ff ffc3 	bl	80053b8 <ai_buffer_array_sane>
 8005432:	2800      	cmp	r0, #0
 8005434:	d0f8      	beq.n	8005428 <ai_platform_get_weights_map+0x34>
 8005436:	88eb      	ldrh	r3, [r5, #6]
 8005438:	429f      	cmp	r7, r3
 800543a:	d1f5      	bne.n	8005428 <ai_platform_get_weights_map+0x34>
 800543c:	f04f 0e00 	mov.w	lr, #0
 8005440:	1f23      	subs	r3, r4, #4
 8005442:	4670      	mov	r0, lr
 8005444:	68aa      	ldr	r2, [r5, #8]
 8005446:	eb02 0c0e 	add.w	ip, r2, lr
 800544a:	f10e 0e1c 	add.w	lr, lr, #28
 800544e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005452:	b124      	cbz	r4, 800545e <ai_platform_get_weights_map+0x6a>
 8005454:	3001      	adds	r0, #1
 8005456:	4287      	cmp	r7, r0
 8005458:	f843 4f04 	str.w	r4, [r3, #4]!
 800545c:	d1f2      	bne.n	8005444 <ai_platform_get_weights_map+0x50>
 800545e:	1a38      	subs	r0, r7, r0
 8005460:	fab0 f080 	clz	r0, r0
 8005464:	0940      	lsrs	r0, r0, #5
 8005466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005468:	2000      	movs	r0, #0
 800546a:	4770      	bx	lr
 800546c:	1f23      	subs	r3, r4, #4
 800546e:	4628      	mov	r0, r5
 8005470:	2400      	movs	r4, #0
 8005472:	e000      	b.n	8005476 <ai_platform_get_weights_map+0x82>
 8005474:	4614      	mov	r4, r2
 8005476:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800547a:	42b2      	cmp	r2, r6
 800547c:	d0d2      	beq.n	8005424 <ai_platform_get_weights_map+0x30>
 800547e:	f843 2f04 	str.w	r2, [r3, #4]!
 8005482:	1c62      	adds	r2, r4, #1
 8005484:	4297      	cmp	r7, r2
 8005486:	d1f5      	bne.n	8005474 <ai_platform_get_weights_map+0x80>
 8005488:	3402      	adds	r4, #2
 800548a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800548e:	42b3      	cmp	r3, r6
 8005490:	d1ca      	bne.n	8005428 <ai_platform_get_weights_map+0x34>
 8005492:	2001      	movs	r0, #1
 8005494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005496:	bf00      	nop
 8005498:	a1facade 	.word	0xa1facade

0800549c <ai_platform_get_activations_map>:
 800549c:	2a00      	cmp	r2, #0
 800549e:	d038      	beq.n	8005512 <ai_platform_get_activations_map+0x76>
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	4604      	mov	r4, r0
 80054a4:	b1a0      	cbz	r0, 80054d0 <ai_platform_get_activations_map+0x34>
 80054a6:	460f      	mov	r7, r1
 80054a8:	b191      	cbz	r1, 80054d0 <ai_platform_get_activations_map+0x34>
 80054aa:	4b25      	ldr	r3, [pc, #148]	; (8005540 <ai_platform_get_activations_map+0xa4>)
 80054ac:	6810      	ldr	r0, [r2, #0]
 80054ae:	4298      	cmp	r0, r3
 80054b0:	4615      	mov	r5, r2
 80054b2:	d00f      	beq.n	80054d4 <ai_platform_get_activations_map+0x38>
 80054b4:	6a15      	ldr	r5, [r2, #32]
 80054b6:	b15d      	cbz	r5, 80054d0 <ai_platform_get_activations_map+0x34>
 80054b8:	682e      	ldr	r6, [r5, #0]
 80054ba:	429e      	cmp	r6, r3
 80054bc:	d02b      	beq.n	8005516 <ai_platform_get_activations_map+0x7a>
 80054be:	f1a1 0001 	sub.w	r0, r1, #1
 80054c2:	6025      	str	r5, [r4, #0]
 80054c4:	fab0 f080 	clz	r0, r0
 80054c8:	0940      	lsrs	r0, r0, #5
 80054ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054cc:	42a7      	cmp	r7, r4
 80054ce:	d035      	beq.n	800553c <ai_platform_get_activations_map+0xa0>
 80054d0:	2000      	movs	r0, #0
 80054d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d4:	f102 000c 	add.w	r0, r2, #12
 80054d8:	f7ff ff6e 	bl	80053b8 <ai_buffer_array_sane>
 80054dc:	2800      	cmp	r0, #0
 80054de:	d0f7      	beq.n	80054d0 <ai_platform_get_activations_map+0x34>
 80054e0:	89eb      	ldrh	r3, [r5, #14]
 80054e2:	429f      	cmp	r7, r3
 80054e4:	d1f4      	bne.n	80054d0 <ai_platform_get_activations_map+0x34>
 80054e6:	f04f 0e00 	mov.w	lr, #0
 80054ea:	1f23      	subs	r3, r4, #4
 80054ec:	4670      	mov	r0, lr
 80054ee:	692a      	ldr	r2, [r5, #16]
 80054f0:	eb02 0c0e 	add.w	ip, r2, lr
 80054f4:	f10e 0e1c 	add.w	lr, lr, #28
 80054f8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80054fc:	b124      	cbz	r4, 8005508 <ai_platform_get_activations_map+0x6c>
 80054fe:	3001      	adds	r0, #1
 8005500:	4287      	cmp	r7, r0
 8005502:	f843 4f04 	str.w	r4, [r3, #4]!
 8005506:	d1f2      	bne.n	80054ee <ai_platform_get_activations_map+0x52>
 8005508:	1a38      	subs	r0, r7, r0
 800550a:	fab0 f080 	clz	r0, r0
 800550e:	0940      	lsrs	r0, r0, #5
 8005510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005512:	2000      	movs	r0, #0
 8005514:	4770      	bx	lr
 8005516:	1f23      	subs	r3, r4, #4
 8005518:	4628      	mov	r0, r5
 800551a:	2400      	movs	r4, #0
 800551c:	e000      	b.n	8005520 <ai_platform_get_activations_map+0x84>
 800551e:	4614      	mov	r4, r2
 8005520:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8005524:	42b2      	cmp	r2, r6
 8005526:	d0d1      	beq.n	80054cc <ai_platform_get_activations_map+0x30>
 8005528:	f843 2f04 	str.w	r2, [r3, #4]!
 800552c:	1c62      	adds	r2, r4, #1
 800552e:	4297      	cmp	r7, r2
 8005530:	d1f5      	bne.n	800551e <ai_platform_get_activations_map+0x82>
 8005532:	3402      	adds	r4, #2
 8005534:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005538:	42b3      	cmp	r3, r6
 800553a:	d1c9      	bne.n	80054d0 <ai_platform_get_activations_map+0x34>
 800553c:	2001      	movs	r0, #1
 800553e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005540:	a1facade 	.word	0xa1facade

08005544 <ai_platform_bind_network_params>:
 8005544:	b1a0      	cbz	r0, 8005570 <ai_platform_bind_network_params+0x2c>
 8005546:	b1b1      	cbz	r1, 8005576 <ai_platform_bind_network_params+0x32>
 8005548:	b1c2      	cbz	r2, 800557c <ai_platform_bind_network_params+0x38>
 800554a:	b410      	push	{r4}
 800554c:	4603      	mov	r3, r0
 800554e:	4c0d      	ldr	r4, [pc, #52]	; (8005584 <ai_platform_bind_network_params+0x40>)
 8005550:	f843 4b04 	str.w	r4, [r3], #4
 8005554:	f100 0c0c 	add.w	ip, r0, #12
 8005558:	c903      	ldmia	r1, {r0, r1}
 800555a:	e883 0003 	stmia.w	r3, {r0, r1}
 800555e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005562:	e88c 0003 	stmia.w	ip, {r0, r1}
 8005566:	2301      	movs	r3, #1
 8005568:	4618      	mov	r0, r3
 800556a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	4603      	mov	r3, r0
 8005572:	4618      	mov	r0, r3
 8005574:	4770      	bx	lr
 8005576:	460b      	mov	r3, r1
 8005578:	4618      	mov	r0, r3
 800557a:	4770      	bx	lr
 800557c:	4613      	mov	r3, r2
 800557e:	4618      	mov	r0, r3
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	a1facade 	.word	0xa1facade

08005588 <ai_platform_network_get_error>:
 8005588:	b510      	push	{r4, lr}
 800558a:	b1f0      	cbz	r0, 80055ca <ai_platform_network_get_error+0x42>
 800558c:	4b2f      	ldr	r3, [pc, #188]	; (800564c <ai_platform_network_get_error+0xc4>)
 800558e:	6802      	ldr	r2, [r0, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	4604      	mov	r4, r0
 8005594:	d119      	bne.n	80055ca <ai_platform_network_get_error+0x42>
 8005596:	f7ff ff29 	bl	80053ec <_ai_platform_acquire_crc>
 800559a:	4b2d      	ldr	r3, [pc, #180]	; (8005650 <ai_platform_network_get_error+0xc8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a6:	d03c      	beq.n	8005622 <ai_platform_network_get_error+0x9a>
 80055a8:	4a2a      	ldr	r2, [pc, #168]	; (8005654 <ai_platform_network_get_error+0xcc>)
 80055aa:	2301      	movs	r3, #1
 80055ac:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80055b0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1fb      	bne.n	80055b0 <ai_platform_network_get_error+0x28>
 80055b8:	4b27      	ldr	r3, [pc, #156]	; (8005658 <ai_platform_network_get_error+0xd0>)
 80055ba:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80055be:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80055c2:	4b26      	ldr	r3, [pc, #152]	; (800565c <ai_platform_network_get_error+0xd4>)
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d038      	beq.n	800563a <ai_platform_network_get_error+0xb2>
 80055c8:	e7fe      	b.n	80055c8 <ai_platform_network_get_error+0x40>
 80055ca:	f7ff ff0f 	bl	80053ec <_ai_platform_acquire_crc>
 80055ce:	4b20      	ldr	r3, [pc, #128]	; (8005650 <ai_platform_network_get_error+0xc8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055da:	d010      	beq.n	80055fe <ai_platform_network_get_error+0x76>
 80055dc:	4a1d      	ldr	r2, [pc, #116]	; (8005654 <ai_platform_network_get_error+0xcc>)
 80055de:	2301      	movs	r3, #1
 80055e0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80055e4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1fb      	bne.n	80055e4 <ai_platform_network_get_error+0x5c>
 80055ec:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <ai_platform_network_get_error+0xd0>)
 80055ee:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80055f2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80055f6:	4b19      	ldr	r3, [pc, #100]	; (800565c <ai_platform_network_get_error+0xd4>)
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d00d      	beq.n	8005618 <ai_platform_network_get_error+0x90>
 80055fc:	e7fe      	b.n	80055fc <ai_platform_network_get_error+0x74>
 80055fe:	4a18      	ldr	r2, [pc, #96]	; (8005660 <ai_platform_network_get_error+0xd8>)
 8005600:	2301      	movs	r3, #1
 8005602:	6093      	str	r3, [r2, #8]
 8005604:	6893      	ldr	r3, [r2, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1fc      	bne.n	8005604 <ai_platform_network_get_error+0x7c>
 800560a:	4b13      	ldr	r3, [pc, #76]	; (8005658 <ai_platform_network_get_error+0xd0>)
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	4b12      	ldr	r3, [pc, #72]	; (800565c <ai_platform_network_get_error+0xd4>)
 8005612:	429a      	cmp	r2, r3
 8005614:	d000      	beq.n	8005618 <ai_platform_network_get_error+0x90>
 8005616:	e7fe      	b.n	8005616 <ai_platform_network_get_error+0x8e>
 8005618:	f7ff feea 	bl	80053f0 <_ai_platform_release_crc>
 800561c:	f241 0010 	movw	r0, #4112	; 0x1010
 8005620:	bd10      	pop	{r4, pc}
 8005622:	4a0f      	ldr	r2, [pc, #60]	; (8005660 <ai_platform_network_get_error+0xd8>)
 8005624:	2301      	movs	r3, #1
 8005626:	6093      	str	r3, [r2, #8]
 8005628:	6893      	ldr	r3, [r2, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1fc      	bne.n	8005628 <ai_platform_network_get_error+0xa0>
 800562e:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <ai_platform_network_get_error+0xd0>)
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	4b09      	ldr	r3, [pc, #36]	; (800565c <ai_platform_network_get_error+0xd4>)
 8005636:	429a      	cmp	r2, r3
 8005638:	d107      	bne.n	800564a <ai_platform_network_get_error+0xc2>
 800563a:	f7ff fed9 	bl	80053f0 <_ai_platform_release_crc>
 800563e:	f104 0010 	add.w	r0, r4, #16
 8005642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005646:	f000 be8d 	b.w	8006364 <core_get_error>
 800564a:	e7fe      	b.n	800564a <ai_platform_network_get_error+0xc2>
 800564c:	a1c00100 	.word	0xa1c00100
 8005650:	e0042000 	.word	0xe0042000
 8005654:	58024000 	.word	0x58024000
 8005658:	f407a5c2 	.word	0xf407a5c2
 800565c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005660:	40023000 	.word	0x40023000

08005664 <ai_platform_network_set_error>:
 8005664:	b110      	cbz	r0, 800566c <ai_platform_network_set_error+0x8>
 8005666:	3010      	adds	r0, #16
 8005668:	f000 be82 	b.w	8006370 <core_set_error>
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop

08005670 <ai_platform_inputs_get>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	b085      	sub	sp, #20
 8005676:	9102      	str	r1, [sp, #8]
 8005678:	b1f0      	cbz	r0, 80056b8 <ai_platform_inputs_get+0x48>
 800567a:	4b62      	ldr	r3, [pc, #392]	; (8005804 <ai_platform_inputs_get+0x194>)
 800567c:	6802      	ldr	r2, [r0, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	4607      	mov	r7, r0
 8005682:	d119      	bne.n	80056b8 <ai_platform_inputs_get+0x48>
 8005684:	f7ff feb2 	bl	80053ec <_ai_platform_acquire_crc>
 8005688:	4b5f      	ldr	r3, [pc, #380]	; (8005808 <ai_platform_inputs_get+0x198>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005694:	d03d      	beq.n	8005712 <ai_platform_inputs_get+0xa2>
 8005696:	4a5d      	ldr	r2, [pc, #372]	; (800580c <ai_platform_inputs_get+0x19c>)
 8005698:	2301      	movs	r3, #1
 800569a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800569e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1fb      	bne.n	800569e <ai_platform_inputs_get+0x2e>
 80056a6:	4b5a      	ldr	r3, [pc, #360]	; (8005810 <ai_platform_inputs_get+0x1a0>)
 80056a8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80056ac:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80056b0:	4b58      	ldr	r3, [pc, #352]	; (8005814 <ai_platform_inputs_get+0x1a4>)
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d039      	beq.n	800572a <ai_platform_inputs_get+0xba>
 80056b6:	e7fe      	b.n	80056b6 <ai_platform_inputs_get+0x46>
 80056b8:	f7ff fe98 	bl	80053ec <_ai_platform_acquire_crc>
 80056bc:	4b52      	ldr	r3, [pc, #328]	; (8005808 <ai_platform_inputs_get+0x198>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c8:	d010      	beq.n	80056ec <ai_platform_inputs_get+0x7c>
 80056ca:	4a50      	ldr	r2, [pc, #320]	; (800580c <ai_platform_inputs_get+0x19c>)
 80056cc:	2301      	movs	r3, #1
 80056ce:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80056d2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1fb      	bne.n	80056d2 <ai_platform_inputs_get+0x62>
 80056da:	4b4d      	ldr	r3, [pc, #308]	; (8005810 <ai_platform_inputs_get+0x1a0>)
 80056dc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80056e0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80056e4:	4b4b      	ldr	r3, [pc, #300]	; (8005814 <ai_platform_inputs_get+0x1a4>)
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d00d      	beq.n	8005706 <ai_platform_inputs_get+0x96>
 80056ea:	e7fe      	b.n	80056ea <ai_platform_inputs_get+0x7a>
 80056ec:	4a4a      	ldr	r2, [pc, #296]	; (8005818 <ai_platform_inputs_get+0x1a8>)
 80056ee:	2301      	movs	r3, #1
 80056f0:	6093      	str	r3, [r2, #8]
 80056f2:	6893      	ldr	r3, [r2, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1fc      	bne.n	80056f2 <ai_platform_inputs_get+0x82>
 80056f8:	4b45      	ldr	r3, [pc, #276]	; (8005810 <ai_platform_inputs_get+0x1a0>)
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	4b45      	ldr	r3, [pc, #276]	; (8005814 <ai_platform_inputs_get+0x1a4>)
 8005700:	429a      	cmp	r2, r3
 8005702:	d000      	beq.n	8005706 <ai_platform_inputs_get+0x96>
 8005704:	e7fe      	b.n	8005704 <ai_platform_inputs_get+0x94>
 8005706:	f7ff fe73 	bl	80053f0 <_ai_platform_release_crc>
 800570a:	2000      	movs	r0, #0
 800570c:	b005      	add	sp, #20
 800570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005712:	4a41      	ldr	r2, [pc, #260]	; (8005818 <ai_platform_inputs_get+0x1a8>)
 8005714:	2301      	movs	r3, #1
 8005716:	6093      	str	r3, [r2, #8]
 8005718:	6893      	ldr	r3, [r2, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1fc      	bne.n	8005718 <ai_platform_inputs_get+0xa8>
 800571e:	4b3c      	ldr	r3, [pc, #240]	; (8005810 <ai_platform_inputs_get+0x1a0>)
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	4b3b      	ldr	r3, [pc, #236]	; (8005814 <ai_platform_inputs_get+0x1a4>)
 8005726:	429a      	cmp	r2, r3
 8005728:	d155      	bne.n	80057d6 <ai_platform_inputs_get+0x166>
 800572a:	f7ff fe61 	bl	80053f0 <_ai_platform_release_crc>
 800572e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d051      	beq.n	80057d8 <ai_platform_inputs_get+0x168>
 8005734:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8005738:	f1ba 0f00 	cmp.w	sl, #0
 800573c:	d04c      	beq.n	80057d8 <ai_platform_inputs_get+0x168>
 800573e:	f04f 0b00 	mov.w	fp, #0
 8005742:	465d      	mov	r5, fp
 8005744:	9703      	str	r7, [sp, #12]
 8005746:	e016      	b.n	8005776 <ai_platform_inputs_get+0x106>
 8005748:	9901      	ldr	r1, [sp, #4]
 800574a:	2301      	movs	r3, #1
 800574c:	507b      	str	r3, [r7, r1]
 800574e:	69b1      	ldr	r1, [r6, #24]
 8005750:	6849      	ldr	r1, [r1, #4]
 8005752:	6121      	str	r1, [r4, #16]
 8005754:	f04f 0301 	mov.w	r3, #1
 8005758:	7523      	strb	r3, [r4, #20]
 800575a:	e9c4 c200 	strd	ip, r2, [r4]
 800575e:	6962      	ldr	r2, [r4, #20]
 8005760:	60a0      	str	r0, [r4, #8]
 8005762:	2300      	movs	r3, #0
 8005764:	f369 221f 	bfi	r2, r9, #8, #24
 8005768:	f8c4 8018 	str.w	r8, [r4, #24]
 800576c:	60e3      	str	r3, [r4, #12]
 800576e:	3501      	adds	r5, #1
 8005770:	f10b 0b1c 	add.w	fp, fp, #28
 8005774:	6162      	str	r2, [r4, #20]
 8005776:	f8ba 3000 	ldrh.w	r3, [sl]
 800577a:	42ab      	cmp	r3, r5
 800577c:	b2aa      	uxth	r2, r5
 800577e:	d93a      	bls.n	80057f6 <ai_platform_inputs_get+0x186>
 8005780:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005784:	00e9      	lsls	r1, r5, #3
 8005786:	9101      	str	r1, [sp, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d034      	beq.n	80057f6 <ai_platform_inputs_get+0x186>
 800578c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005790:	2e00      	cmp	r6, #0
 8005792:	d030      	beq.n	80057f6 <ai_platform_inputs_get+0x186>
 8005794:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005798:	69b2      	ldr	r2, [r6, #24]
 800579a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800579e:	6810      	ldr	r0, [r2, #0]
 80057a0:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80057a4:	68b3      	ldr	r3, [r6, #8]
 80057a6:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80057aa:	f003 f8b3 	bl	8008914 <ai_array_to_buffer_fmt>
 80057ae:	69b1      	ldr	r1, [r6, #24]
 80057b0:	4684      	mov	ip, r0
 80057b2:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80057b6:	688a      	ldr	r2, [r1, #8]
 80057b8:	445c      	add	r4, fp
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d0c8      	beq.n	8005750 <ai_platform_inputs_get+0xe0>
 80057be:	2100      	movs	r1, #0
 80057c0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80057c4:	6831      	ldr	r1, [r6, #0]
 80057c6:	6041      	str	r1, [r0, #4]
 80057c8:	b111      	cbz	r1, 80057d0 <ai_platform_inputs_get+0x160>
 80057ca:	8849      	ldrh	r1, [r1, #2]
 80057cc:	2900      	cmp	r1, #0
 80057ce:	d1bb      	bne.n	8005748 <ai_platform_inputs_get+0xd8>
 80057d0:	69b1      	ldr	r1, [r6, #24]
 80057d2:	2000      	movs	r0, #0
 80057d4:	e7bc      	b.n	8005750 <ai_platform_inputs_get+0xe0>
 80057d6:	e7fe      	b.n	80057d6 <ai_platform_inputs_get+0x166>
 80057d8:	2218      	movs	r2, #24
 80057da:	2111      	movs	r1, #17
 80057dc:	f107 0010 	add.w	r0, r7, #16
 80057e0:	f000 fdc6 	bl	8006370 <core_set_error>
 80057e4:	2200      	movs	r2, #0
 80057e6:	4610      	mov	r0, r2
 80057e8:	9b02      	ldr	r3, [sp, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d08e      	beq.n	800570c <ai_platform_inputs_get+0x9c>
 80057ee:	801a      	strh	r2, [r3, #0]
 80057f0:	b005      	add	sp, #20
 80057f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f6:	9f03      	ldr	r7, [sp, #12]
 80057f8:	2a00      	cmp	r2, #0
 80057fa:	d0ed      	beq.n	80057d8 <ai_platform_inputs_get+0x168>
 80057fc:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005800:	6858      	ldr	r0, [r3, #4]
 8005802:	e7f1      	b.n	80057e8 <ai_platform_inputs_get+0x178>
 8005804:	a1c00100 	.word	0xa1c00100
 8005808:	e0042000 	.word	0xe0042000
 800580c:	58024000 	.word	0x58024000
 8005810:	f407a5c2 	.word	0xf407a5c2
 8005814:	b5e8b5cd 	.word	0xb5e8b5cd
 8005818:	40023000 	.word	0x40023000

0800581c <ai_platform_outputs_get>:
 800581c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005820:	b085      	sub	sp, #20
 8005822:	9102      	str	r1, [sp, #8]
 8005824:	b1f0      	cbz	r0, 8005864 <ai_platform_outputs_get+0x48>
 8005826:	4b5f      	ldr	r3, [pc, #380]	; (80059a4 <ai_platform_outputs_get+0x188>)
 8005828:	6802      	ldr	r2, [r0, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	4607      	mov	r7, r0
 800582e:	d119      	bne.n	8005864 <ai_platform_outputs_get+0x48>
 8005830:	f7ff fddc 	bl	80053ec <_ai_platform_acquire_crc>
 8005834:	4b5c      	ldr	r3, [pc, #368]	; (80059a8 <ai_platform_outputs_get+0x18c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800583c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005840:	d03d      	beq.n	80058be <ai_platform_outputs_get+0xa2>
 8005842:	4a5a      	ldr	r2, [pc, #360]	; (80059ac <ai_platform_outputs_get+0x190>)
 8005844:	2301      	movs	r3, #1
 8005846:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800584a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1fb      	bne.n	800584a <ai_platform_outputs_get+0x2e>
 8005852:	4b57      	ldr	r3, [pc, #348]	; (80059b0 <ai_platform_outputs_get+0x194>)
 8005854:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005858:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800585c:	4b55      	ldr	r3, [pc, #340]	; (80059b4 <ai_platform_outputs_get+0x198>)
 800585e:	429a      	cmp	r2, r3
 8005860:	d039      	beq.n	80058d6 <ai_platform_outputs_get+0xba>
 8005862:	e7fe      	b.n	8005862 <ai_platform_outputs_get+0x46>
 8005864:	f7ff fdc2 	bl	80053ec <_ai_platform_acquire_crc>
 8005868:	4b4f      	ldr	r3, [pc, #316]	; (80059a8 <ai_platform_outputs_get+0x18c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005874:	d010      	beq.n	8005898 <ai_platform_outputs_get+0x7c>
 8005876:	4a4d      	ldr	r2, [pc, #308]	; (80059ac <ai_platform_outputs_get+0x190>)
 8005878:	2301      	movs	r3, #1
 800587a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800587e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1fb      	bne.n	800587e <ai_platform_outputs_get+0x62>
 8005886:	4b4a      	ldr	r3, [pc, #296]	; (80059b0 <ai_platform_outputs_get+0x194>)
 8005888:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800588c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005890:	4b48      	ldr	r3, [pc, #288]	; (80059b4 <ai_platform_outputs_get+0x198>)
 8005892:	429a      	cmp	r2, r3
 8005894:	d00d      	beq.n	80058b2 <ai_platform_outputs_get+0x96>
 8005896:	e7fe      	b.n	8005896 <ai_platform_outputs_get+0x7a>
 8005898:	4a47      	ldr	r2, [pc, #284]	; (80059b8 <ai_platform_outputs_get+0x19c>)
 800589a:	2301      	movs	r3, #1
 800589c:	6093      	str	r3, [r2, #8]
 800589e:	6893      	ldr	r3, [r2, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1fc      	bne.n	800589e <ai_platform_outputs_get+0x82>
 80058a4:	4b42      	ldr	r3, [pc, #264]	; (80059b0 <ai_platform_outputs_get+0x194>)
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	4b42      	ldr	r3, [pc, #264]	; (80059b4 <ai_platform_outputs_get+0x198>)
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d000      	beq.n	80058b2 <ai_platform_outputs_get+0x96>
 80058b0:	e7fe      	b.n	80058b0 <ai_platform_outputs_get+0x94>
 80058b2:	f7ff fd9d 	bl	80053f0 <_ai_platform_release_crc>
 80058b6:	2000      	movs	r0, #0
 80058b8:	b005      	add	sp, #20
 80058ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058be:	4a3e      	ldr	r2, [pc, #248]	; (80059b8 <ai_platform_outputs_get+0x19c>)
 80058c0:	2301      	movs	r3, #1
 80058c2:	6093      	str	r3, [r2, #8]
 80058c4:	6893      	ldr	r3, [r2, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1fc      	bne.n	80058c4 <ai_platform_outputs_get+0xa8>
 80058ca:	4b39      	ldr	r3, [pc, #228]	; (80059b0 <ai_platform_outputs_get+0x194>)
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	6812      	ldr	r2, [r2, #0]
 80058d0:	4b38      	ldr	r3, [pc, #224]	; (80059b4 <ai_platform_outputs_get+0x198>)
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d150      	bne.n	8005978 <ai_platform_outputs_get+0x15c>
 80058d6:	f7ff fd8b 	bl	80053f0 <_ai_platform_release_crc>
 80058da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d958      	bls.n	8005992 <ai_platform_outputs_get+0x176>
 80058e0:	f04f 0b00 	mov.w	fp, #0
 80058e4:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80058e8:	9703      	str	r7, [sp, #12]
 80058ea:	465d      	mov	r5, fp
 80058ec:	e016      	b.n	800591c <ai_platform_outputs_get+0x100>
 80058ee:	9901      	ldr	r1, [sp, #4]
 80058f0:	2301      	movs	r3, #1
 80058f2:	507b      	str	r3, [r7, r1]
 80058f4:	69b1      	ldr	r1, [r6, #24]
 80058f6:	6849      	ldr	r1, [r1, #4]
 80058f8:	6121      	str	r1, [r4, #16]
 80058fa:	f04f 0301 	mov.w	r3, #1
 80058fe:	7523      	strb	r3, [r4, #20]
 8005900:	e9c4 c200 	strd	ip, r2, [r4]
 8005904:	6962      	ldr	r2, [r4, #20]
 8005906:	60a0      	str	r0, [r4, #8]
 8005908:	2300      	movs	r3, #0
 800590a:	f369 221f 	bfi	r2, r9, #8, #24
 800590e:	f8c4 8018 	str.w	r8, [r4, #24]
 8005912:	60e3      	str	r3, [r4, #12]
 8005914:	3501      	adds	r5, #1
 8005916:	f10b 0b1c 	add.w	fp, fp, #28
 800591a:	6162      	str	r2, [r4, #20]
 800591c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005920:	42ab      	cmp	r3, r5
 8005922:	b2aa      	uxth	r2, r5
 8005924:	d929      	bls.n	800597a <ai_platform_outputs_get+0x15e>
 8005926:	f8da 3010 	ldr.w	r3, [sl, #16]
 800592a:	00e9      	lsls	r1, r5, #3
 800592c:	9101      	str	r1, [sp, #4]
 800592e:	b323      	cbz	r3, 800597a <ai_platform_outputs_get+0x15e>
 8005930:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005934:	b30e      	cbz	r6, 800597a <ai_platform_outputs_get+0x15e>
 8005936:	f8da 3014 	ldr.w	r3, [sl, #20]
 800593a:	69b2      	ldr	r2, [r6, #24]
 800593c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8005940:	6810      	ldr	r0, [r2, #0]
 8005942:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005946:	68b3      	ldr	r3, [r6, #8]
 8005948:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800594c:	f002 ffe2 	bl	8008914 <ai_array_to_buffer_fmt>
 8005950:	69b1      	ldr	r1, [r6, #24]
 8005952:	4684      	mov	ip, r0
 8005954:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8005958:	688a      	ldr	r2, [r1, #8]
 800595a:	445c      	add	r4, fp
 800595c:	2800      	cmp	r0, #0
 800595e:	d0ca      	beq.n	80058f6 <ai_platform_outputs_get+0xda>
 8005960:	2100      	movs	r1, #0
 8005962:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005966:	6831      	ldr	r1, [r6, #0]
 8005968:	6041      	str	r1, [r0, #4]
 800596a:	b111      	cbz	r1, 8005972 <ai_platform_outputs_get+0x156>
 800596c:	8849      	ldrh	r1, [r1, #2]
 800596e:	2900      	cmp	r1, #0
 8005970:	d1bd      	bne.n	80058ee <ai_platform_outputs_get+0xd2>
 8005972:	69b1      	ldr	r1, [r6, #24]
 8005974:	2000      	movs	r0, #0
 8005976:	e7be      	b.n	80058f6 <ai_platform_outputs_get+0xda>
 8005978:	e7fe      	b.n	8005978 <ai_platform_outputs_get+0x15c>
 800597a:	9f03      	ldr	r7, [sp, #12]
 800597c:	b14a      	cbz	r2, 8005992 <ai_platform_outputs_get+0x176>
 800597e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005982:	6858      	ldr	r0, [r3, #4]
 8005984:	9b02      	ldr	r3, [sp, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d096      	beq.n	80058b8 <ai_platform_outputs_get+0x9c>
 800598a:	801a      	strh	r2, [r3, #0]
 800598c:	b005      	add	sp, #20
 800598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005992:	2218      	movs	r2, #24
 8005994:	2111      	movs	r1, #17
 8005996:	f107 0010 	add.w	r0, r7, #16
 800599a:	f000 fce9 	bl	8006370 <core_set_error>
 800599e:	2200      	movs	r2, #0
 80059a0:	4610      	mov	r0, r2
 80059a2:	e7ef      	b.n	8005984 <ai_platform_outputs_get+0x168>
 80059a4:	a1c00100 	.word	0xa1c00100
 80059a8:	e0042000 	.word	0xe0042000
 80059ac:	58024000 	.word	0x58024000
 80059b0:	f407a5c2 	.word	0xf407a5c2
 80059b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80059b8:	40023000 	.word	0x40023000

080059bc <ai_platform_network_create>:
 80059bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059c0:	b083      	sub	sp, #12
 80059c2:	4606      	mov	r6, r0
 80059c4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80059c8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80059cc:	4615      	mov	r5, r2
 80059ce:	461f      	mov	r7, r3
 80059d0:	f7ff fd0c 	bl	80053ec <_ai_platform_acquire_crc>
 80059d4:	b188      	cbz	r0, 80059fa <ai_platform_network_create+0x3e>
 80059d6:	4a5d      	ldr	r2, [pc, #372]	; (8005b4c <ai_platform_network_create+0x190>)
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80059de:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80059e2:	4603      	mov	r3, r0
 80059e4:	d00e      	beq.n	8005a04 <ai_platform_network_create+0x48>
 80059e6:	4a5a      	ldr	r2, [pc, #360]	; (8005b50 <ai_platform_network_create+0x194>)
 80059e8:	2118      	movs	r1, #24
 80059ea:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80059ee:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80059f2:	2918      	cmp	r1, #24
 80059f4:	d018      	beq.n	8005a28 <ai_platform_network_create+0x6c>
 80059f6:	f7ff fcfb 	bl	80053f0 <_ai_platform_release_crc>
 80059fa:	f244 1033 	movw	r0, #16691	; 0x4133
 80059fe:	b003      	add	sp, #12
 8005a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a04:	4a53      	ldr	r2, [pc, #332]	; (8005b54 <ai_platform_network_create+0x198>)
 8005a06:	2101      	movs	r1, #1
 8005a08:	6091      	str	r1, [r2, #8]
 8005a0a:	2114      	movs	r1, #20
 8005a0c:	e001      	b.n	8005a12 <ai_platform_network_create+0x56>
 8005a0e:	3901      	subs	r1, #1
 8005a10:	d002      	beq.n	8005a18 <ai_platform_network_create+0x5c>
 8005a12:	6894      	ldr	r4, [r2, #8]
 8005a14:	2c00      	cmp	r4, #0
 8005a16:	d1fa      	bne.n	8005a0e <ai_platform_network_create+0x52>
 8005a18:	4a4e      	ldr	r2, [pc, #312]	; (8005b54 <ai_platform_network_create+0x198>)
 8005a1a:	6891      	ldr	r1, [r2, #8]
 8005a1c:	b911      	cbnz	r1, 8005a24 <ai_platform_network_create+0x68>
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	3201      	adds	r2, #1
 8005a22:	d008      	beq.n	8005a36 <ai_platform_network_create+0x7a>
 8005a24:	4618      	mov	r0, r3
 8005a26:	e7e6      	b.n	80059f6 <ai_platform_network_create+0x3a>
 8005a28:	2101      	movs	r1, #1
 8005a2a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8005a2e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8005a32:	2900      	cmp	r1, #0
 8005a34:	d1fb      	bne.n	8005a2e <ai_platform_network_create+0x72>
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fcda 	bl	80053f0 <_ai_platform_release_crc>
 8005a3c:	f7ff fcd6 	bl	80053ec <_ai_platform_acquire_crc>
 8005a40:	4b42      	ldr	r3, [pc, #264]	; (8005b4c <ai_platform_network_create+0x190>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a4c:	d010      	beq.n	8005a70 <ai_platform_network_create+0xb4>
 8005a4e:	4b40      	ldr	r3, [pc, #256]	; (8005b50 <ai_platform_network_create+0x194>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8005a56:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8005a5a:	2900      	cmp	r1, #0
 8005a5c:	d1fb      	bne.n	8005a56 <ai_platform_network_create+0x9a>
 8005a5e:	4a3e      	ldr	r2, [pc, #248]	; (8005b58 <ai_platform_network_create+0x19c>)
 8005a60:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005a64:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005a68:	4b3c      	ldr	r3, [pc, #240]	; (8005b5c <ai_platform_network_create+0x1a0>)
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d00c      	beq.n	8005a88 <ai_platform_network_create+0xcc>
 8005a6e:	e7fe      	b.n	8005a6e <ai_platform_network_create+0xb2>
 8005a70:	4a38      	ldr	r2, [pc, #224]	; (8005b54 <ai_platform_network_create+0x198>)
 8005a72:	2301      	movs	r3, #1
 8005a74:	6093      	str	r3, [r2, #8]
 8005a76:	6893      	ldr	r3, [r2, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1fc      	bne.n	8005a76 <ai_platform_network_create+0xba>
 8005a7c:	4b36      	ldr	r3, [pc, #216]	; (8005b58 <ai_platform_network_create+0x19c>)
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	4b36      	ldr	r3, [pc, #216]	; (8005b5c <ai_platform_network_create+0x1a0>)
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d122      	bne.n	8005ace <ai_platform_network_create+0x112>
 8005a88:	f7ff fcb2 	bl	80053f0 <_ai_platform_release_crc>
 8005a8c:	b38e      	cbz	r6, 8005af2 <ai_platform_network_create+0x136>
 8005a8e:	4b34      	ldr	r3, [pc, #208]	; (8005b60 <ai_platform_network_create+0x1a4>)
 8005a90:	602b      	str	r3, [r5, #0]
 8005a92:	6035      	str	r5, [r6, #0]
 8005a94:	f000 fc64 	bl	8006360 <core_init>
 8005a98:	b1d0      	cbz	r0, 8005ad0 <ai_platform_network_create+0x114>
 8005a9a:	f7ff fca7 	bl	80053ec <_ai_platform_acquire_crc>
 8005a9e:	4b2b      	ldr	r3, [pc, #172]	; (8005b4c <ai_platform_network_create+0x190>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aaa:	d025      	beq.n	8005af8 <ai_platform_network_create+0x13c>
 8005aac:	4a28      	ldr	r2, [pc, #160]	; (8005b50 <ai_platform_network_create+0x194>)
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ab4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1fb      	bne.n	8005ab4 <ai_platform_network_create+0xf8>
 8005abc:	4b26      	ldr	r3, [pc, #152]	; (8005b58 <ai_platform_network_create+0x19c>)
 8005abe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005ac2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005ac6:	4b25      	ldr	r3, [pc, #148]	; (8005b5c <ai_platform_network_create+0x1a0>)
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d022      	beq.n	8005b12 <ai_platform_network_create+0x156>
 8005acc:	e7fe      	b.n	8005acc <ai_platform_network_create+0x110>
 8005ace:	e7fe      	b.n	8005ace <ai_platform_network_create+0x112>
 8005ad0:	2430      	movs	r4, #48	; 0x30
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6033      	str	r3, [r6, #0]
 8005ad6:	2610      	movs	r6, #16
 8005ad8:	464a      	mov	r2, r9
 8005ada:	4641      	mov	r1, r8
 8005adc:	4638      	mov	r0, r7
 8005ade:	f002 fefb 	bl	80088d8 <ai_version_get>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f364 0007 	bfi	r0, r4, #0, #8
 8005aea:	64ab      	str	r3, [r5, #72]	; 0x48
 8005aec:	f366 201f 	bfi	r0, r6, #8, #24
 8005af0:	e785      	b.n	80059fe <ai_platform_network_create+0x42>
 8005af2:	f241 0010 	movw	r0, #4112	; 0x1010
 8005af6:	e782      	b.n	80059fe <ai_platform_network_create+0x42>
 8005af8:	4a16      	ldr	r2, [pc, #88]	; (8005b54 <ai_platform_network_create+0x198>)
 8005afa:	2301      	movs	r3, #1
 8005afc:	6093      	str	r3, [r2, #8]
 8005afe:	6893      	ldr	r3, [r2, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1fc      	bne.n	8005afe <ai_platform_network_create+0x142>
 8005b04:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <ai_platform_network_create+0x19c>)
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	6812      	ldr	r2, [r2, #0]
 8005b0a:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <ai_platform_network_create+0x1a0>)
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d000      	beq.n	8005b12 <ai_platform_network_create+0x156>
 8005b10:	e7fe      	b.n	8005b10 <ai_platform_network_create+0x154>
 8005b12:	f7ff fc6d 	bl	80053f0 <_ai_platform_release_crc>
 8005b16:	2200      	movs	r2, #0
 8005b18:	4641      	mov	r1, r8
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	f002 fedc 	bl	80088d8 <ai_version_get>
 8005b20:	2200      	movs	r2, #0
 8005b22:	4604      	mov	r4, r0
 8005b24:	2105      	movs	r1, #5
 8005b26:	2001      	movs	r0, #1
 8005b28:	f002 fed6 	bl	80088d8 <ai_version_get>
 8005b2c:	4284      	cmp	r4, r0
 8005b2e:	d001      	beq.n	8005b34 <ai_platform_network_create+0x178>
 8005b30:	2401      	movs	r4, #1
 8005b32:	e7ce      	b.n	8005ad2 <ai_platform_network_create+0x116>
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <ai_platform_network_create+0x1a8>)
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	a801      	add	r0, sp, #4
 8005b3a:	f002 fd13 	bl	8008564 <ai_check_custom_types>
 8005b3e:	b110      	cbz	r0, 8005b46 <ai_platform_network_create+0x18a>
 8005b40:	2600      	movs	r6, #0
 8005b42:	4634      	mov	r4, r6
 8005b44:	e7c8      	b.n	8005ad8 <ai_platform_network_create+0x11c>
 8005b46:	2402      	movs	r4, #2
 8005b48:	e7c3      	b.n	8005ad2 <ai_platform_network_create+0x116>
 8005b4a:	bf00      	nop
 8005b4c:	e0042000 	.word	0xe0042000
 8005b50:	58024000 	.word	0x58024000
 8005b54:	40023000 	.word	0x40023000
 8005b58:	f407a5c2 	.word	0xf407a5c2
 8005b5c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005b60:	a1c00100 	.word	0xa1c00100
 8005b64:	84048403 	.word	0x84048403

08005b68 <ai_platform_network_init>:
 8005b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b6c:	b1f8      	cbz	r0, 8005bae <ai_platform_network_init+0x46>
 8005b6e:	4b6e      	ldr	r3, [pc, #440]	; (8005d28 <ai_platform_network_init+0x1c0>)
 8005b70:	6802      	ldr	r2, [r0, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	4604      	mov	r4, r0
 8005b76:	d11a      	bne.n	8005bae <ai_platform_network_init+0x46>
 8005b78:	460e      	mov	r6, r1
 8005b7a:	f7ff fc37 	bl	80053ec <_ai_platform_acquire_crc>
 8005b7e:	4b6b      	ldr	r3, [pc, #428]	; (8005d2c <ai_platform_network_init+0x1c4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b8a:	d03d      	beq.n	8005c08 <ai_platform_network_init+0xa0>
 8005b8c:	4a68      	ldr	r2, [pc, #416]	; (8005d30 <ai_platform_network_init+0x1c8>)
 8005b8e:	2301      	movs	r3, #1
 8005b90:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005b94:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1fb      	bne.n	8005b94 <ai_platform_network_init+0x2c>
 8005b9c:	4b65      	ldr	r3, [pc, #404]	; (8005d34 <ai_platform_network_init+0x1cc>)
 8005b9e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005ba2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005ba6:	4b64      	ldr	r3, [pc, #400]	; (8005d38 <ai_platform_network_init+0x1d0>)
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d039      	beq.n	8005c20 <ai_platform_network_init+0xb8>
 8005bac:	e7fe      	b.n	8005bac <ai_platform_network_init+0x44>
 8005bae:	f7ff fc1d 	bl	80053ec <_ai_platform_acquire_crc>
 8005bb2:	4b5e      	ldr	r3, [pc, #376]	; (8005d2c <ai_platform_network_init+0x1c4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bbe:	d010      	beq.n	8005be2 <ai_platform_network_init+0x7a>
 8005bc0:	4a5b      	ldr	r2, [pc, #364]	; (8005d30 <ai_platform_network_init+0x1c8>)
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005bc8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1fb      	bne.n	8005bc8 <ai_platform_network_init+0x60>
 8005bd0:	4b58      	ldr	r3, [pc, #352]	; (8005d34 <ai_platform_network_init+0x1cc>)
 8005bd2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005bd6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005bda:	4b57      	ldr	r3, [pc, #348]	; (8005d38 <ai_platform_network_init+0x1d0>)
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d00d      	beq.n	8005bfc <ai_platform_network_init+0x94>
 8005be0:	e7fe      	b.n	8005be0 <ai_platform_network_init+0x78>
 8005be2:	4a56      	ldr	r2, [pc, #344]	; (8005d3c <ai_platform_network_init+0x1d4>)
 8005be4:	2301      	movs	r3, #1
 8005be6:	6093      	str	r3, [r2, #8]
 8005be8:	6893      	ldr	r3, [r2, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1fc      	bne.n	8005be8 <ai_platform_network_init+0x80>
 8005bee:	4b51      	ldr	r3, [pc, #324]	; (8005d34 <ai_platform_network_init+0x1cc>)
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	4b50      	ldr	r3, [pc, #320]	; (8005d38 <ai_platform_network_init+0x1d0>)
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d000      	beq.n	8005bfc <ai_platform_network_init+0x94>
 8005bfa:	e7fe      	b.n	8005bfa <ai_platform_network_init+0x92>
 8005bfc:	f7ff fbf8 	bl	80053f0 <_ai_platform_release_crc>
 8005c00:	2600      	movs	r6, #0
 8005c02:	4630      	mov	r0, r6
 8005c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c08:	4a4c      	ldr	r2, [pc, #304]	; (8005d3c <ai_platform_network_init+0x1d4>)
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	6093      	str	r3, [r2, #8]
 8005c0e:	6893      	ldr	r3, [r2, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1fc      	bne.n	8005c0e <ai_platform_network_init+0xa6>
 8005c14:	4b47      	ldr	r3, [pc, #284]	; (8005d34 <ai_platform_network_init+0x1cc>)
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	4b47      	ldr	r3, [pc, #284]	; (8005d38 <ai_platform_network_init+0x1d0>)
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d11c      	bne.n	8005c5a <ai_platform_network_init+0xf2>
 8005c20:	f7ff fbe6 	bl	80053f0 <_ai_platform_release_crc>
 8005c24:	2e00      	cmp	r6, #0
 8005c26:	d06f      	beq.n	8005d08 <ai_platform_network_init+0x1a0>
 8005c28:	4b45      	ldr	r3, [pc, #276]	; (8005d40 <ai_platform_network_init+0x1d8>)
 8005c2a:	6832      	ldr	r2, [r6, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d115      	bne.n	8005c5c <ai_platform_network_init+0xf4>
 8005c30:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8005c34:	6933      	ldr	r3, [r6, #16]
 8005c36:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8005c3a:	89f7      	ldrh	r7, [r6, #14]
 8005c3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c3e:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8005c42:	2303      	movs	r3, #3
 8005c44:	84e7      	strh	r7, [r4, #38]	; 0x26
 8005c46:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8005c4a:	60e3      	str	r3, [r4, #12]
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	4626      	mov	r6, r4
 8005c50:	f002 fcb2 	bl	80085b8 <ai_layers_init_all>
 8005c54:	4630      	mov	r0, r6
 8005c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c5a:	e7fe      	b.n	8005c5a <ai_platform_network_init+0xf2>
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4630      	mov	r0, r6
 8005c60:	4635      	mov	r5, r6
 8005c62:	6876      	ldr	r6, [r6, #4]
 8005c64:	f7ff fb74 	bl	8005350 <ai_buffer_get_size>
 8005c68:	f105 081c 	add.w	r8, r5, #28
 8005c6c:	4681      	mov	r9, r0
 8005c6e:	2101      	movs	r1, #1
 8005c70:	4640      	mov	r0, r8
 8005c72:	6a2f      	ldr	r7, [r5, #32]
 8005c74:	f7ff fb6c 	bl	8005350 <ai_buffer_get_size>
 8005c78:	f1b9 0f00 	cmp.w	r9, #0
 8005c7c:	d025      	beq.n	8005cca <ai_platform_network_init+0x162>
 8005c7e:	2201      	movs	r2, #1
 8005c80:	4696      	mov	lr, r2
 8005c82:	bb30      	cbnz	r0, 8005cd2 <ai_platform_network_init+0x16a>
 8005c84:	4680      	mov	r8, r0
 8005c86:	4607      	mov	r7, r0
 8005c88:	b376      	cbz	r6, 8005ce8 <ai_platform_network_init+0x180>
 8005c8a:	8be3      	ldrh	r3, [r4, #30]
 8005c8c:	4573      	cmp	r3, lr
 8005c8e:	d323      	bcc.n	8005cd8 <ai_platform_network_init+0x170>
 8005c90:	b142      	cbz	r2, 8005ca4 <ai_platform_network_init+0x13c>
 8005c92:	46ac      	mov	ip, r5
 8005c94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005c98:	6a25      	ldr	r5, [r4, #32]
 8005c9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c9c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8005ca0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005ca4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005ca6:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8005caa:	2600      	movs	r6, #0
 8005cac:	42bb      	cmp	r3, r7
 8005cae:	83a6      	strh	r6, [r4, #28]
 8005cb0:	d323      	bcc.n	8005cfa <ai_platform_network_init+0x192>
 8005cb2:	b37f      	cbz	r7, 8005d14 <ai_platform_network_init+0x1ac>
 8005cb4:	46c4      	mov	ip, r8
 8005cb6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005cba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cbe:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8005cc2:	46b6      	mov	lr, r6
 8005cc4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005cc8:	e7bb      	b.n	8005c42 <ai_platform_network_init+0xda>
 8005cca:	464a      	mov	r2, r9
 8005ccc:	46ce      	mov	lr, r9
 8005cce:	464d      	mov	r5, r9
 8005cd0:	e7d7      	b.n	8005c82 <ai_platform_network_init+0x11a>
 8005cd2:	b30f      	cbz	r7, 8005d18 <ai_platform_network_init+0x1b0>
 8005cd4:	2701      	movs	r7, #1
 8005cd6:	e7d7      	b.n	8005c88 <ai_platform_network_init+0x120>
 8005cd8:	2212      	movs	r2, #18
 8005cda:	2116      	movs	r1, #22
 8005cdc:	f104 0010 	add.w	r0, r4, #16
 8005ce0:	f000 fb46 	bl	8006370 <core_set_error>
 8005ce4:	2600      	movs	r6, #0
 8005ce6:	e78c      	b.n	8005c02 <ai_platform_network_init+0x9a>
 8005ce8:	f1b9 0f00 	cmp.w	r9, #0
 8005cec:	d0cd      	beq.n	8005c8a <ai_platform_network_init+0x122>
 8005cee:	2110      	movs	r1, #16
 8005cf0:	2212      	movs	r2, #18
 8005cf2:	1860      	adds	r0, r4, r1
 8005cf4:	f000 fb3c 	bl	8006370 <core_set_error>
 8005cf8:	e783      	b.n	8005c02 <ai_platform_network_init+0x9a>
 8005cfa:	2213      	movs	r2, #19
 8005cfc:	2116      	movs	r1, #22
 8005cfe:	f104 0010 	add.w	r0, r4, #16
 8005d02:	f000 fb35 	bl	8006370 <core_set_error>
 8005d06:	e77c      	b.n	8005c02 <ai_platform_network_init+0x9a>
 8005d08:	2110      	movs	r1, #16
 8005d0a:	2211      	movs	r2, #17
 8005d0c:	1860      	adds	r0, r4, r1
 8005d0e:	f000 fb2f 	bl	8006370 <core_set_error>
 8005d12:	e776      	b.n	8005c02 <ai_platform_network_init+0x9a>
 8005d14:	46be      	mov	lr, r7
 8005d16:	e794      	b.n	8005c42 <ai_platform_network_init+0xda>
 8005d18:	2110      	movs	r1, #16
 8005d1a:	2213      	movs	r2, #19
 8005d1c:	1860      	adds	r0, r4, r1
 8005d1e:	f000 fb27 	bl	8006370 <core_set_error>
 8005d22:	463e      	mov	r6, r7
 8005d24:	e76d      	b.n	8005c02 <ai_platform_network_init+0x9a>
 8005d26:	bf00      	nop
 8005d28:	a1c00100 	.word	0xa1c00100
 8005d2c:	e0042000 	.word	0xe0042000
 8005d30:	58024000 	.word	0x58024000
 8005d34:	f407a5c2 	.word	0xf407a5c2
 8005d38:	b5e8b5cd 	.word	0xb5e8b5cd
 8005d3c:	40023000 	.word	0x40023000
 8005d40:	a1facade 	.word	0xa1facade

08005d44 <ai_platform_network_post_init>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	b1f0      	cbz	r0, 8005d86 <ai_platform_network_post_init+0x42>
 8005d48:	4b3c      	ldr	r3, [pc, #240]	; (8005e3c <ai_platform_network_post_init+0xf8>)
 8005d4a:	6802      	ldr	r2, [r0, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	4604      	mov	r4, r0
 8005d50:	d119      	bne.n	8005d86 <ai_platform_network_post_init+0x42>
 8005d52:	f7ff fb4b 	bl	80053ec <_ai_platform_acquire_crc>
 8005d56:	4b3a      	ldr	r3, [pc, #232]	; (8005e40 <ai_platform_network_post_init+0xfc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d62:	d03b      	beq.n	8005ddc <ai_platform_network_post_init+0x98>
 8005d64:	4a37      	ldr	r2, [pc, #220]	; (8005e44 <ai_platform_network_post_init+0x100>)
 8005d66:	2301      	movs	r3, #1
 8005d68:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005d6c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1fb      	bne.n	8005d6c <ai_platform_network_post_init+0x28>
 8005d74:	4b34      	ldr	r3, [pc, #208]	; (8005e48 <ai_platform_network_post_init+0x104>)
 8005d76:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005d7a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005d7e:	4b33      	ldr	r3, [pc, #204]	; (8005e4c <ai_platform_network_post_init+0x108>)
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d037      	beq.n	8005df4 <ai_platform_network_post_init+0xb0>
 8005d84:	e7fe      	b.n	8005d84 <ai_platform_network_post_init+0x40>
 8005d86:	f7ff fb31 	bl	80053ec <_ai_platform_acquire_crc>
 8005d8a:	4b2d      	ldr	r3, [pc, #180]	; (8005e40 <ai_platform_network_post_init+0xfc>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d96:	d010      	beq.n	8005dba <ai_platform_network_post_init+0x76>
 8005d98:	4a2a      	ldr	r2, [pc, #168]	; (8005e44 <ai_platform_network_post_init+0x100>)
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005da0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1fb      	bne.n	8005da0 <ai_platform_network_post_init+0x5c>
 8005da8:	4b27      	ldr	r3, [pc, #156]	; (8005e48 <ai_platform_network_post_init+0x104>)
 8005daa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005dae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005db2:	4b26      	ldr	r3, [pc, #152]	; (8005e4c <ai_platform_network_post_init+0x108>)
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d00d      	beq.n	8005dd4 <ai_platform_network_post_init+0x90>
 8005db8:	e7fe      	b.n	8005db8 <ai_platform_network_post_init+0x74>
 8005dba:	4a25      	ldr	r2, [pc, #148]	; (8005e50 <ai_platform_network_post_init+0x10c>)
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	6093      	str	r3, [r2, #8]
 8005dc0:	6893      	ldr	r3, [r2, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1fc      	bne.n	8005dc0 <ai_platform_network_post_init+0x7c>
 8005dc6:	4b20      	ldr	r3, [pc, #128]	; (8005e48 <ai_platform_network_post_init+0x104>)
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	4b1f      	ldr	r3, [pc, #124]	; (8005e4c <ai_platform_network_post_init+0x108>)
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d000      	beq.n	8005dd4 <ai_platform_network_post_init+0x90>
 8005dd2:	e7fe      	b.n	8005dd2 <ai_platform_network_post_init+0x8e>
 8005dd4:	f7ff fb0c 	bl	80053f0 <_ai_platform_release_crc>
 8005dd8:	2000      	movs	r0, #0
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	4a1c      	ldr	r2, [pc, #112]	; (8005e50 <ai_platform_network_post_init+0x10c>)
 8005dde:	2301      	movs	r3, #1
 8005de0:	6093      	str	r3, [r2, #8]
 8005de2:	6893      	ldr	r3, [r2, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1fc      	bne.n	8005de2 <ai_platform_network_post_init+0x9e>
 8005de8:	4b17      	ldr	r3, [pc, #92]	; (8005e48 <ai_platform_network_post_init+0x104>)
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	4b17      	ldr	r3, [pc, #92]	; (8005e4c <ai_platform_network_post_init+0x108>)
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d11a      	bne.n	8005e2a <ai_platform_network_post_init+0xe6>
 8005df4:	f7ff fafc 	bl	80053f0 <_ai_platform_release_crc>
 8005df8:	68e3      	ldr	r3, [r4, #12]
 8005dfa:	f013 0502 	ands.w	r5, r3, #2
 8005dfe:	d015      	beq.n	8005e2c <ai_platform_network_post_init+0xe8>
 8005e00:	4620      	mov	r0, r4
 8005e02:	f002 fbe7 	bl	80085d4 <ai_layers_post_init_all>
 8005e06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e08:	b16b      	cbz	r3, 8005e26 <ai_platform_network_post_init+0xe2>
 8005e0a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005e0c:	e007      	b.n	8005e1e <ai_platform_network_post_init+0xda>
 8005e0e:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8005e12:	4798      	blx	r3
 8005e14:	692b      	ldr	r3, [r5, #16]
 8005e16:	42ab      	cmp	r3, r5
 8005e18:	d005      	beq.n	8005e26 <ai_platform_network_post_init+0xe2>
 8005e1a:	b123      	cbz	r3, 8005e26 <ai_platform_network_post_init+0xe2>
 8005e1c:	461d      	mov	r5, r3
 8005e1e:	4629      	mov	r1, r5
 8005e20:	2000      	movs	r0, #0
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	d1f3      	bne.n	8005e0e <ai_platform_network_post_init+0xca>
 8005e26:	2001      	movs	r0, #1
 8005e28:	bd38      	pop	{r3, r4, r5, pc}
 8005e2a:	e7fe      	b.n	8005e2a <ai_platform_network_post_init+0xe6>
 8005e2c:	2210      	movs	r2, #16
 8005e2e:	2111      	movs	r1, #17
 8005e30:	18a0      	adds	r0, r4, r2
 8005e32:	f000 fa9d 	bl	8006370 <core_set_error>
 8005e36:	4628      	mov	r0, r5
 8005e38:	bd38      	pop	{r3, r4, r5, pc}
 8005e3a:	bf00      	nop
 8005e3c:	a1c00100 	.word	0xa1c00100
 8005e40:	e0042000 	.word	0xe0042000
 8005e44:	58024000 	.word	0x58024000
 8005e48:	f407a5c2 	.word	0xf407a5c2
 8005e4c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005e50:	40023000 	.word	0x40023000

08005e54 <ai_platform_network_process>:
 8005e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e58:	460e      	mov	r6, r1
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	4693      	mov	fp, r2
 8005e5e:	4605      	mov	r5, r0
 8005e60:	b120      	cbz	r0, 8005e6c <ai_platform_network_process+0x18>
 8005e62:	4bb8      	ldr	r3, [pc, #736]	; (8006144 <ai_platform_network_process+0x2f0>)
 8005e64:	6802      	ldr	r2, [r0, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	bf18      	it	ne
 8005e6a:	2500      	movne	r5, #0
 8005e6c:	f7ff fabe 	bl	80053ec <_ai_platform_acquire_crc>
 8005e70:	4bb5      	ldr	r3, [pc, #724]	; (8006148 <ai_platform_network_process+0x2f4>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e7c:	d010      	beq.n	8005ea0 <ai_platform_network_process+0x4c>
 8005e7e:	4ab3      	ldr	r2, [pc, #716]	; (800614c <ai_platform_network_process+0x2f8>)
 8005e80:	2301      	movs	r3, #1
 8005e82:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005e86:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1fb      	bne.n	8005e86 <ai_platform_network_process+0x32>
 8005e8e:	4bb0      	ldr	r3, [pc, #704]	; (8006150 <ai_platform_network_process+0x2fc>)
 8005e90:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005e94:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005e98:	4bae      	ldr	r3, [pc, #696]	; (8006154 <ai_platform_network_process+0x300>)
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d00d      	beq.n	8005eba <ai_platform_network_process+0x66>
 8005e9e:	e7fe      	b.n	8005e9e <ai_platform_network_process+0x4a>
 8005ea0:	4aad      	ldr	r2, [pc, #692]	; (8006158 <ai_platform_network_process+0x304>)
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	6093      	str	r3, [r2, #8]
 8005ea6:	6893      	ldr	r3, [r2, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1fc      	bne.n	8005ea6 <ai_platform_network_process+0x52>
 8005eac:	4ba8      	ldr	r3, [pc, #672]	; (8006150 <ai_platform_network_process+0x2fc>)
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	4ba8      	ldr	r3, [pc, #672]	; (8006154 <ai_platform_network_process+0x300>)
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	f040 812c 	bne.w	8006112 <ai_platform_network_process+0x2be>
 8005eba:	f7ff fa99 	bl	80053f0 <_ai_platform_release_crc>
 8005ebe:	2d00      	cmp	r5, #0
 8005ec0:	f000 8154 	beq.w	800616c <ai_platform_network_process+0x318>
 8005ec4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 8124 	beq.w	8006114 <ai_platform_network_process+0x2c0>
 8005ecc:	68eb      	ldr	r3, [r5, #12]
 8005ece:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2700      	movs	r7, #0
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	616f      	str	r7, [r5, #20]
 8005edc:	f040 813e 	bne.w	800615c <ai_platform_network_process+0x308>
 8005ee0:	2e00      	cmp	r6, #0
 8005ee2:	f000 811d 	beq.w	8006120 <ai_platform_network_process+0x2cc>
 8005ee6:	f1ba 0f00 	cmp.w	sl, #0
 8005eea:	f000 8119 	beq.w	8006120 <ai_platform_network_process+0x2cc>
 8005eee:	f8ba 3000 	ldrh.w	r3, [sl]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 8114 	beq.w	8006120 <ai_platform_network_process+0x2cc>
 8005ef8:	69b3      	ldr	r3, [r6, #24]
 8005efa:	f8cd b00c 	str.w	fp, [sp, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8005f04:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d072      	beq.n	8005ff2 <ai_platform_network_process+0x19e>
 8005f0c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8005f10:	2c00      	cmp	r4, #0
 8005f12:	d06e      	beq.n	8005ff2 <ai_platform_network_process+0x19e>
 8005f14:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005f18:	f8d3 9000 	ldr.w	r9, [r3]
 8005f1c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8005f20:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005f24:	f000 81e0 	beq.w	80062e8 <ai_platform_network_process+0x494>
 8005f28:	69a3      	ldr	r3, [r4, #24]
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	685d      	ldr	r5, [r3, #4]
 8005f30:	f7ff fa0e 	bl	8005350 <ai_buffer_get_size>
 8005f34:	4285      	cmp	r5, r0
 8005f36:	f0c0 811b 	bcc.w	8006170 <ai_platform_network_process+0x31c>
 8005f3a:	68e0      	ldr	r0, [r4, #12]
 8005f3c:	69b1      	ldr	r1, [r6, #24]
 8005f3e:	68c2      	ldr	r2, [r0, #12]
 8005f40:	68cb      	ldr	r3, [r1, #12]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	f040 8114 	bne.w	8006170 <ai_platform_network_process+0x31c>
 8005f48:	6882      	ldr	r2, [r0, #8]
 8005f4a:	688b      	ldr	r3, [r1, #8]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	f040 810f 	bne.w	8006170 <ai_platform_network_process+0x31c>
 8005f52:	6842      	ldr	r2, [r0, #4]
 8005f54:	684b      	ldr	r3, [r1, #4]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	f040 810a 	bne.w	8006170 <ai_platform_network_process+0x31c>
 8005f5c:	69a3      	ldr	r3, [r4, #24]
 8005f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f62:	f002 fd6b 	bl	8008a3c <ai_array_get_data_byte_size>
 8005f66:	4605      	mov	r5, r0
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f002 fcbb 	bl	80088e4 <get_tensor_byte_size>
 8005f6e:	4285      	cmp	r5, r0
 8005f70:	f0c0 80fe 	bcc.w	8006170 <ai_platform_network_process+0x31c>
 8005f74:	69a3      	ldr	r3, [r4, #24]
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	f002 fccc 	bl	8008914 <ai_array_to_buffer_fmt>
 8005f7c:	6833      	ldr	r3, [r6, #0]
 8005f7e:	4058      	eors	r0, r3
 8005f80:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005f84:	f040 81bb 	bne.w	80062fe <ai_platform_network_process+0x4aa>
 8005f88:	6873      	ldr	r3, [r6, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 81ae 	beq.w	80062ec <ai_platform_network_process+0x498>
 8005f90:	69b3      	ldr	r3, [r6, #24]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 819e 	beq.w	80062d6 <ai_platform_network_process+0x482>
 8005f9a:	9a01      	ldr	r2, [sp, #4]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	bf38      	it	cc
 8005fa0:	461a      	movcc	r2, r3
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	9201      	str	r2, [sp, #4]
 8005fa6:	f002 fc9d 	bl	80088e4 <get_tensor_byte_size>
 8005faa:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fae:	69b3      	ldr	r3, [r6, #24]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	fb00 f303 	mul.w	r3, r0, r3
 8005fb6:	f8c8 300c 	str.w	r3, [r8, #12]
 8005fba:	6871      	ldr	r1, [r6, #4]
 8005fbc:	f8c8 1004 	str.w	r1, [r8, #4]
 8005fc0:	440b      	add	r3, r1
 8005fc2:	f849 300b 	str.w	r3, [r9, fp]
 8005fc6:	69a0      	ldr	r0, [r4, #24]
 8005fc8:	6803      	ldr	r3, [r0, #0]
 8005fca:	009a      	lsls	r2, r3, #2
 8005fcc:	f107 0701 	add.w	r7, r7, #1
 8005fd0:	f106 061c 	add.w	r6, r6, #28
 8005fd4:	f100 80af 	bmi.w	8006136 <ai_platform_network_process+0x2e2>
 8005fd8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	4419      	add	r1, r3
 8005fe0:	6081      	str	r1, [r0, #8]
 8005fe2:	69a3      	ldr	r3, [r4, #24]
 8005fe4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005fe8:	60da      	str	r2, [r3, #12]
 8005fea:	f8ba 3000 	ldrh.w	r3, [sl]
 8005fee:	42bb      	cmp	r3, r7
 8005ff0:	d888      	bhi.n	8005f04 <ai_platform_network_process+0xb0>
 8005ff2:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8005ff6:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8005ff8:	f1bb 0f00 	cmp.w	fp, #0
 8005ffc:	f000 8188 	beq.w	8006310 <ai_platform_network_process+0x4bc>
 8006000:	2a01      	cmp	r2, #1
 8006002:	f240 8160 	bls.w	80062c6 <ai_platform_network_process+0x472>
 8006006:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800600a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 8159 	beq.w	80062c6 <ai_platform_network_process+0x472>
 8006014:	465e      	mov	r6, fp
 8006016:	2700      	movs	r7, #0
 8006018:	462c      	mov	r4, r5
 800601a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 80b4 	beq.w	800618c <ai_platform_network_process+0x338>
 8006024:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8006028:	2d00      	cmp	r5, #0
 800602a:	f000 80af 	beq.w	800618c <ai_platform_network_process+0x338>
 800602e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006032:	f8d3 8000 	ldr.w	r8, [r3]
 8006036:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800603a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800603e:	f000 8173 	beq.w	8006328 <ai_platform_network_process+0x4d4>
 8006042:	69ab      	ldr	r3, [r5, #24]
 8006044:	2101      	movs	r1, #1
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	9302      	str	r3, [sp, #8]
 800604a:	4630      	mov	r0, r6
 800604c:	f7ff f980 	bl	8005350 <ai_buffer_get_size>
 8006050:	9b02      	ldr	r3, [sp, #8]
 8006052:	4283      	cmp	r3, r0
 8006054:	f0c0 8136 	bcc.w	80062c4 <ai_platform_network_process+0x470>
 8006058:	68e8      	ldr	r0, [r5, #12]
 800605a:	69b1      	ldr	r1, [r6, #24]
 800605c:	68c2      	ldr	r2, [r0, #12]
 800605e:	68cb      	ldr	r3, [r1, #12]
 8006060:	429a      	cmp	r2, r3
 8006062:	f040 812f 	bne.w	80062c4 <ai_platform_network_process+0x470>
 8006066:	6882      	ldr	r2, [r0, #8]
 8006068:	688b      	ldr	r3, [r1, #8]
 800606a:	429a      	cmp	r2, r3
 800606c:	f040 812a 	bne.w	80062c4 <ai_platform_network_process+0x470>
 8006070:	6842      	ldr	r2, [r0, #4]
 8006072:	684b      	ldr	r3, [r1, #4]
 8006074:	429a      	cmp	r2, r3
 8006076:	f040 8125 	bne.w	80062c4 <ai_platform_network_process+0x470>
 800607a:	69ab      	ldr	r3, [r5, #24]
 800607c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006080:	f002 fcdc 	bl	8008a3c <ai_array_get_data_byte_size>
 8006084:	9002      	str	r0, [sp, #8]
 8006086:	4628      	mov	r0, r5
 8006088:	f002 fc2c 	bl	80088e4 <get_tensor_byte_size>
 800608c:	9b02      	ldr	r3, [sp, #8]
 800608e:	4283      	cmp	r3, r0
 8006090:	f0c0 8118 	bcc.w	80062c4 <ai_platform_network_process+0x470>
 8006094:	69ab      	ldr	r3, [r5, #24]
 8006096:	6818      	ldr	r0, [r3, #0]
 8006098:	f002 fc3c 	bl	8008914 <ai_array_to_buffer_fmt>
 800609c:	6833      	ldr	r3, [r6, #0]
 800609e:	4058      	eors	r0, r3
 80060a0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80060a4:	f040 8138 	bne.w	8006318 <ai_platform_network_process+0x4c4>
 80060a8:	6873      	ldr	r3, [r6, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 814f 	beq.w	800634e <ai_platform_network_process+0x4fa>
 80060b0:	69b3      	ldr	r3, [r6, #24]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8141 	beq.w	800633c <ai_platform_network_process+0x4e8>
 80060ba:	9a01      	ldr	r2, [sp, #4]
 80060bc:	429a      	cmp	r2, r3
 80060be:	bf38      	it	cc
 80060c0:	461a      	movcc	r2, r3
 80060c2:	4628      	mov	r0, r5
 80060c4:	9201      	str	r2, [sp, #4]
 80060c6:	f002 fc0d 	bl	80088e4 <get_tensor_byte_size>
 80060ca:	f8ca 0008 	str.w	r0, [sl, #8]
 80060ce:	69b3      	ldr	r3, [r6, #24]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	fb00 f303 	mul.w	r3, r0, r3
 80060d6:	f8ca 300c 	str.w	r3, [sl, #12]
 80060da:	6871      	ldr	r1, [r6, #4]
 80060dc:	f8ca 1004 	str.w	r1, [sl, #4]
 80060e0:	440b      	add	r3, r1
 80060e2:	f848 300b 	str.w	r3, [r8, fp]
 80060e6:	69a8      	ldr	r0, [r5, #24]
 80060e8:	6803      	ldr	r3, [r0, #0]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	f107 0701 	add.w	r7, r7, #1
 80060f0:	f106 061c 	add.w	r6, r6, #28
 80060f4:	d445      	bmi.n	8006182 <ai_platform_network_process+0x32e>
 80060f6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80060fa:	1a9b      	subs	r3, r3, r2
 80060fc:	4419      	add	r1, r3
 80060fe:	6081      	str	r1, [r0, #8]
 8006100:	69ab      	ldr	r3, [r5, #24]
 8006102:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006106:	60da      	str	r2, [r3, #12]
 8006108:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800610c:	429f      	cmp	r7, r3
 800610e:	d384      	bcc.n	800601a <ai_platform_network_process+0x1c6>
 8006110:	e03c      	b.n	800618c <ai_platform_network_process+0x338>
 8006112:	e7fe      	b.n	8006112 <ai_platform_network_process+0x2be>
 8006114:	68ea      	ldr	r2, [r5, #12]
 8006116:	616b      	str	r3, [r5, #20]
 8006118:	f002 0203 	and.w	r2, r2, #3
 800611c:	2a03      	cmp	r2, #3
 800611e:	d11d      	bne.n	800615c <ai_platform_network_process+0x308>
 8006120:	2217      	movs	r2, #23
 8006122:	2112      	movs	r1, #18
 8006124:	f105 0010 	add.w	r0, r5, #16
 8006128:	f000 f922 	bl	8006370 <core_set_error>
 800612c:	2400      	movs	r4, #0
 800612e:	4620      	mov	r0, r4
 8006130:	b005      	add	sp, #20
 8006132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006136:	f8ba 3000 	ldrh.w	r3, [sl]
 800613a:	429f      	cmp	r7, r3
 800613c:	f4ff aee2 	bcc.w	8005f04 <ai_platform_network_process+0xb0>
 8006140:	e757      	b.n	8005ff2 <ai_platform_network_process+0x19e>
 8006142:	bf00      	nop
 8006144:	a1c00100 	.word	0xa1c00100
 8006148:	e0042000 	.word	0xe0042000
 800614c:	58024000 	.word	0x58024000
 8006150:	f407a5c2 	.word	0xf407a5c2
 8006154:	b5e8b5cd 	.word	0xb5e8b5cd
 8006158:	40023000 	.word	0x40023000
 800615c:	2230      	movs	r2, #48	; 0x30
 800615e:	2111      	movs	r1, #17
 8006160:	f105 0010 	add.w	r0, r5, #16
 8006164:	f000 f904 	bl	8006370 <core_set_error>
 8006168:	2400      	movs	r4, #0
 800616a:	e7e0      	b.n	800612e <ai_platform_network_process+0x2da>
 800616c:	462c      	mov	r4, r5
 800616e:	e7de      	b.n	800612e <ai_platform_network_process+0x2da>
 8006170:	9d02      	ldr	r5, [sp, #8]
 8006172:	2218      	movs	r2, #24
 8006174:	2112      	movs	r1, #18
 8006176:	f105 0010 	add.w	r0, r5, #16
 800617a:	f000 f8f9 	bl	8006370 <core_set_error>
 800617e:	2400      	movs	r4, #0
 8006180:	e7d5      	b.n	800612e <ai_platform_network_process+0x2da>
 8006182:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006186:	429f      	cmp	r7, r3
 8006188:	f4ff af47 	bcc.w	800601a <ai_platform_network_process+0x1c6>
 800618c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006190:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8006192:	82a3      	strh	r3, [r4, #20]
 8006194:	4625      	mov	r5, r4
 8006196:	2a00      	cmp	r2, #0
 8006198:	f040 808e 	bne.w	80062b8 <ai_platform_network_process+0x464>
 800619c:	4616      	mov	r6, r2
 800619e:	4617      	mov	r7, r2
 80061a0:	8aec      	ldrh	r4, [r5, #22]
 80061a2:	429c      	cmp	r4, r3
 80061a4:	bf38      	it	cc
 80061a6:	46ab      	movcc	fp, r5
 80061a8:	d2c1      	bcs.n	800612e <ai_platform_network_process+0x2da>
 80061aa:	2e00      	cmp	r6, #0
 80061ac:	d030      	beq.n	8006210 <ai_platform_network_process+0x3bc>
 80061ae:	f04f 0800 	mov.w	r8, #0
 80061b2:	e014      	b.n	80061de <ai_platform_network_process+0x38a>
 80061b4:	6882      	ldr	r2, [r0, #8]
 80061b6:	68c5      	ldr	r5, [r0, #12]
 80061b8:	6863      	ldr	r3, [r4, #4]
 80061ba:	1b52      	subs	r2, r2, r5
 80061bc:	4413      	add	r3, r2
 80061be:	6083      	str	r3, [r0, #8]
 80061c0:	698b      	ldr	r3, [r1, #24]
 80061c2:	6862      	ldr	r2, [r4, #4]
 80061c4:	60da      	str	r2, [r3, #12]
 80061c6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80061ca:	f859 200a 	ldr.w	r2, [r9, sl]
 80061ce:	440b      	add	r3, r1
 80061d0:	4293      	cmp	r3, r2
 80061d2:	bf24      	itt	cs
 80061d4:	68e3      	ldrcs	r3, [r4, #12]
 80061d6:	1ad3      	subcs	r3, r2, r3
 80061d8:	6063      	str	r3, [r4, #4]
 80061da:	f108 0801 	add.w	r8, r8, #1
 80061de:	8833      	ldrh	r3, [r6, #0]
 80061e0:	4543      	cmp	r3, r8
 80061e2:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80061e6:	d913      	bls.n	8006210 <ai_platform_network_process+0x3bc>
 80061e8:	6873      	ldr	r3, [r6, #4]
 80061ea:	b18b      	cbz	r3, 8006210 <ai_platform_network_process+0x3bc>
 80061ec:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80061f0:	b171      	cbz	r1, 8006210 <ai_platform_network_process+0x3bc>
 80061f2:	6988      	ldr	r0, [r1, #24]
 80061f4:	68b2      	ldr	r2, [r6, #8]
 80061f6:	6803      	ldr	r3, [r0, #0]
 80061f8:	f8d2 9000 	ldr.w	r9, [r2]
 80061fc:	009d      	lsls	r5, r3, #2
 80061fe:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8006202:	d5d7      	bpl.n	80061b4 <ai_platform_network_process+0x360>
 8006204:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8006208:	6880      	ldr	r0, [r0, #8]
 800620a:	f004 faca 	bl	800a7a2 <memcpy>
 800620e:	e7da      	b.n	80061c6 <ai_platform_network_process+0x372>
 8006210:	4658      	mov	r0, fp
 8006212:	f002 f9f3 	bl	80085fc <ai_layers_forward_all>
 8006216:	2f00      	cmp	r7, #0
 8006218:	d03f      	beq.n	800629a <ai_platform_network_process+0x446>
 800621a:	2400      	movs	r4, #0
 800621c:	e016      	b.n	800624c <ai_platform_network_process+0x3f8>
 800621e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8006222:	f859 100a 	ldr.w	r1, [r9, sl]
 8006226:	4413      	add	r3, r2
 8006228:	428b      	cmp	r3, r1
 800622a:	bf24      	itt	cs
 800622c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8006230:	1acb      	subcs	r3, r1, r3
 8006232:	f8c8 3004 	str.w	r3, [r8, #4]
 8006236:	6981      	ldr	r1, [r0, #24]
 8006238:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800623c:	1b52      	subs	r2, r2, r5
 800623e:	4413      	add	r3, r2
 8006240:	608b      	str	r3, [r1, #8]
 8006242:	6983      	ldr	r3, [r0, #24]
 8006244:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006248:	60da      	str	r2, [r3, #12]
 800624a:	3401      	adds	r4, #1
 800624c:	883b      	ldrh	r3, [r7, #0]
 800624e:	42a3      	cmp	r3, r4
 8006250:	d923      	bls.n	800629a <ai_platform_network_process+0x446>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	b30b      	cbz	r3, 800629a <ai_platform_network_process+0x446>
 8006256:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800625a:	b1f0      	cbz	r0, 800629a <ai_platform_network_process+0x446>
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	6983      	ldr	r3, [r0, #24]
 8006260:	f8d2 9000 	ldr.w	r9, [r2]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	0092      	lsls	r2, r2, #2
 8006268:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800626c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8006270:	d5d5      	bpl.n	800621e <ai_platform_network_process+0x3ca>
 8006272:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8006276:	6899      	ldr	r1, [r3, #8]
 8006278:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800627c:	f004 fa91 	bl	800a7a2 <memcpy>
 8006280:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8006284:	f859 200a 	ldr.w	r2, [r9, sl]
 8006288:	440b      	add	r3, r1
 800628a:	4293      	cmp	r3, r2
 800628c:	bf24      	itt	cs
 800628e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8006292:	1ad3      	subcs	r3, r2, r3
 8006294:	f8c8 3004 	str.w	r3, [r8, #4]
 8006298:	e7d7      	b.n	800624a <ai_platform_network_process+0x3f6>
 800629a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800629e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80062a2:	3401      	adds	r4, #1
 80062a4:	b2a4      	uxth	r4, r4
 80062a6:	42a3      	cmp	r3, r4
 80062a8:	f8ab 4016 	strh.w	r4, [fp, #22]
 80062ac:	f63f af7d 	bhi.w	80061aa <ai_platform_network_process+0x356>
 80062b0:	4620      	mov	r0, r4
 80062b2:	b005      	add	sp, #20
 80062b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b8:	2a01      	cmp	r2, #1
 80062ba:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80062bc:	d03c      	beq.n	8006338 <ai_platform_network_process+0x4e4>
 80062be:	f106 070c 	add.w	r7, r6, #12
 80062c2:	e76d      	b.n	80061a0 <ai_platform_network_process+0x34c>
 80062c4:	4625      	mov	r5, r4
 80062c6:	2218      	movs	r2, #24
 80062c8:	2113      	movs	r1, #19
 80062ca:	f105 0010 	add.w	r0, r5, #16
 80062ce:	f000 f84f 	bl	8006370 <core_set_error>
 80062d2:	2400      	movs	r4, #0
 80062d4:	e72b      	b.n	800612e <ai_platform_network_process+0x2da>
 80062d6:	9d02      	ldr	r5, [sp, #8]
 80062d8:	4604      	mov	r4, r0
 80062da:	2221      	movs	r2, #33	; 0x21
 80062dc:	2112      	movs	r1, #18
 80062de:	f105 0010 	add.w	r0, r5, #16
 80062e2:	f000 f845 	bl	8006370 <core_set_error>
 80062e6:	e722      	b.n	800612e <ai_platform_network_process+0x2da>
 80062e8:	9d02      	ldr	r5, [sp, #8]
 80062ea:	e719      	b.n	8006120 <ai_platform_network_process+0x2cc>
 80062ec:	9d02      	ldr	r5, [sp, #8]
 80062ee:	4604      	mov	r4, r0
 80062f0:	2217      	movs	r2, #23
 80062f2:	2112      	movs	r1, #18
 80062f4:	f105 0010 	add.w	r0, r5, #16
 80062f8:	f000 f83a 	bl	8006370 <core_set_error>
 80062fc:	e717      	b.n	800612e <ai_platform_network_process+0x2da>
 80062fe:	9d02      	ldr	r5, [sp, #8]
 8006300:	2219      	movs	r2, #25
 8006302:	2112      	movs	r1, #18
 8006304:	f105 0010 	add.w	r0, r5, #16
 8006308:	f000 f832 	bl	8006370 <core_set_error>
 800630c:	2400      	movs	r4, #0
 800630e:	e70e      	b.n	800612e <ai_platform_network_process+0x2da>
 8006310:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006314:	82ab      	strh	r3, [r5, #20]
 8006316:	e73e      	b.n	8006196 <ai_platform_network_process+0x342>
 8006318:	f104 0010 	add.w	r0, r4, #16
 800631c:	2219      	movs	r2, #25
 800631e:	2113      	movs	r1, #19
 8006320:	f000 f826 	bl	8006370 <core_set_error>
 8006324:	2400      	movs	r4, #0
 8006326:	e702      	b.n	800612e <ai_platform_network_process+0x2da>
 8006328:	f104 0010 	add.w	r0, r4, #16
 800632c:	2217      	movs	r2, #23
 800632e:	2113      	movs	r1, #19
 8006330:	f000 f81e 	bl	8006370 <core_set_error>
 8006334:	4654      	mov	r4, sl
 8006336:	e6fa      	b.n	800612e <ai_platform_network_process+0x2da>
 8006338:	2700      	movs	r7, #0
 800633a:	e731      	b.n	80061a0 <ai_platform_network_process+0x34c>
 800633c:	4625      	mov	r5, r4
 800633e:	2221      	movs	r2, #33	; 0x21
 8006340:	4604      	mov	r4, r0
 8006342:	2113      	movs	r1, #19
 8006344:	f105 0010 	add.w	r0, r5, #16
 8006348:	f000 f812 	bl	8006370 <core_set_error>
 800634c:	e6ef      	b.n	800612e <ai_platform_network_process+0x2da>
 800634e:	4625      	mov	r5, r4
 8006350:	2217      	movs	r2, #23
 8006352:	4604      	mov	r4, r0
 8006354:	2113      	movs	r1, #19
 8006356:	f105 0010 	add.w	r0, r5, #16
 800635a:	f000 f809 	bl	8006370 <core_set_error>
 800635e:	e6e6      	b.n	800612e <ai_platform_network_process+0x2da>

08006360 <core_init>:
 8006360:	2001      	movs	r0, #1
 8006362:	4770      	bx	lr

08006364 <core_get_error>:
 8006364:	4603      	mov	r3, r0
 8006366:	2200      	movs	r2, #0
 8006368:	6800      	ldr	r0, [r0, #0]
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop

08006370 <core_set_error>:
 8006370:	4603      	mov	r3, r0
 8006372:	7800      	ldrb	r0, [r0, #0]
 8006374:	b108      	cbz	r0, 800637a <core_set_error+0xa>
 8006376:	2000      	movs	r0, #0
 8006378:	4770      	bx	lr
 800637a:	7019      	strb	r1, [r3, #0]
 800637c:	6819      	ldr	r1, [r3, #0]
 800637e:	f362 211f 	bfi	r1, r2, #8, #24
 8006382:	2001      	movs	r0, #1
 8006384:	6019      	str	r1, [r3, #0]
 8006386:	4770      	bx	lr

08006388 <func_dummy>:
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop

0800638c <ai_conv2d_stripe_f32.constprop.0>:
 800638c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006390:	ed2d 8b02 	vpush	{d8}
 8006394:	b09d      	sub	sp, #116	; 0x74
 8006396:	af00      	add	r7, sp, #0
 8006398:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 800639c:	f8d7 a0bc 	ldr.w	sl, [r7, #188]	; 0xbc
 80063a0:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80063a4:	66f8      	str	r0, [r7, #108]	; 0x6c
 80063a6:	f1ba 0f01 	cmp.w	sl, #1
 80063aa:	663b      	str	r3, [r7, #96]	; 0x60
 80063ac:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 80063b0:	f8d7 50b4 	ldr.w	r5, [r7, #180]	; 0xb4
 80063b4:	f8d7 c0cc 	ldr.w	ip, [r7, #204]	; 0xcc
 80063b8:	f9b7 e0d4 	ldrsh.w	lr, [r7, #212]	; 0xd4
 80063bc:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 80063c0:	6579      	str	r1, [r7, #84]	; 0x54
 80063c2:	e9d7 3030 	ldrd	r3, r0, [r7, #192]	; 0xc0
 80063c6:	f000 812f 	beq.w	8006628 <ai_conv2d_stripe_f32.constprop.0+0x29c>
 80063ca:	45b2      	cmp	sl, r6
 80063cc:	f000 827a 	beq.w	80068c4 <ai_conv2d_stripe_f32.constprop.0+0x538>
 80063d0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80063d4:	2900      	cmp	r1, #0
 80063d6:	f000 8115 	beq.w	8006604 <ai_conv2d_stripe_f32.constprop.0+0x278>
 80063da:	fb93 f4f2 	sdiv	r4, r3, r2
 80063de:	fb02 3414 	mls	r4, r2, r4, r3
 80063e2:	1b14      	subs	r4, r2, r4
 80063e4:	1ac1      	subs	r1, r0, r3
 80063e6:	fb94 f0f2 	sdiv	r0, r4, r2
 80063ea:	fb02 4010 	mls	r0, r2, r0, r4
 80063ee:	1a09      	subs	r1, r1, r0
 80063f0:	4411      	add	r1, r2
 80063f2:	3901      	subs	r1, #1
 80063f4:	4418      	add	r0, r3
 80063f6:	fb91 f9f2 	sdiv	r9, r1, r2
 80063fa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80063fe:	eddf 6a89 	vldr	s13, [pc, #548]	; 8006624 <ai_conv2d_stripe_f32.constprop.0+0x298>
 8006402:	4460      	add	r0, ip
 8006404:	fb01 f100 	mul.w	r1, r1, r0
 8006408:	6239      	str	r1, [r7, #32]
 800640a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800640e:	4413      	add	r3, r2
 8006410:	3b01      	subs	r3, #1
 8006412:	fb93 f3f2 	sdiv	r3, r3, r2
 8006416:	fb01 f202 	mul.w	r2, r1, r2
 800641a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800641c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006420:	fb02 f303 	mul.w	r3, r2, r3
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28
 8006426:	fb0e f306 	mul.w	r3, lr, r6
 800642a:	fbb6 f2fa 	udiv	r2, r6, sl
 800642e:	1a9b      	subs	r3, r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	64bb      	str	r3, [r7, #72]	; 0x48
 8006434:	00b3      	lsls	r3, r6, #2
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800643c:	eba5 0509 	sub.w	r5, r5, r9
 8006440:	fb02 f303 	mul.w	r3, r2, r3
 8006444:	fb05 f303 	mul.w	r3, r5, r3
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
 800644c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	633b      	str	r3, [r7, #48]	; 0x30
 8006454:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006458:	f1c3 0800 	rsb	r8, r3, #0
 800645c:	ebae 0303 	sub.w	r3, lr, r3
 8006460:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8006464:	65bb      	str	r3, [r7, #88]	; 0x58
 8006466:	2300      	movs	r3, #0
 8006468:	653b      	str	r3, [r7, #80]	; 0x50
 800646a:	46cc      	mov	ip, r9
 800646c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006470:	f8c7 b014 	str.w	fp, [r7, #20]
 8006474:	fbb3 f3fa 	udiv	r3, r3, sl
 8006478:	46d1      	mov	r9, sl
 800647a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800647c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006480:	2b00      	cmp	r3, #0
 8006482:	f2c0 80c5 	blt.w	8006610 <ai_conv2d_stripe_f32.constprop.0+0x284>
 8006486:	2400      	movs	r4, #0
 8006488:	4673      	mov	r3, lr
 800648a:	4671      	mov	r1, lr
 800648c:	4622      	mov	r2, r4
 800648e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006490:	f8d7 50d0 	ldr.w	r5, [r7, #208]	; 0xd0
 8006494:	3b01      	subs	r3, #1
 8006496:	fb93 f3fe 	sdiv	r3, r3, lr
 800649a:	4403      	add	r3, r0
 800649c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800649e:	fb0b 0303 	mla	r3, fp, r3, r0
 80064a2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80064a6:	4440      	add	r0, r8
 80064a8:	42a8      	cmp	r0, r5
 80064aa:	bf94      	ite	ls
 80064ac:	ebc2 0200 	rsbls	r2, r2, r0
 80064b0:	ebc2 0205 	rsbhi	r2, r2, r5
 80064b4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80064b8:	6a3d      	ldr	r5, [r7, #32]
 80064ba:	4428      	add	r0, r5
 80064bc:	4420      	add	r0, r4
 80064be:	fb91 f4fe 	sdiv	r4, r1, lr
 80064c2:	fb0e 1114 	mls	r1, lr, r4, r1
 80064c6:	1a52      	subs	r2, r2, r1
 80064c8:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80064ca:	4401      	add	r1, r0
 80064cc:	69f8      	ldr	r0, [r7, #28]
 80064ce:	fb00 4101 	mla	r1, r0, r1, r4
 80064d2:	65f9      	str	r1, [r7, #92]	; 0x5c
 80064d4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80064d6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80064d8:	4472      	add	r2, lr
 80064da:	3a01      	subs	r2, #1
 80064dc:	fb92 f6fe 	sdiv	r6, r2, lr
 80064e0:	460a      	mov	r2, r1
 80064e2:	2900      	cmp	r1, #0
 80064e4:	bf08      	it	eq
 80064e6:	4622      	moveq	r2, r4
 80064e8:	42a2      	cmp	r2, r4
 80064ea:	637a      	str	r2, [r7, #52]	; 0x34
 80064ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ee:	fb0e 2116 	mls	r1, lr, r6, r2
 80064f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064fa:	bf08      	it	eq
 80064fc:	eeb0 7a66 	vmoveq.f32	s14, s13
 8006500:	1b92      	subs	r2, r2, r6
 8006502:	f1b9 0f00 	cmp.w	r9, #0
 8006506:	d066      	beq.n	80065d6 <ai_conv2d_stripe_f32.constprop.0+0x24a>
 8006508:	fb0b f202 	mul.w	r2, fp, r2
 800650c:	643a      	str	r2, [r7, #64]	; 0x40
 800650e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006512:	fb00 f101 	mul.w	r1, r0, r1
 8006516:	4591      	cmp	r9, r2
 8006518:	6479      	str	r1, [r7, #68]	; 0x44
 800651a:	d85c      	bhi.n	80065d6 <ai_conv2d_stripe_f32.constprop.0+0x24a>
 800651c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800651e:	e9c7 e803 	strd	lr, r8, [r7, #12]
 8006522:	2500      	movs	r5, #0
 8006524:	3a01      	subs	r2, #1
 8006526:	46aa      	mov	sl, r5
 8006528:	61ba      	str	r2, [r7, #24]
 800652a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800652c:	f8c7 a008 	str.w	sl, [r7, #8]
 8006530:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8006534:	63ba      	str	r2, [r7, #56]	; 0x38
 8006536:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006538:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800653c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800653e:	f04f 0800 	mov.w	r8, #0
 8006542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006544:	ecf2 7a01 	vldmia	r2!, {s15}
 8006548:	f1bc 0f00 	cmp.w	ip, #0
 800654c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006550:	63ba      	str	r2, [r7, #56]	; 0x38
 8006552:	dd22      	ble.n	800659a <ai_conv2d_stripe_f32.constprop.0+0x20e>
 8006554:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006556:	2100      	movs	r1, #0
 8006558:	2e00      	cmp	r6, #0
 800655a:	bfc8      	it	gt
 800655c:	2000      	movgt	r0, #0
 800655e:	dd15      	ble.n	800658c <ai_conv2d_stripe_f32.constprop.0+0x200>
 8006560:	eb02 040b 	add.w	r4, r2, fp
 8006564:	4294      	cmp	r4, r2
 8006566:	d90c      	bls.n	8006582 <ai_conv2d_stripe_f32.constprop.0+0x1f6>
 8006568:	4696      	mov	lr, r2
 800656a:	469a      	mov	sl, r3
 800656c:	ecbe 6a01 	vldmia	lr!, {s12}
 8006570:	ecfa 5a01 	vldmia	sl!, {s11}
 8006574:	4574      	cmp	r4, lr
 8006576:	eee5 7a86 	vfma.f32	s15, s11, s12
 800657a:	d8f7      	bhi.n	800656c <ai_conv2d_stripe_f32.constprop.0+0x1e0>
 800657c:	697c      	ldr	r4, [r7, #20]
 800657e:	4423      	add	r3, r4
 8006580:	4422      	add	r2, r4
 8006582:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8006584:	3001      	adds	r0, #1
 8006586:	4286      	cmp	r6, r0
 8006588:	4422      	add	r2, r4
 800658a:	d1e9      	bne.n	8006560 <ai_conv2d_stripe_f32.constprop.0+0x1d4>
 800658c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800658e:	3101      	adds	r1, #1
 8006590:	4402      	add	r2, r0
 8006592:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006594:	458c      	cmp	ip, r1
 8006596:	4403      	add	r3, r0
 8006598:	d1de      	bne.n	8006558 <ai_conv2d_stripe_f32.constprop.0+0x1cc>
 800659a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800659c:	ece2 7a01 	vstmia	r2!, {s15}
 80065a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a4:	4413      	add	r3, r2
 80065a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065a8:	f108 0801 	add.w	r8, r8, #1
 80065ac:	4542      	cmp	r2, r8
 80065ae:	d8c8      	bhi.n	8006542 <ai_conv2d_stripe_f32.constprop.0+0x1b6>
 80065b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065b2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80065b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065ba:	445a      	add	r2, fp
 80065bc:	65fa      	str	r2, [r7, #92]	; 0x5c
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	f10a 0a01 	add.w	sl, sl, #1
 80065c4:	4589      	cmp	r9, r1
 80065c6:	bf88      	it	hi
 80065c8:	2200      	movhi	r2, #0
 80065ca:	3201      	adds	r2, #1
 80065cc:	45d1      	cmp	r9, sl
 80065ce:	4415      	add	r5, r2
 80065d0:	d1ab      	bne.n	800652a <ai_conv2d_stripe_f32.constprop.0+0x19e>
 80065d2:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 80065d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065dc:	440a      	add	r2, r1
 80065de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065e0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80065e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065e6:	4411      	add	r1, r2
 80065e8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80065ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065ee:	eba8 0802 	sub.w	r8, r8, r2
 80065f2:	1a8a      	subs	r2, r1, r2
 80065f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80065f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065fa:	3301      	adds	r3, #1
 80065fc:	429a      	cmp	r2, r3
 80065fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006600:	f47f af3c 	bne.w	800647c <ai_conv2d_stripe_f32.constprop.0+0xf0>
 8006604:	3774      	adds	r7, #116	; 0x74
 8006606:	46bd      	mov	sp, r7
 8006608:	ecbd 8b02 	vpop	{d8}
 800660c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006610:	fb98 f1fe 	sdiv	r1, r8, lr
 8006614:	fb0e 8111 	mls	r1, lr, r1, r8
 8006618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800661a:	ebae 0101 	sub.w	r1, lr, r1
 800661e:	4642      	mov	r2, r8
 8006620:	4644      	mov	r4, r8
 8006622:	e734      	b.n	800648e <ai_conv2d_stripe_f32.constprop.0+0x102>
 8006624:	00000000 	.word	0x00000000
 8006628:	fb0e f102 	mul.w	r1, lr, r2
 800662c:	2901      	cmp	r1, #1
 800662e:	f47f aecf 	bne.w	80063d0 <ai_conv2d_stripe_f32.constprop.0+0x44>
 8006632:	1ac1      	subs	r1, r0, r3
 8006634:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006638:	65f9      	str	r1, [r7, #92]	; 0x5c
 800663a:	00b1      	lsls	r1, r6, #2
 800663c:	63b9      	str	r1, [r7, #56]	; 0x38
 800663e:	fb01 f100 	mul.w	r1, r1, r0
 8006642:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006644:	eb0c 0203 	add.w	r2, ip, r3
 8006648:	fb01 0102 	mla	r1, r1, r2, r0
 800664c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800664e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006650:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 8006654:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8006658:	f080 8269 	bcs.w	8006b2e <ai_conv2d_stripe_f32.constprop.0+0x7a2>
 800665c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006660:	2a00      	cmp	r2, #0
 8006662:	d0cf      	beq.n	8006604 <ai_conv2d_stripe_f32.constprop.0+0x278>
 8006664:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006668:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800666c:	ed1f 6a13 	vldr	s12, [pc, #-76]	; 8006624 <ai_conv2d_stripe_f32.constprop.0+0x298>
 8006670:	fb05 f202 	mul.w	r2, r5, r2
 8006674:	fb00 f303 	mul.w	r3, r0, r3
 8006678:	fb06 f202 	mul.w	r2, r6, r2
 800667c:	64bb      	str	r3, [r7, #72]	; 0x48
 800667e:	0093      	lsls	r3, r2, #2
 8006680:	643b      	str	r3, [r7, #64]	; 0x40
 8006682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006684:	fb03 f306 	mul.w	r3, r3, r6
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
 800668c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006690:	fb03 f306 	mul.w	r3, r3, r6
 8006694:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
 800669a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a6:	2300      	movs	r3, #0
 80066a8:	653b      	str	r3, [r7, #80]	; 0x50
 80066aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8106 	beq.w	80068be <ai_conv2d_stripe_f32.constprop.0+0x532>
 80066b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b4:	ecf3 6a01 	vldmia	r3!, {s13}
 80066b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 80ea 	beq.w	8006898 <ai_conv2d_stripe_f32.constprop.0+0x50c>
 80066c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066c8:	f8d7 90c8 	ldr.w	r9, [r7, #200]	; 0xc8
 80066cc:	425d      	negs	r5, r3
 80066ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d0:	657b      	str	r3, [r7, #84]	; 0x54
 80066d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d4:	647b      	str	r3, [r7, #68]	; 0x44
 80066d6:	f04f 0b00 	mov.w	fp, #0
 80066da:	f1b9 0f00 	cmp.w	r9, #0
 80066de:	f2c0 8221 	blt.w	8006b24 <ai_conv2d_stripe_f32.constprop.0+0x798>
 80066e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066e6:	2300      	movs	r3, #0
 80066e8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80066ea:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 80066ec:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80066f0:	fb02 0c06 	mla	ip, r2, r6, r0
 80066f4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80066f8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80066fc:	4428      	add	r0, r5
 80066fe:	42a0      	cmp	r0, r4
 8006700:	bf94      	ite	ls
 8006702:	ebc3 0300 	rsbls	r3, r3, r0
 8006706:	ebc3 0304 	rsbhi	r3, r3, r4
 800670a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800670e:	1ac4      	subs	r4, r0, r3
 8006710:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8006714:	1ac0      	subs	r0, r0, r3
 8006716:	fb02 f303 	mul.w	r3, r2, r3
 800671a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800671c:	2a00      	cmp	r2, #0
 800671e:	eeb0 7a66 	vmov.f32	s14, s13
 8006722:	f340 80a5 	ble.w	8006870 <ai_conv2d_stripe_f32.constprop.0+0x4e4>
 8006726:	fb06 f204 	mul.w	r2, r6, r4
 800672a:	637a      	str	r2, [r7, #52]	; 0x34
 800672c:	fb06 f200 	mul.w	r2, r6, r0
 8006730:	f023 060f 	bic.w	r6, r3, #15
 8006734:	1e70      	subs	r0, r6, #1
 8006736:	0900      	lsrs	r0, r0, #4
 8006738:	3001      	adds	r0, #1
 800673a:	633a      	str	r2, [r7, #48]	; 0x30
 800673c:	0102      	lsls	r2, r0, #4
 800673e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006740:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8006744:	2400      	movs	r4, #0
 8006746:	4662      	mov	r2, ip
 8006748:	2e00      	cmp	r6, #0
 800674a:	bfd8      	it	le
 800674c:	2000      	movle	r0, #0
 800674e:	dd72      	ble.n	8006836 <ai_conv2d_stripe_f32.constprop.0+0x4aa>
 8006750:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8006754:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8006758:	f04f 0800 	mov.w	r8, #0
 800675c:	ed50 4a0f 	vldr	s9, [r0, #-60]	; 0xffffffc4
 8006760:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8006764:	ed1c 5a10 	vldr	s10, [ip, #-64]	; 0xffffffc0
 8006768:	ed50 5a10 	vldr	s11, [r0, #-64]	; 0xffffffc0
 800676c:	ed5c 3a0d 	vldr	s7, [ip, #-52]	; 0xffffffcc
 8006770:	ed1c 4a0c 	vldr	s8, [ip, #-48]	; 0xffffffd0
 8006774:	ed1c 2a0a 	vldr	s4, [ip, #-40]	; 0xffffffd8
 8006778:	ed50 2a0a 	vldr	s5, [r0, #-40]	; 0xffffffd8
 800677c:	ed1c 3a09 	vldr	s6, [ip, #-36]	; 0xffffffdc
 8006780:	ed1c 0a06 	vldr	s0, [ip, #-24]	; 0xffffffe8
 8006784:	ed50 0a06 	vldr	s1, [r0, #-24]	; 0xffffffe8
 8006788:	ed1c 1a05 	vldr	s2, [ip, #-20]	; 0xffffffec
 800678c:	ed50 1a05 	vldr	s3, [r0, #-20]	; 0xffffffec
 8006790:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8006794:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 8006798:	eee5 7a25 	vfma.f32	s15, s10, s11
 800679c:	f108 0810 	add.w	r8, r8, #16
 80067a0:	45b0      	cmp	r8, r6
 80067a2:	ed10 5a0e 	vldr	s10, [r0, #-56]	; 0xffffffc8
 80067a6:	ed50 5a0d 	vldr	s11, [r0, #-52]	; 0xffffffcc
 80067aa:	eee4 7a85 	vfma.f32	s15, s9, s10
 80067ae:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80067b2:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80067b6:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 80067ba:	ed1c 5a1b 	vldr	s10, [ip, #-108]	; 0xffffff94
 80067be:	eee3 7aa5 	vfma.f32	s15, s7, s11
 80067c2:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 80067c6:	ed50 3a19 	vldr	s7, [r0, #-100]	; 0xffffff9c
 80067ca:	eee4 7a24 	vfma.f32	s15, s8, s9
 80067ce:	ed1c 4a18 	vldr	s8, [ip, #-96]	; 0xffffffa0
 80067d2:	ed50 4a18 	vldr	s9, [r0, #-96]	; 0xffffffa0
 80067d6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80067da:	ed1c 5a17 	vldr	s10, [ip, #-92]	; 0xffffffa4
 80067de:	ed50 5a17 	vldr	s11, [r0, #-92]	; 0xffffffa4
 80067e2:	eee2 7a22 	vfma.f32	s15, s4, s5
 80067e6:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 80067ea:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 80067ee:	eee3 7a23 	vfma.f32	s15, s6, s7
 80067f2:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 80067f6:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 80067fa:	eee4 7a24 	vfma.f32	s15, s8, s9
 80067fe:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 8006802:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 8006806:	eee5 7a25 	vfma.f32	s15, s10, s11
 800680a:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 800680e:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 8006812:	eee0 7a20 	vfma.f32	s15, s0, s1
 8006816:	eee1 7a21 	vfma.f32	s15, s2, s3
 800681a:	eee2 7a22 	vfma.f32	s15, s4, s5
 800681e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006822:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006826:	eee5 7a25 	vfma.f32	s15, s10, s11
 800682a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800682e:	db95      	blt.n	800675c <ai_conv2d_stripe_f32.constprop.0+0x3d0>
 8006830:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006832:	4471      	add	r1, lr
 8006834:	4472      	add	r2, lr
 8006836:	4283      	cmp	r3, r0
 8006838:	dd11      	ble.n	800685e <ai_conv2d_stripe_f32.constprop.0+0x4d2>
 800683a:	4684      	mov	ip, r0
 800683c:	468a      	mov	sl, r1
 800683e:	4690      	mov	r8, r2
 8006840:	ecf8 5a01 	vldmia	r8!, {s11}
 8006844:	ecfa 7a01 	vldmia	sl!, {s15}
 8006848:	f10c 0c01 	add.w	ip, ip, #1
 800684c:	4563      	cmp	r3, ip
 800684e:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006852:	d1f5      	bne.n	8006840 <ai_conv2d_stripe_f32.constprop.0+0x4b4>
 8006854:	1a18      	subs	r0, r3, r0
 8006856:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800685a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800685e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006860:	4401      	add	r1, r0
 8006862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006864:	4402      	add	r2, r0
 8006866:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006868:	3401      	adds	r4, #1
 800686a:	42a0      	cmp	r0, r4
 800686c:	f47f af6c 	bne.w	8006748 <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 8006870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006874:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006876:	ed83 7a00 	vstr	s14, [r3]
 800687a:	440b      	add	r3, r1
 800687c:	4491      	add	r9, r2
 800687e:	647b      	str	r3, [r7, #68]	; 0x44
 8006880:	1aad      	subs	r5, r5, r2
 8006882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006886:	4413      	add	r3, r2
 8006888:	657b      	str	r3, [r7, #84]	; 0x54
 800688a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800688e:	f10b 0b01 	add.w	fp, fp, #1
 8006892:	455b      	cmp	r3, fp
 8006894:	f47f af21 	bne.w	80066da <ai_conv2d_stripe_f32.constprop.0+0x34e>
 8006898:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800689a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800689c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800689e:	440a      	add	r2, r1
 80068a0:	66ba      	str	r2, [r7, #104]	; 0x68
 80068a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068a4:	3204      	adds	r2, #4
 80068a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068a8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80068ac:	3301      	adds	r3, #1
 80068ae:	429a      	cmp	r2, r3
 80068b0:	653b      	str	r3, [r7, #80]	; 0x50
 80068b2:	f43f aea7 	beq.w	8006604 <ai_conv2d_stripe_f32.constprop.0+0x278>
 80068b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f47f aefa 	bne.w	80066b2 <ai_conv2d_stripe_f32.constprop.0+0x326>
 80068be:	eef0 6a46 	vmov.f32	s13, s12
 80068c2:	e6fa      	b.n	80066ba <ai_conv2d_stripe_f32.constprop.0+0x32e>
 80068c4:	fb0e f102 	mul.w	r1, lr, r2
 80068c8:	2901      	cmp	r1, #1
 80068ca:	f47f ad81 	bne.w	80063d0 <ai_conv2d_stripe_f32.constprop.0+0x44>
 80068ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068d2:	2a00      	cmp	r2, #0
 80068d4:	f43f ae96 	beq.w	8006604 <ai_conv2d_stripe_f32.constprop.0+0x278>
 80068d8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80068dc:	ed5f 3aaf 	vldr	s7, [pc, #-700]	; 8006624 <ai_conv2d_stripe_f32.constprop.0+0x298>
 80068e0:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
 80068e4:	eb0c 0203 	add.w	r2, ip, r3
 80068e8:	fb01 f202 	mul.w	r2, r1, r2
 80068ec:	61fa      	str	r2, [r7, #28]
 80068ee:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80068f2:	1a1a      	subs	r2, r3, r0
 80068f4:	442a      	add	r2, r5
 80068f6:	fb01 f202 	mul.w	r2, r1, r2
 80068fa:	1ac1      	subs	r1, r0, r3
 80068fc:	64f9      	str	r1, [r7, #76]	; 0x4c
 80068fe:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006902:	fb03 f301 	mul.w	r3, r3, r1
 8006906:	64bb      	str	r3, [r7, #72]	; 0x48
 8006908:	0093      	lsls	r3, r2, #2
 800690a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800690c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	63bb      	str	r3, [r7, #56]	; 0x38
 8006914:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006918:	f1c3 0b00 	rsb	fp, r3, #0
 800691c:	00f3      	lsls	r3, r6, #3
 800691e:	623b      	str	r3, [r7, #32]
 8006920:	2300      	movs	r3, #0
 8006922:	653b      	str	r3, [r7, #80]	; 0x50
 8006924:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006928:	fbb3 f3f6 	udiv	r3, r3, r6
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006932:	2b00      	cmp	r3, #0
 8006934:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8006938:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800693c:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 8006940:	f2c0 80ea 	blt.w	8006b18 <ai_conv2d_stripe_f32.constprop.0+0x78c>
 8006944:	2500      	movs	r5, #0
 8006946:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006948:	462b      	mov	r3, r5
 800694a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800694e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8006952:	69fc      	ldr	r4, [r7, #28]
 8006954:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8006956:	445a      	add	r2, fp
 8006958:	4282      	cmp	r2, r0
 800695a:	bf28      	it	cs
 800695c:	4602      	movcs	r2, r0
 800695e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006962:	1ad2      	subs	r2, r2, r3
 8006964:	1904      	adds	r4, r0, r4
 8006966:	2e00      	cmp	r6, #0
 8006968:	f000 822b 	beq.w	8006dc2 <ai_conv2d_stripe_f32.constprop.0+0xa36>
 800696c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800696e:	647e      	str	r6, [r7, #68]	; 0x44
 8006970:	429e      	cmp	r6, r3
 8006972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006974:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800697c:	eba3 0002 	sub.w	r0, r3, r2
 8006980:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006984:	fb03 f000 	mul.w	r0, r3, r0
 8006988:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800698c:	bf14      	ite	ne
 800698e:	eeb0 3a62 	vmovne.f32	s6, s5
 8006992:	eeb0 3a63 	vmoveq.f32	s6, s7
 8006996:	1a9b      	subs	r3, r3, r2
 8006998:	442c      	add	r4, r5
 800699a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800699c:	fb08 5e04 	mla	lr, r8, r4, r5
 80069a0:	eb0e 0408 	add.w	r4, lr, r8
 80069a4:	45a6      	cmp	lr, r4
 80069a6:	62bc      	str	r4, [r7, #40]	; 0x28
 80069a8:	f080 809d 	bcs.w	8006ae6 <ai_conv2d_stripe_f32.constprop.0+0x75a>
 80069ac:	0080      	lsls	r0, r0, #2
 80069ae:	6378      	str	r0, [r7, #52]	; 0x34
 80069b0:	e9d7 0428 	ldrd	r0, r4, [r7, #160]	; 0xa0
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	633b      	str	r3, [r7, #48]	; 0x30
 80069b8:	42a0      	cmp	r0, r4
 80069ba:	f022 0303 	bic.w	r3, r2, #3
 80069be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069c0:	f200 8091 	bhi.w	8006ae6 <ai_conv2d_stripe_f32.constprop.0+0x75a>
 80069c4:	1e58      	subs	r0, r3, #1
 80069c6:	0880      	lsrs	r0, r0, #2
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	fb00 a00a 	mla	r0, r0, sl, sl
 80069ce:	6138      	str	r0, [r7, #16]
 80069d0:	f04f 0900 	mov.w	r9, #0
 80069d4:	0118      	lsls	r0, r3, #4
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	6178      	str	r0, [r7, #20]
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 80069e0:	f8c7 b008 	str.w	fp, [r7, #8]
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80069e8:	4499      	add	r9, r3
 80069ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ec:	181c      	adds	r4, r3, r0
 80069ee:	65bc      	str	r4, [r7, #88]	; 0x58
 80069f0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80069f2:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80069f6:	1820      	adds	r0, r4, r0
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
 80069fa:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80069fe:	6438      	str	r0, [r7, #64]	; 0x40
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a04:	ecb3 7a01 	vldmia	r3!, {s14}
 8006a08:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8006a12:	dd57      	ble.n	8006ac4 <ai_conv2d_stripe_f32.constprop.0+0x738>
 8006a14:	4675      	mov	r5, lr
 8006a16:	f04f 0b00 	mov.w	fp, #0
 8006a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	bfd8      	it	le
 8006a20:	2400      	movle	r4, #0
 8006a22:	dd32      	ble.n	8006a8a <ai_conv2d_stripe_f32.constprop.0+0x6fe>
 8006a24:	6a38      	ldr	r0, [r7, #32]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	182c      	adds	r4, r5, r0
 8006a2a:	f101 0310 	add.w	r3, r1, #16
 8006a2e:	4628      	mov	r0, r5
 8006a30:	2600      	movs	r6, #0
 8006a32:	eb00 0c08 	add.w	ip, r0, r8
 8006a36:	ed13 4a03 	vldr	s8, [r3, #-12]
 8006a3a:	eddc 7a00 	vldr	s15, [ip]
 8006a3e:	ed53 4a04 	vldr	s9, [r3, #-16]
 8006a42:	ed90 5a00 	vldr	s10, [r0]
 8006a46:	edd4 6a00 	vldr	s13, [r4]
 8006a4a:	ed53 5a02 	vldr	s11, [r3, #-8]
 8006a4e:	ed13 6a01 	vldr	s12, [r3, #-4]
 8006a52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a54:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006a58:	eb04 0c08 	add.w	ip, r4, r8
 8006a5c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006a60:	3604      	adds	r6, #4
 8006a62:	4296      	cmp	r6, r2
 8006a64:	f103 0310 	add.w	r3, r3, #16
 8006a68:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8006a6c:	4450      	add	r0, sl
 8006a6e:	4454      	add	r4, sl
 8006a70:	eddc 6a00 	vldr	s13, [ip]
 8006a74:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006a78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a7c:	dbd9      	blt.n	8006a32 <ai_conv2d_stripe_f32.constprop.0+0x6a6>
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	68fc      	ldr	r4, [r7, #12]
 8006a84:	441d      	add	r5, r3
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	4419      	add	r1, r3
 8006a8a:	42a2      	cmp	r2, r4
 8006a8c:	dd11      	ble.n	8006ab2 <ai_conv2d_stripe_f32.constprop.0+0x726>
 8006a8e:	4620      	mov	r0, r4
 8006a90:	462b      	mov	r3, r5
 8006a92:	460e      	mov	r6, r1
 8006a94:	edd3 7a00 	vldr	s15, [r3]
 8006a98:	ecf6 6a01 	vldmia	r6!, {s13}
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	4290      	cmp	r0, r2
 8006aa0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006aa4:	4443      	add	r3, r8
 8006aa6:	d1f5      	bne.n	8006a94 <ai_conv2d_stripe_f32.constprop.0+0x708>
 8006aa8:	1b14      	subs	r4, r2, r4
 8006aaa:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006aae:	fb04 5508 	mla	r5, r4, r8, r5
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	441d      	add	r5, r3
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	4419      	add	r1, r3
 8006aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006abc:	f10b 0b01 	add.w	fp, fp, #1
 8006ac0:	459b      	cmp	fp, r3
 8006ac2:	d1aa      	bne.n	8006a1a <ai_conv2d_stripe_f32.constprop.0+0x68e>
 8006ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006ac8:	eca3 7a01 	vstmia	r3!, {s14}
 8006acc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad0:	4419      	add	r1, r3
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	4283      	cmp	r3, r0
 8006ad6:	d194      	bne.n	8006a02 <ai_conv2d_stripe_f32.constprop.0+0x676>
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	f10e 0e04 	add.w	lr, lr, #4
 8006ade:	459e      	cmp	lr, r3
 8006ae0:	d380      	bcc.n	80069e4 <ai_conv2d_stripe_f32.constprop.0+0x658>
 8006ae2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8006ae6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ae8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aec:	440a      	add	r2, r1
 8006aee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006af0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006af2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006af6:	440a      	add	r2, r1
 8006af8:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8006afc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b00:	3301      	adds	r3, #1
 8006b02:	429a      	cmp	r2, r3
 8006b04:	653b      	str	r3, [r7, #80]	; 0x50
 8006b06:	ebab 0b01 	sub.w	fp, fp, r1
 8006b0a:	f43f ad7b 	beq.w	8006604 <ai_conv2d_stripe_f32.constprop.0+0x278>
 8006b0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f6bf af16 	bge.w	8006944 <ai_conv2d_stripe_f32.constprop.0+0x5b8>
 8006b18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b1a:	465b      	mov	r3, fp
 8006b1c:	eb02 010b 	add.w	r1, r2, fp
 8006b20:	465d      	mov	r5, fp
 8006b22:	e712      	b.n	800694a <ai_conv2d_stripe_f32.constprop.0+0x5be>
 8006b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b28:	462b      	mov	r3, r5
 8006b2a:	442a      	add	r2, r5
 8006b2c:	e5dc      	b.n	80066e8 <ai_conv2d_stripe_f32.constprop.0+0x35c>
 8006b2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b32:	fb02 f505 	mul.w	r5, r2, r5
 8006b36:	fb06 f205 	mul.w	r2, r6, r5
 8006b3a:	0095      	lsls	r5, r2, #2
 8006b3c:	637a      	str	r2, [r7, #52]	; 0x34
 8006b3e:	1dea      	adds	r2, r5, #7
 8006b40:	f022 0207 	bic.w	r2, r2, #7
 8006b44:	4669      	mov	r1, sp
 8006b46:	ebad 0d02 	sub.w	sp, sp, r2
 8006b4a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006b4e:	ee08 1a90 	vmov	s17, r1
 8006b52:	46e9      	mov	r9, sp
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	f000 8130 	beq.w	8006dba <ai_conv2d_stripe_f32.constprop.0+0xa2e>
 8006b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b5e:	ed9f 8aa6 	vldr	s16, [pc, #664]	; 8006df8 <ai_conv2d_stripe_f32.constprop.0+0xa6c>
 8006b62:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
 8006b66:	fb02 f303 	mul.w	r3, r2, r3
 8006b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b70:	fb03 f306 	mul.w	r3, r3, r6
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	623b      	str	r3, [r7, #32]
 8006b78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b7c:	fb03 f306 	mul.w	r3, r3, r6
 8006b80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
 8006b86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b90:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b92:	2300      	movs	r3, #0
 8006b94:	46ca      	mov	sl, r9
 8006b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b98:	46a9      	mov	r9, r5
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9c:	b123      	cbz	r3, 8006ba8 <ai_conv2d_stripe_f32.constprop.0+0x81c>
 8006b9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ba0:	464a      	mov	r2, r9
 8006ba2:	4650      	mov	r0, sl
 8006ba4:	f003 fdfd 	bl	800a7a2 <memcpy>
 8006ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 8120 	beq.w	8006df0 <ai_conv2d_stripe_f32.constprop.0+0xa64>
 8006bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb2:	ecf3 6a01 	vldmia	r3!, {s13}
 8006bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 80ee 	beq.w	8006d9e <ai_conv2d_stripe_f32.constprop.0+0xa12>
 8006bc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bc6:	f8c7 901c 	str.w	r9, [r7, #28]
 8006bca:	425d      	negs	r5, r3
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	653b      	str	r3, [r7, #80]	; 0x50
 8006bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd2:	643b      	str	r3, [r7, #64]	; 0x40
 8006bd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bd8:	657b      	str	r3, [r7, #84]	; 0x54
 8006bda:	2300      	movs	r3, #0
 8006bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f2c0 8100 	blt.w	8006de6 <ai_conv2d_stripe_f32.constprop.0+0xa5a>
 8006be6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006be8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bea:	2300      	movs	r3, #0
 8006bec:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006bf0:	f8d7 60b0 	ldr.w	r6, [r7, #176]	; 0xb0
 8006bf4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8006bf6:	4428      	add	r0, r5
 8006bf8:	42b0      	cmp	r0, r6
 8006bfa:	bf94      	ite	ls
 8006bfc:	ebc3 0300 	rsbls	r3, r3, r0
 8006c00:	ebc3 0306 	rsbhi	r3, r3, r6
 8006c04:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006c08:	eba0 0c03 	sub.w	ip, r0, r3
 8006c0c:	1af0      	subs	r0, r6, r3
 8006c0e:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8006c12:	fb06 f303 	mul.w	r3, r6, r3
 8006c16:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 8006c18:	2e00      	cmp	r6, #0
 8006c1a:	fb02 a204 	mla	r2, r2, r4, sl
 8006c1e:	eeb0 7a66 	vmov.f32	s14, s13
 8006c22:	f340 80a2 	ble.w	8006d6a <ai_conv2d_stripe_f32.constprop.0+0x9de>
 8006c26:	fb04 f000 	mul.w	r0, r4, r0
 8006c2a:	f023 060f 	bic.w	r6, r3, #15
 8006c2e:	6338      	str	r0, [r7, #48]	; 0x30
 8006c30:	1e70      	subs	r0, r6, #1
 8006c32:	0900      	lsrs	r0, r0, #4
 8006c34:	3001      	adds	r0, #1
 8006c36:	ea4f 1880 	mov.w	r8, r0, lsl #6
 8006c3a:	0100      	lsls	r0, r0, #4
 8006c3c:	fb04 fc0c 	mul.w	ip, r4, ip
 8006c40:	62b8      	str	r0, [r7, #40]	; 0x28
 8006c42:	2400      	movs	r4, #0
 8006c44:	2e00      	cmp	r6, #0
 8006c46:	bfd8      	it	le
 8006c48:	2000      	movle	r0, #0
 8006c4a:	dd72      	ble.n	8006d32 <ai_conv2d_stripe_f32.constprop.0+0x9a6>
 8006c4c:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 8006c50:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8006c54:	f04f 0900 	mov.w	r9, #0
 8006c58:	ed10 5a0f 	vldr	s10, [r0, #-60]	; 0xffffffc4
 8006c5c:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 8006c60:	ed5e 5a10 	vldr	s11, [lr, #-64]	; 0xffffffc0
 8006c64:	ed10 6a10 	vldr	s12, [r0, #-64]	; 0xffffffc0
 8006c68:	ed1e 4a0d 	vldr	s8, [lr, #-52]	; 0xffffffcc
 8006c6c:	ed5e 4a0c 	vldr	s9, [lr, #-48]	; 0xffffffd0
 8006c70:	ed5e 2a0a 	vldr	s5, [lr, #-40]	; 0xffffffd8
 8006c74:	ed10 3a0a 	vldr	s6, [r0, #-40]	; 0xffffffd8
 8006c78:	ed5e 3a09 	vldr	s7, [lr, #-36]	; 0xffffffdc
 8006c7c:	ed5e 0a06 	vldr	s1, [lr, #-24]	; 0xffffffe8
 8006c80:	ed10 1a06 	vldr	s2, [r0, #-24]	; 0xffffffe8
 8006c84:	ed5e 1a05 	vldr	s3, [lr, #-20]	; 0xffffffec
 8006c88:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 8006c8c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006c90:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 8006c94:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006c98:	f109 0910 	add.w	r9, r9, #16
 8006c9c:	45b1      	cmp	r9, r6
 8006c9e:	ed50 5a0e 	vldr	s11, [r0, #-56]	; 0xffffffc8
 8006ca2:	ed10 6a0d 	vldr	s12, [r0, #-52]	; 0xffffffcc
 8006ca6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006caa:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 8006cae:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8006cb2:	ed10 5a1c 	vldr	s10, [r0, #-112]	; 0xffffff90
 8006cb6:	ed5e 5a1b 	vldr	s11, [lr, #-108]	; 0xffffff94
 8006cba:	eee4 7a06 	vfma.f32	s15, s8, s12
 8006cbe:	ed10 6a1b 	vldr	s12, [r0, #-108]	; 0xffffff94
 8006cc2:	ed10 4a19 	vldr	s8, [r0, #-100]	; 0xffffff9c
 8006cc6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006cca:	ed5e 4a18 	vldr	s9, [lr, #-96]	; 0xffffffa0
 8006cce:	ed10 5a18 	vldr	s10, [r0, #-96]	; 0xffffffa0
 8006cd2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006cd6:	ed5e 5a17 	vldr	s11, [lr, #-92]	; 0xffffffa4
 8006cda:	ed10 6a17 	vldr	s12, [r0, #-92]	; 0xffffffa4
 8006cde:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006ce2:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 8006ce6:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 8006cea:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006cee:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 8006cf2:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 8006cf6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006cfa:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 8006cfe:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 8006d02:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006d06:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 8006d0a:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 8006d0e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8006d12:	eee1 7a82 	vfma.f32	s15, s3, s4
 8006d16:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006d1a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006d1e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006d22:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006d26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d2a:	db95      	blt.n	8006c58 <ai_conv2d_stripe_f32.constprop.0+0x8cc>
 8006d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d2e:	4441      	add	r1, r8
 8006d30:	4442      	add	r2, r8
 8006d32:	4283      	cmp	r3, r0
 8006d34:	dd11      	ble.n	8006d5a <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 8006d36:	4686      	mov	lr, r0
 8006d38:	468b      	mov	fp, r1
 8006d3a:	4691      	mov	r9, r2
 8006d3c:	ecb9 6a01 	vldmia	r9!, {s12}
 8006d40:	ecfb 7a01 	vldmia	fp!, {s15}
 8006d44:	f10e 0e01 	add.w	lr, lr, #1
 8006d48:	4573      	cmp	r3, lr
 8006d4a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006d4e:	d1f5      	bne.n	8006d3c <ai_conv2d_stripe_f32.constprop.0+0x9b0>
 8006d50:	1a18      	subs	r0, r3, r0
 8006d52:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8006d56:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8006d5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d5c:	4402      	add	r2, r0
 8006d5e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006d60:	3401      	adds	r4, #1
 8006d62:	42a0      	cmp	r0, r4
 8006d64:	4461      	add	r1, ip
 8006d66:	f47f af6d 	bne.w	8006c44 <ai_conv2d_stripe_f32.constprop.0+0x8b8>
 8006d6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d6c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006d6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d72:	ed82 7a00 	vstr	s14, [r2]
 8006d76:	4401      	add	r1, r0
 8006d78:	6579      	str	r1, [r7, #84]	; 0x54
 8006d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d7c:	440a      	add	r2, r1
 8006d7e:	643a      	str	r2, [r7, #64]	; 0x40
 8006d80:	6a39      	ldr	r1, [r7, #32]
 8006d82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d84:	440a      	add	r2, r1
 8006d86:	653a      	str	r2, [r7, #80]	; 0x50
 8006d88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d92:	eba5 0500 	sub.w	r5, r5, r0
 8006d96:	f47f af22 	bne.w	8006bde <ai_conv2d_stripe_f32.constprop.0+0x852>
 8006d9a:	f8d7 901c 	ldr.w	r9, [r7, #28]
 8006d9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da2:	444a      	add	r2, r9
 8006da4:	66ba      	str	r2, [r7, #104]	; 0x68
 8006da6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006da8:	3204      	adds	r2, #4
 8006daa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006dac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006db0:	3301      	adds	r3, #1
 8006db2:	429a      	cmp	r2, r3
 8006db4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006db6:	f47f aef0 	bne.w	8006b9a <ai_conv2d_stripe_f32.constprop.0+0x80e>
 8006dba:	ee18 3a90 	vmov	r3, s17
 8006dbe:	469d      	mov	sp, r3
 8006dc0:	e420      	b.n	8006604 <ai_conv2d_stripe_f32.constprop.0+0x278>
 8006dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dc4:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 8006dc6:	647e      	str	r6, [r7, #68]	; 0x44
 8006dc8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006dcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dd0:	1a98      	subs	r0, r3, r2
 8006dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dd6:	fb03 f000 	mul.w	r0, r3, r0
 8006dda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006dde:	eeb0 3a63 	vmov.f32	s6, s7
 8006de2:	1a9b      	subs	r3, r3, r2
 8006de4:	e5d8      	b.n	8006998 <ai_conv2d_stripe_f32.constprop.0+0x60c>
 8006de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006de8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006dea:	462b      	mov	r3, r5
 8006dec:	442a      	add	r2, r5
 8006dee:	e6fd      	b.n	8006bec <ai_conv2d_stripe_f32.constprop.0+0x860>
 8006df0:	eef0 6a48 	vmov.f32	s13, s16
 8006df4:	e6e0      	b.n	8006bb8 <ai_conv2d_stripe_f32.constprop.0+0x82c>
 8006df6:	bf00      	nop
 8006df8:	00000000 	.word	0x00000000

08006dfc <ai_dict_decompress_f32>:
 8006dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e00:	9d08      	ldr	r5, [sp, #32]
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8006e08:	d00e      	beq.n	8006e28 <ai_dict_decompress_f32+0x2c>
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d10a      	bne.n	8006e24 <ai_dict_decompress_f32+0x28>
 8006e0e:	42a8      	cmp	r0, r5
 8006e10:	d208      	bcs.n	8006e24 <ai_dict_decompress_f32+0x28>
 8006e12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f840 3b04 	str.w	r3, [r0], #4
 8006e20:	4285      	cmp	r5, r0
 8006e22:	d8f6      	bhi.n	8006e12 <ai_dict_decompress_f32+0x16>
 8006e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e28:	9b07      	ldr	r3, [sp, #28]
 8006e2a:	085e      	lsrs	r6, r3, #1
 8006e2c:	f003 0701 	and.w	r7, r3, #1
 8006e30:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8006e34:	f106 38ff 	add.w	r8, r6, #4294967295
 8006e38:	42a8      	cmp	r0, r5
 8006e3a:	d2f3      	bcs.n	8006e24 <ai_dict_decompress_f32+0x28>
 8006e3c:	b33e      	cbz	r6, 8006e8e <ai_dict_decompress_f32+0x92>
 8006e3e:	f100 0e08 	add.w	lr, r0, #8
 8006e42:	f101 3cff 	add.w	ip, r1, #4294967295
 8006e46:	eb01 0408 	add.w	r4, r1, r8
 8006e4a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8006e4e:	091b      	lsrs	r3, r3, #4
 8006e50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e54:	f10e 0e08 	add.w	lr, lr, #8
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f84e 3c10 	str.w	r3, [lr, #-16]
 8006e5e:	f89c 3000 	ldrb.w	r3, [ip]
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e6a:	4564      	cmp	r4, ip
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8006e72:	d1ea      	bne.n	8006e4a <ai_dict_decompress_f32+0x4e>
 8006e74:	4431      	add	r1, r6
 8006e76:	4448      	add	r0, r9
 8006e78:	2f00      	cmp	r7, #0
 8006e7a:	d0dd      	beq.n	8006e38 <ai_dict_decompress_f32+0x3c>
 8006e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e80:	091b      	lsrs	r3, r3, #4
 8006e82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f840 3b04 	str.w	r3, [r0], #4
 8006e8c:	e7d4      	b.n	8006e38 <ai_dict_decompress_f32+0x3c>
 8006e8e:	2f00      	cmp	r7, #0
 8006e90:	d1f4      	bne.n	8006e7c <ai_dict_decompress_f32+0x80>
 8006e92:	42a8      	cmp	r0, r5
 8006e94:	d3fd      	bcc.n	8006e92 <ai_dict_decompress_f32+0x96>
 8006e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e9a:	bf00      	nop

08006e9c <forward_conv2d>:
 8006e9c:	6982      	ldr	r2, [r0, #24]
 8006e9e:	8813      	ldrh	r3, [r2, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8110 	beq.w	80070c6 <forward_conv2d+0x22a>
 8006ea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eaa:	ed2d 8b04 	vpush	{d8-d9}
 8006eae:	6852      	ldr	r2, [r2, #4]
 8006eb0:	6851      	ldr	r1, [r2, #4]
 8006eb2:	b0a9      	sub	sp, #164	; 0xa4
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	b101      	cbz	r1, 8006eba <forward_conv2d+0x1e>
 8006eb8:	6809      	ldr	r1, [r1, #0]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	f000 8151 	beq.w	8007162 <forward_conv2d+0x2c6>
 8006ec0:	6915      	ldr	r5, [r2, #16]
 8006ec2:	b105      	cbz	r5, 8006ec6 <forward_conv2d+0x2a>
 8006ec4:	682d      	ldr	r5, [r5, #0]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	f000 80ff 	beq.w	80070ca <forward_conv2d+0x22e>
 8006ecc:	69d3      	ldr	r3, [r2, #28]
 8006ece:	8b12      	ldrh	r2, [r2, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8137 	beq.w	8007144 <forward_conv2d+0x2a8>
 8006ed6:	2a01      	cmp	r2, #1
 8006ed8:	681e      	ldr	r6, [r3, #0]
 8006eda:	f240 8139 	bls.w	8007150 <forward_conv2d+0x2b4>
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	ee08 2a10 	vmov	s16, r2
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	68ca      	ldr	r2, [r1, #12]
 8006ee8:	6989      	ldr	r1, [r1, #24]
 8006eea:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8006eee:	6889      	ldr	r1, [r1, #8]
 8006ef0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006ef2:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 8006ef6:	69b7      	ldr	r7, [r6, #24]
 8006ef8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8006efc:	f8dc b008 	ldr.w	fp, [ip, #8]
 8006f00:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 8006f04:	ee09 1a10 	vmov	s18, r1
 8006f08:	6851      	ldr	r1, [r2, #4]
 8006f0a:	911b      	str	r1, [sp, #108]	; 0x6c
 8006f0c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8006f10:	9118      	str	r1, [sp, #96]	; 0x60
 8006f12:	68d1      	ldr	r1, [r2, #12]
 8006f14:	6892      	ldr	r2, [r2, #8]
 8006f16:	9223      	str	r2, [sp, #140]	; 0x8c
 8006f18:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006f1a:	9224      	str	r2, [sp, #144]	; 0x90
 8006f1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006f1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f20:	6802      	ldr	r2, [r0, #0]
 8006f22:	9211      	str	r2, [sp, #68]	; 0x44
 8006f24:	6842      	ldr	r2, [r0, #4]
 8006f26:	921e      	str	r2, [sp, #120]	; 0x78
 8006f28:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006f2a:	9210      	str	r2, [sp, #64]	; 0x40
 8006f2c:	f8de 2008 	ldr.w	r2, [lr, #8]
 8006f30:	9219      	str	r2, [sp, #100]	; 0x64
 8006f32:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006f36:	9122      	str	r1, [sp, #136]	; 0x88
 8006f38:	921a      	str	r2, [sp, #104]	; 0x68
 8006f3a:	69e2      	ldr	r2, [r4, #28]
 8006f3c:	9225      	str	r2, [sp, #148]	; 0x94
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	ee08 2a90 	vmov	s17, r2
 8006f44:	ee18 2a10 	vmov	r2, s16
 8006f48:	b11a      	cbz	r2, 8006f52 <forward_conv2d+0xb6>
 8006f4a:	6992      	ldr	r2, [r2, #24]
 8006f4c:	6892      	ldr	r2, [r2, #8]
 8006f4e:	ee08 2a10 	vmov	s16, r2
 8006f52:	69aa      	ldr	r2, [r5, #24]
 8006f54:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8006f58:	6892      	ldr	r2, [r2, #8]
 8006f5a:	9216      	str	r2, [sp, #88]	; 0x58
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 80de 	beq.w	800711e <forward_conv2d+0x282>
 8006f62:	699a      	ldr	r2, [r3, #24]
 8006f64:	2a00      	cmp	r2, #0
 8006f66:	f000 80e3 	beq.w	8007130 <forward_conv2d+0x294>
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	9327      	str	r3, [sp, #156]	; 0x9c
 8006f74:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006f78:	f001 fd38 	bl	80089ec <ai_array_get_byte_size>
 8006f7c:	69b7      	ldr	r7, [r6, #24]
 8006f7e:	9013      	str	r0, [sp, #76]	; 0x4c
 8006f80:	4a7b      	ldr	r2, [pc, #492]	; (8007170 <forward_conv2d+0x2d4>)
 8006f82:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f84:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2900      	cmp	r1, #0
 8006f8a:	bf08      	it	eq
 8006f8c:	4611      	moveq	r1, r2
 8006f8e:	9112      	str	r1, [sp, #72]	; 0x48
 8006f90:	fa1f f18a 	uxth.w	r1, sl
 8006f94:	1e70      	subs	r0, r6, #1
 8006f96:	3901      	subs	r1, #1
 8006f98:	fb00 6101 	mla	r1, r0, r1, r6
 8006f9c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8006fa0:	981a      	ldr	r0, [sp, #104]	; 0x68
 8006fa2:	911c      	str	r1, [sp, #112]	; 0x70
 8006fa4:	3a01      	subs	r2, #1
 8006fa6:	1e41      	subs	r1, r0, #1
 8006fa8:	fb01 0202 	mla	r2, r1, r2, r0
 8006fac:	921d      	str	r2, [sp, #116]	; 0x74
 8006fae:	f3c3 4243 	ubfx	r2, r3, #17, #4
 8006fb2:	2a04      	cmp	r2, #4
 8006fb4:	f000 808c 	beq.w	80070d0 <forward_conv2d+0x234>
 8006fb8:	2a08      	cmp	r2, #8
 8006fba:	f000 8089 	beq.w	80070d0 <forward_conv2d+0x234>
 8006fbe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8006fc2:	9315      	str	r3, [sp, #84]	; 0x54
 8006fc4:	425b      	negs	r3, r3
 8006fc6:	9314      	str	r3, [sp, #80]	; 0x50
 8006fc8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d076      	beq.n	80070bc <forward_conv2d+0x220>
 8006fce:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 8006fd2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8006fd6:	921e      	str	r2, [sp, #120]	; 0x78
 8006fd8:	425b      	negs	r3, r3
 8006fda:	fa0f f28a 	sxth.w	r2, sl
 8006fde:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006fe2:	9321      	str	r3, [sp, #132]	; 0x84
 8006fe4:	fb0b f30a 	mul.w	r3, fp, sl
 8006fe8:	921f      	str	r2, [sp, #124]	; 0x7c
 8006fea:	9326      	str	r3, [sp, #152]	; 0x98
 8006fec:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8006ff0:	9220      	str	r2, [sp, #128]	; 0x80
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	4644      	mov	r4, r8
 8006ff6:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ff8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006ffa:	920e      	str	r2, [sp, #56]	; 0x38
 8006ffc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ffe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007000:	920d      	str	r2, [sp, #52]	; 0x34
 8007002:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007004:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8007006:	2b00      	cmp	r3, #0
 8007008:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800700c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800700e:	930a      	str	r3, [sp, #40]	; 0x28
 8007010:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007012:	9307      	str	r3, [sp, #28]
 8007014:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007016:	9306      	str	r3, [sp, #24]
 8007018:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800701a:	9305      	str	r3, [sp, #20]
 800701c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800701e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007020:	e9cd b303 	strd	fp, r3, [sp, #12]
 8007024:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007026:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800702a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007030:	4413      	add	r3, r2
 8007032:	bfa8      	it	ge
 8007034:	2200      	movge	r2, #0
 8007036:	9208      	str	r2, [sp, #32]
 8007038:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800703a:	4293      	cmp	r3, r2
 800703c:	bf28      	it	cs
 800703e:	4613      	movcs	r3, r2
 8007040:	9309      	str	r3, [sp, #36]	; 0x24
 8007042:	ee18 2a90 	vmov	r2, s17
 8007046:	ee18 3a10 	vmov	r3, s16
 800704a:	ee19 1a10 	vmov	r1, s18
 800704e:	4638      	mov	r0, r7
 8007050:	f7ff f99c 	bl	800638c <ai_conv2d_stripe_f32.constprop.0>
 8007054:	f1bb 0f00 	cmp.w	fp, #0
 8007058:	d020      	beq.n	800709c <forward_conv2d+0x200>
 800705a:	2600      	movs	r6, #0
 800705c:	464a      	mov	r2, r9
 800705e:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8007062:	9610      	str	r6, [sp, #64]	; 0x40
 8007064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007066:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007068:	9211      	str	r2, [sp, #68]	; 0x44
 800706a:	3301      	adds	r3, #1
 800706c:	9310      	str	r3, [sp, #64]	; 0x40
 800706e:	69ab      	ldr	r3, [r5, #24]
 8007070:	4629      	mov	r1, r5
 8007072:	609f      	str	r7, [r3, #8]
 8007074:	4628      	mov	r0, r5
 8007076:	4623      	mov	r3, r4
 8007078:	47b0      	blx	r6
 800707a:	444c      	add	r4, r9
 800707c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800707e:	eba4 0308 	sub.w	r3, r4, r8
 8007082:	4293      	cmp	r3, r2
 8007084:	bfa8      	it	ge
 8007086:	4644      	movge	r4, r8
 8007088:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800708a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800708c:	459b      	cmp	fp, r3
 800708e:	4457      	add	r7, sl
 8007090:	d1e8      	bne.n	8007064 <forward_conv2d+0x1c8>
 8007092:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007094:	4691      	mov	r9, r2
 8007096:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007098:	4413      	add	r3, r2
 800709a:	9316      	str	r3, [sp, #88]	; 0x58
 800709c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800709e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070a0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80070a2:	4413      	add	r3, r2
 80070a4:	9314      	str	r3, [sp, #80]	; 0x50
 80070a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070a8:	1a9b      	subs	r3, r3, r2
 80070aa:	9315      	str	r3, [sp, #84]	; 0x54
 80070ac:	69ab      	ldr	r3, [r5, #24]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	609a      	str	r2, [r3, #8]
 80070b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80070b4:	3101      	adds	r1, #1
 80070b6:	428b      	cmp	r3, r1
 80070b8:	9117      	str	r1, [sp, #92]	; 0x5c
 80070ba:	d19d      	bne.n	8006ff8 <forward_conv2d+0x15c>
 80070bc:	b029      	add	sp, #164	; 0xa4
 80070be:	ecbd 8b04 	vpop	{d8-d9}
 80070c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	deff      	udf	#255	; 0xff
 80070ca:	2300      	movs	r3, #0
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	deff      	udf	#255	; 0xff
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	2a00      	cmp	r2, #0
 80070d4:	f43f af73 	beq.w	8006fbe <forward_conv2d+0x122>
 80070d8:	69a1      	ldr	r1, [r4, #24]
 80070da:	8808      	ldrh	r0, [r1, #0]
 80070dc:	2803      	cmp	r0, #3
 80070de:	d943      	bls.n	8007168 <forward_conv2d+0x2cc>
 80070e0:	6849      	ldr	r1, [r1, #4]
 80070e2:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80070e4:	2900      	cmp	r1, #0
 80070e6:	d037      	beq.n	8007158 <forward_conv2d+0x2bc>
 80070e8:	6809      	ldr	r1, [r1, #0]
 80070ea:	2900      	cmp	r1, #0
 80070ec:	d034      	beq.n	8007158 <forward_conv2d+0x2bc>
 80070ee:	698c      	ldr	r4, [r1, #24]
 80070f0:	68b9      	ldr	r1, [r7, #8]
 80070f2:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80070f6:	9401      	str	r4, [sp, #4]
 80070f8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80070fa:	9400      	str	r4, [sp, #0]
 80070fc:	ee18 4a90 	vmov	r4, s17
 8007100:	2800      	cmp	r0, #0
 8007102:	bf18      	it	ne
 8007104:	4604      	movne	r4, r0
 8007106:	ee08 4a90 	vmov	s17, r4
 800710a:	f3c3 14c6 	ubfx	r4, r3, #7, #7
 800710e:	f3c3 5341 	ubfx	r3, r3, #21, #2
 8007112:	fa44 f303 	asr.w	r3, r4, r3
 8007116:	b29b      	uxth	r3, r3
 8007118:	f7ff fe70 	bl	8006dfc <ai_dict_decompress_f32>
 800711c:	e74f      	b.n	8006fbe <forward_conv2d+0x122>
 800711e:	f1b8 0f00 	cmp.w	r8, #0
 8007122:	d00b      	beq.n	800713c <forward_conv2d+0x2a0>
 8007124:	9327      	str	r3, [sp, #156]	; 0x9c
 8007126:	2301      	movs	r3, #1
 8007128:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800712c:	9313      	str	r3, [sp, #76]	; 0x4c
 800712e:	e727      	b.n	8006f80 <forward_conv2d+0xe4>
 8007130:	f1b8 0f00 	cmp.w	r8, #0
 8007134:	d001      	beq.n	800713a <forward_conv2d+0x29e>
 8007136:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800713a:	2300      	movs	r3, #0
 800713c:	9327      	str	r3, [sp, #156]	; 0x9c
 800713e:	2301      	movs	r3, #1
 8007140:	9313      	str	r3, [sp, #76]	; 0x4c
 8007142:	e71d      	b.n	8006f80 <forward_conv2d+0xe4>
 8007144:	2a01      	cmp	r2, #1
 8007146:	d90a      	bls.n	800715e <forward_conv2d+0x2c2>
 8007148:	ee08 3a10 	vmov	s16, r3
 800714c:	461e      	mov	r6, r3
 800714e:	e6ca      	b.n	8006ee6 <forward_conv2d+0x4a>
 8007150:	2200      	movs	r2, #0
 8007152:	ee08 2a10 	vmov	s16, r2
 8007156:	e6c5      	b.n	8006ee4 <forward_conv2d+0x48>
 8007158:	2300      	movs	r3, #0
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	deff      	udf	#255	; 0xff
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	deff      	udf	#255	; 0xff
 8007162:	2300      	movs	r3, #0
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	deff      	udf	#255	; 0xff
 8007168:	2300      	movs	r3, #0
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	deff      	udf	#255	; 0xff
 800716e:	bf00      	nop
 8007170:	08006389 	.word	0x08006389

08007174 <forward_conv2d_nl_pool>:
 8007174:	6981      	ldr	r1, [r0, #24]
 8007176:	880b      	ldrh	r3, [r1, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 814d 	beq.w	8007418 <forward_conv2d_nl_pool+0x2a4>
 800717e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007182:	ed2d 8b04 	vpush	{d8-d9}
 8007186:	684e      	ldr	r6, [r1, #4]
 8007188:	6872      	ldr	r2, [r6, #4]
 800718a:	b0b9      	sub	sp, #228	; 0xe4
 800718c:	4604      	mov	r4, r0
 800718e:	b102      	cbz	r2, 8007192 <forward_conv2d_nl_pool+0x1e>
 8007190:	6812      	ldr	r2, [r2, #0]
 8007192:	2b01      	cmp	r3, #1
 8007194:	f000 8253 	beq.w	800763e <forward_conv2d_nl_pool+0x4ca>
 8007198:	6930      	ldr	r0, [r6, #16]
 800719a:	9011      	str	r0, [sp, #68]	; 0x44
 800719c:	b108      	cbz	r0, 80071a2 <forward_conv2d_nl_pool+0x2e>
 800719e:	6800      	ldr	r0, [r0, #0]
 80071a0:	9011      	str	r0, [sp, #68]	; 0x44
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	f000 813a 	beq.w	800741c <forward_conv2d_nl_pool+0x2a8>
 80071a8:	69f0      	ldr	r0, [r6, #28]
 80071aa:	2800      	cmp	r0, #0
 80071ac:	f000 8237 	beq.w	800761e <forward_conv2d_nl_pool+0x4aa>
 80071b0:	8b37      	ldrh	r7, [r6, #24]
 80071b2:	6806      	ldr	r6, [r0, #0]
 80071b4:	2f01      	cmp	r7, #1
 80071b6:	f240 8239 	bls.w	800762c <forward_conv2d_nl_pool+0x4b8>
 80071ba:	6845      	ldr	r5, [r0, #4]
 80071bc:	ee08 5a10 	vmov	s16, r5
 80071c0:	6880      	ldr	r0, [r0, #8]
 80071c2:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80071c6:	6992      	ldr	r2, [r2, #24]
 80071c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80071cc:	6892      	ldr	r2, [r2, #8]
 80071ce:	952a      	str	r5, [sp, #168]	; 0xa8
 80071d0:	ee09 2a10 	vmov	s18, r2
 80071d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80071d6:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 80071d8:	f8d2 900c 	ldr.w	r9, [r2, #12]
 80071dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80071de:	f8d9 500c 	ldr.w	r5, [r9, #12]
 80071e2:	951d      	str	r5, [sp, #116]	; 0x74
 80071e4:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80071e8:	951f      	str	r5, [sp, #124]	; 0x7c
 80071ea:	f8d8 500c 	ldr.w	r5, [r8, #12]
 80071ee:	9527      	str	r5, [sp, #156]	; 0x9c
 80071f0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80071f4:	952d      	str	r5, [sp, #180]	; 0xb4
 80071f6:	8d25      	ldrh	r5, [r4, #40]	; 0x28
 80071f8:	952e      	str	r5, [sp, #184]	; 0xb8
 80071fa:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80071fc:	9513      	str	r5, [sp, #76]	; 0x4c
 80071fe:	683d      	ldr	r5, [r7, #0]
 8007200:	9515      	str	r5, [sp, #84]	; 0x54
 8007202:	69e5      	ldr	r5, [r4, #28]
 8007204:	952f      	str	r5, [sp, #188]	; 0xbc
 8007206:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007208:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800720c:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8007210:	f8d9 b004 	ldr.w	fp, [r9, #4]
 8007214:	9526      	str	r5, [sp, #152]	; 0x98
 8007216:	e9d7 a701 	ldrd	sl, r7, [r7, #4]
 800721a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800721c:	9512      	str	r5, [sp, #72]	; 0x48
 800721e:	e9d2 8200 	ldrd	r8, r2, [r2]
 8007222:	f8de 5004 	ldr.w	r5, [lr, #4]
 8007226:	9528      	str	r5, [sp, #160]	; 0xa0
 8007228:	9224      	str	r2, [sp, #144]	; 0x90
 800722a:	f8de 5008 	ldr.w	r5, [lr, #8]
 800722e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8007232:	9529      	str	r5, [sp, #164]	; 0xa4
 8007234:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8007236:	9522      	str	r5, [sp, #136]	; 0x88
 8007238:	ee08 2a90 	vmov	s17, r2
 800723c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800723e:	9523      	str	r5, [sp, #140]	; 0x8c
 8007240:	ee18 2a10 	vmov	r2, s16
 8007244:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007246:	951a      	str	r5, [sp, #104]	; 0x68
 8007248:	b11a      	cbz	r2, 8007252 <forward_conv2d_nl_pool+0xde>
 800724a:	6992      	ldr	r2, [r2, #24]
 800724c:	6892      	ldr	r2, [r2, #8]
 800724e:	ee08 2a10 	vmov	s16, r2
 8007252:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8007256:	2800      	cmp	r0, #0
 8007258:	f000 81ce 	beq.w	80075f8 <forward_conv2d_nl_pool+0x484>
 800725c:	6982      	ldr	r2, [r0, #24]
 800725e:	2a00      	cmp	r2, #0
 8007260:	f000 81d3 	beq.w	800760a <forward_conv2d_nl_pool+0x496>
 8007264:	6943      	ldr	r3, [r0, #20]
 8007266:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	9333      	str	r3, [sp, #204]	; 0xcc
 800726e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8007272:	f001 fbbb 	bl	80089ec <ai_array_get_byte_size>
 8007276:	69a1      	ldr	r1, [r4, #24]
 8007278:	f8d6 c018 	ldr.w	ip, [r6, #24]
 800727c:	880b      	ldrh	r3, [r1, #0]
 800727e:	9014      	str	r0, [sp, #80]	; 0x50
 8007280:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8007284:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8007286:	9215      	str	r2, [sp, #84]	; 0x54
 8007288:	fa12 f287 	uxtah	r2, r2, r7
 800728c:	eb02 0e00 	add.w	lr, r2, r0
 8007290:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8007294:	4fa2      	ldr	r7, [pc, #648]	; (8007520 <forward_conv2d_nl_pool+0x3ac>)
 8007296:	921b      	str	r2, [sp, #108]	; 0x6c
 8007298:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800729c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800729e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80072a0:	3e01      	subs	r6, #1
 80072a2:	2d00      	cmp	r5, #0
 80072a4:	bf08      	it	eq
 80072a6:	463d      	moveq	r5, r7
 80072a8:	1e57      	subs	r7, r2, #1
 80072aa:	fb07 2606 	mla	r6, r7, r6, r2
 80072ae:	ebae 0206 	sub.w	r2, lr, r6
 80072b2:	9532      	str	r5, [sp, #200]	; 0xc8
 80072b4:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80072b6:	fbb2 f2f5 	udiv	r2, r2, r5
 80072ba:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80072bc:	9213      	str	r2, [sp, #76]	; 0x4c
 80072be:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 80072c2:	962b      	str	r6, [sp, #172]	; 0xac
 80072c4:	fa1f f08a 	uxth.w	r0, sl
 80072c8:	1e6e      	subs	r6, r5, #1
 80072ca:	9017      	str	r0, [sp, #92]	; 0x5c
 80072cc:	3a01      	subs	r2, #1
 80072ce:	f8dc 0000 	ldr.w	r0, [ip]
 80072d2:	fb06 5202 	mla	r2, r6, r2, r5
 80072d6:	922c      	str	r2, [sp, #176]	; 0xb0
 80072d8:	6da5      	ldr	r5, [r4, #88]	; 0x58
 80072da:	9520      	str	r5, [sp, #128]	; 0x80
 80072dc:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80072e0:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80072e2:	9519      	str	r5, [sp, #100]	; 0x64
 80072e4:	2a04      	cmp	r2, #4
 80072e6:	f000 814c 	beq.w	8007582 <forward_conv2d_nl_pool+0x40e>
 80072ea:	2a08      	cmp	r2, #8
 80072ec:	f000 8149 	beq.w	8007582 <forward_conv2d_nl_pool+0x40e>
 80072f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	6992      	ldr	r2, [r2, #24]
 80072f6:	921c      	str	r2, [sp, #112]	; 0x70
 80072f8:	fa0f f888 	sxth.w	r8, r8
 80072fc:	f240 81a4 	bls.w	8007648 <forward_conv2d_nl_pool+0x4d4>
 8007300:	684b      	ldr	r3, [r1, #4]
 8007302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 81a2 	beq.w	800764e <forward_conv2d_nl_pool+0x4da>
 800730a:	681e      	ldr	r6, [r3, #0]
 800730c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800730e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007310:	425b      	negs	r3, r3
 8007312:	9316      	str	r3, [sp, #88]	; 0x58
 8007314:	68f3      	ldr	r3, [r6, #12]
 8007316:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800731a:	69b3      	ldr	r3, [r6, #24]
 800731c:	689c      	ldr	r4, [r3, #8]
 800731e:	2a00      	cmp	r2, #0
 8007320:	d070      	beq.n	8007404 <forward_conv2d_nl_pool+0x290>
 8007322:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007324:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8007328:	425b      	negs	r3, r3
 800732a:	9330      	str	r3, [sp, #192]	; 0xc0
 800732c:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8007330:	9331      	str	r3, [sp, #196]	; 0xc4
 8007332:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007334:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8007338:	fb03 f30b 	mul.w	r3, r3, fp
 800733c:	fb0a f303 	mul.w	r3, sl, r3
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	9335      	str	r3, [sp, #212]	; 0xd4
 8007344:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007346:	fb03 f30b 	mul.w	r3, r3, fp
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	fb0a f20b 	mul.w	r2, sl, fp
 8007350:	9325      	str	r3, [sp, #148]	; 0x94
 8007352:	2300      	movs	r3, #0
 8007354:	9317      	str	r3, [sp, #92]	; 0x5c
 8007356:	9236      	str	r2, [sp, #216]	; 0xd8
 8007358:	931e      	str	r3, [sp, #120]	; 0x78
 800735a:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800735e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8007362:	9234      	str	r2, [sp, #208]	; 0xd0
 8007364:	9337      	str	r3, [sp, #220]	; 0xdc
 8007366:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007368:	3301      	adds	r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	dc6b      	bgt.n	8007446 <forward_conv2d_nl_pool+0x2d2>
 800736e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007370:	2b00      	cmp	r3, #0
 8007372:	f2c0 80d7 	blt.w	8007524 <forward_conv2d_nl_pool+0x3b0>
 8007376:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007378:	4598      	cmp	r8, r3
 800737a:	d352      	bcc.n	8007422 <forward_conv2d_nl_pool+0x2ae>
 800737c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800737e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007380:	69b0      	ldr	r0, [r6, #24]
 8007382:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8007384:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007386:	440a      	add	r2, r1
 8007388:	9216      	str	r2, [sp, #88]	; 0x58
 800738a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800738c:	3a01      	subs	r2, #1
 800738e:	9213      	str	r2, [sp, #76]	; 0x4c
 8007390:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007392:	1a52      	subs	r2, r2, r1
 8007394:	9215      	str	r2, [sp, #84]	; 0x54
 8007396:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007398:	9208      	str	r2, [sp, #32]
 800739a:	b29a      	uxth	r2, r3
 800739c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800739e:	9201      	str	r2, [sp, #4]
 80073a0:	1ad2      	subs	r2, r2, r3
 80073a2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80073a6:	9305      	str	r3, [sp, #20]
 80073a8:	eba8 0803 	sub.w	r8, r8, r3
 80073ac:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80073b0:	9303      	str	r3, [sp, #12]
 80073b2:	2301      	movs	r3, #1
 80073b4:	9307      	str	r3, [sp, #28]
 80073b6:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 80073ba:	9306      	str	r3, [sp, #24]
 80073bc:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80073c0:	9304      	str	r3, [sp, #16]
 80073c2:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 80073c6:	9302      	str	r3, [sp, #8]
 80073c8:	3701      	adds	r7, #1
 80073ca:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	b292      	uxth	r2, r2
 80073d2:	fa1f f38b 	uxth.w	r3, fp
 80073d6:	fa1f f18a 	uxth.w	r1, sl
 80073da:	9717      	str	r7, [sp, #92]	; 0x5c
 80073dc:	47a8      	blx	r5
 80073de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80073e0:	9925      	ldr	r1, [sp, #148]	; 0x94
 80073e2:	6893      	ldr	r3, [r2, #8]
 80073e4:	440b      	add	r3, r1
 80073e6:	6093      	str	r3, [r2, #8]
 80073e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80073ea:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073f4:	b21b      	sxth	r3, r3
 80073f6:	9318      	str	r3, [sp, #96]	; 0x60
 80073f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80073fa:	42bb      	cmp	r3, r7
 80073fc:	fa0f f888 	sxth.w	r8, r8
 8007400:	d8b1      	bhi.n	8007366 <forward_conv2d_nl_pool+0x1f2>
 8007402:	69b3      	ldr	r3, [r6, #24]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	609a      	str	r2, [r3, #8]
 8007408:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800740a:	68d3      	ldr	r3, [r2, #12]
 800740c:	6093      	str	r3, [r2, #8]
 800740e:	b039      	add	sp, #228	; 0xe4
 8007410:	ecbd 8b04 	vpop	{d8-d9}
 8007414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	deff      	udf	#255	; 0xff
 800741c:	2300      	movs	r3, #0
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	deff      	udf	#255	; 0xff
 8007422:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007424:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007426:	4413      	add	r3, r2
 8007428:	9316      	str	r3, [sp, #88]	; 0x58
 800742a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800742c:	3b01      	subs	r3, #1
 800742e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007430:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007432:	1a9b      	subs	r3, r3, r2
 8007434:	9315      	str	r3, [sp, #84]	; 0x54
 8007436:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007438:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800743a:	4293      	cmp	r3, r2
 800743c:	d9e1      	bls.n	8007402 <forward_conv2d_nl_pool+0x28e>
 800743e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007440:	3301      	adds	r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	dd93      	ble.n	800736e <forward_conv2d_nl_pool+0x1fa>
 8007446:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8007448:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800744a:	920e      	str	r2, [sp, #56]	; 0x38
 800744c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800744e:	2b00      	cmp	r3, #0
 8007450:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007454:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8007456:	930a      	str	r3, [sp, #40]	; 0x28
 8007458:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800745a:	9307      	str	r3, [sp, #28]
 800745c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800745e:	9306      	str	r3, [sp, #24]
 8007460:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007462:	9305      	str	r3, [sp, #20]
 8007464:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007466:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007468:	e9cd a303 	strd	sl, r3, [sp, #12]
 800746c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800746e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007472:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007478:	4413      	add	r3, r2
 800747a:	bfa8      	it	ge
 800747c:	2200      	movge	r2, #0
 800747e:	9208      	str	r2, [sp, #32]
 8007480:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8007482:	4293      	cmp	r3, r2
 8007484:	bf28      	it	cs
 8007486:	4613      	movcs	r3, r2
 8007488:	9309      	str	r3, [sp, #36]	; 0x24
 800748a:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
 800748e:	930d      	str	r3, [sp, #52]	; 0x34
 8007490:	ee18 2a90 	vmov	r2, s17
 8007494:	ee18 3a10 	vmov	r3, s16
 8007498:	ee19 1a10 	vmov	r1, s18
 800749c:	4620      	mov	r0, r4
 800749e:	f7fe ff75 	bl	800638c <ai_conv2d_stripe_f32.constprop.0>
 80074a2:	69b2      	ldr	r2, [r6, #24]
 80074a4:	f1ba 0f00 	cmp.w	sl, #0
 80074a8:	f000 80a4 	beq.w	80075f4 <forward_conv2d_nl_pool+0x480>
 80074ac:	4611      	mov	r1, r2
 80074ae:	4630      	mov	r0, r6
 80074b0:	465a      	mov	r2, fp
 80074b2:	4656      	mov	r6, sl
 80074b4:	e9dd ba33 	ldrd	fp, sl, [sp, #204]	; 0xcc
 80074b8:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
 80074bc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80074be:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 80074c2:	2700      	movs	r7, #0
 80074c4:	608c      	str	r4, [r1, #8]
 80074c6:	462b      	mov	r3, r5
 80074c8:	4601      	mov	r1, r0
 80074ca:	9212      	str	r2, [sp, #72]	; 0x48
 80074cc:	9011      	str	r0, [sp, #68]	; 0x44
 80074ce:	47c0      	blx	r8
 80074d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80074d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074d4:	6981      	ldr	r1, [r0, #24]
 80074d6:	445d      	add	r5, fp
 80074d8:	eba5 0309 	sub.w	r3, r5, r9
 80074dc:	4293      	cmp	r3, r2
 80074de:	bfa8      	it	ge
 80074e0:	464d      	movge	r5, r9
 80074e2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80074e6:	684b      	ldr	r3, [r1, #4]
 80074e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074ea:	4454      	add	r4, sl
 80074ec:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 80074f0:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80074f4:	429c      	cmp	r4, r3
 80074f6:	f107 0701 	add.w	r7, r7, #1
 80074fa:	bf28      	it	cs
 80074fc:	eba4 040e 	subcs.w	r4, r4, lr
 8007500:	42be      	cmp	r6, r7
 8007502:	d1df      	bne.n	80074c4 <forward_conv2d_nl_pool+0x350>
 8007504:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007508:	9511      	str	r5, [sp, #68]	; 0x44
 800750a:	4693      	mov	fp, r2
 800750c:	46b2      	mov	sl, r6
 800750e:	460a      	mov	r2, r1
 8007510:	4606      	mov	r6, r0
 8007512:	4661      	mov	r1, ip
 8007514:	f108 0801 	add.w	r8, r8, #1
 8007518:	6091      	str	r1, [r2, #8]
 800751a:	fa0f f888 	sxth.w	r8, r8
 800751e:	e72a      	b.n	8007376 <forward_conv2d_nl_pool+0x202>
 8007520:	08006389 	.word	0x08006389
 8007524:	69b3      	ldr	r3, [r6, #24]
 8007526:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8007528:	68d9      	ldr	r1, [r3, #12]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	fb02 f208 	mul.w	r2, r2, r8
 8007530:	eba4 0282 	sub.w	r2, r4, r2, lsl #2
 8007534:	4291      	cmp	r1, r2
 8007536:	bf88      	it	hi
 8007538:	eb02 0283 	addhi.w	r2, r2, r3, lsl #2
 800753c:	4291      	cmp	r1, r2
 800753e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007542:	d21c      	bcs.n	800757e <forward_conv2d_nl_pool+0x40a>
 8007544:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8007546:	4540      	cmp	r0, r8
 8007548:	4419      	add	r1, r3
 800754a:	d140      	bne.n	80075ce <forward_conv2d_nl_pool+0x45a>
 800754c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800754e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007550:	4402      	add	r2, r0
 8007552:	981a      	ldr	r0, [sp, #104]	; 0x68
 8007554:	fa1f f888 	uxth.w	r8, r8
 8007558:	eba2 0208 	sub.w	r2, r2, r8
 800755c:	4480      	add	r8, r0
 800755e:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8007560:	4404      	add	r4, r0
 8007562:	b212      	sxth	r2, r2
 8007564:	428c      	cmp	r4, r1
 8007566:	921e      	str	r2, [sp, #120]	; 0x78
 8007568:	fa0f f888 	sxth.w	r8, r8
 800756c:	f4ff af03 	bcc.w	8007376 <forward_conv2d_nl_pool+0x202>
 8007570:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007572:	425b      	negs	r3, r3
 8007574:	441c      	add	r4, r3
 8007576:	428c      	cmp	r4, r1
 8007578:	d2fc      	bcs.n	8007574 <forward_conv2d_nl_pool+0x400>
 800757a:	9511      	str	r5, [sp, #68]	; 0x44
 800757c:	e6fb      	b.n	8007376 <forward_conv2d_nl_pool+0x202>
 800757e:	4419      	add	r1, r3
 8007580:	e7e4      	b.n	800754c <forward_conv2d_nl_pool+0x3d8>
 8007582:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007586:	2a00      	cmp	r2, #0
 8007588:	f43f aeb2 	beq.w	80072f0 <forward_conv2d_nl_pool+0x17c>
 800758c:	2b03      	cmp	r3, #3
 800758e:	d960      	bls.n	8007652 <forward_conv2d_nl_pool+0x4de>
 8007590:	684b      	ldr	r3, [r1, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	2b00      	cmp	r3, #0
 8007596:	d04d      	beq.n	8007634 <forward_conv2d_nl_pool+0x4c0>
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d04a      	beq.n	8007634 <forward_conv2d_nl_pool+0x4c0>
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80075a4:	e9d3 3601 	ldrd	r3, r6, [r3, #4]
 80075a8:	9301      	str	r3, [sp, #4]
 80075aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80075b2:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80075b6:	4103      	asrs	r3, r0
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	4630      	mov	r0, r6
 80075bc:	f7ff fc1e 	bl	8006dfc <ai_dict_decompress_f32>
 80075c0:	69a1      	ldr	r1, [r4, #24]
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	d039      	beq.n	800763a <forward_conv2d_nl_pool+0x4c6>
 80075c6:	ee08 6a90 	vmov	s17, r6
 80075ca:	880b      	ldrh	r3, [r1, #0]
 80075cc:	e690      	b.n	80072f0 <forward_conv2d_nl_pool+0x17c>
 80075ce:	428a      	cmp	r2, r1
 80075d0:	d2bc      	bcs.n	800754c <forward_conv2d_nl_pool+0x3d8>
 80075d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80075d4:	4620      	mov	r0, r4
 80075d6:	f852 3b04 	ldr.w	r3, [r2], #4
 80075da:	f840 3b04 	str.w	r3, [r0], #4
 80075de:	69b1      	ldr	r1, [r6, #24]
 80075e0:	684b      	ldr	r3, [r1, #4]
 80075e2:	68c9      	ldr	r1, [r1, #12]
 80075e4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80075e8:	4291      	cmp	r1, r2
 80075ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80075ee:	d8f2      	bhi.n	80075d6 <forward_conv2d_nl_pool+0x462>
 80075f0:	9511      	str	r5, [sp, #68]	; 0x44
 80075f2:	e7ab      	b.n	800754c <forward_conv2d_nl_pool+0x3d8>
 80075f4:	68d1      	ldr	r1, [r2, #12]
 80075f6:	e78d      	b.n	8007514 <forward_conv2d_nl_pool+0x3a0>
 80075f8:	f1b9 0f00 	cmp.w	r9, #0
 80075fc:	d001      	beq.n	8007602 <forward_conv2d_nl_pool+0x48e>
 80075fe:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8007602:	9033      	str	r0, [sp, #204]	; 0xcc
 8007604:	2201      	movs	r2, #1
 8007606:	9214      	str	r2, [sp, #80]	; 0x50
 8007608:	e63a      	b.n	8007280 <forward_conv2d_nl_pool+0x10c>
 800760a:	f1b9 0f00 	cmp.w	r9, #0
 800760e:	d001      	beq.n	8007614 <forward_conv2d_nl_pool+0x4a0>
 8007610:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8007614:	2200      	movs	r2, #0
 8007616:	9233      	str	r2, [sp, #204]	; 0xcc
 8007618:	2201      	movs	r2, #1
 800761a:	9214      	str	r2, [sp, #80]	; 0x50
 800761c:	e630      	b.n	8007280 <forward_conv2d_nl_pool+0x10c>
 800761e:	8b36      	ldrh	r6, [r6, #24]
 8007620:	2e01      	cmp	r6, #1
 8007622:	d90f      	bls.n	8007644 <forward_conv2d_nl_pool+0x4d0>
 8007624:	ee08 0a10 	vmov	s16, r0
 8007628:	4606      	mov	r6, r0
 800762a:	e5ca      	b.n	80071c2 <forward_conv2d_nl_pool+0x4e>
 800762c:	2500      	movs	r5, #0
 800762e:	ee08 5a10 	vmov	s16, r5
 8007632:	e5c5      	b.n	80071c0 <forward_conv2d_nl_pool+0x4c>
 8007634:	2300      	movs	r3, #0
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	deff      	udf	#255	; 0xff
 800763a:	880b      	ldrh	r3, [r1, #0]
 800763c:	e658      	b.n	80072f0 <forward_conv2d_nl_pool+0x17c>
 800763e:	2300      	movs	r3, #0
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	deff      	udf	#255	; 0xff
 8007644:	68c3      	ldr	r3, [r0, #12]
 8007646:	deff      	udf	#255	; 0xff
 8007648:	2300      	movs	r3, #0
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	deff      	udf	#255	; 0xff
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	deff      	udf	#255	; 0xff
 8007652:	2300      	movs	r3, #0
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	deff      	udf	#255	; 0xff

08007658 <forward_dense>:
 8007658:	6983      	ldr	r3, [r0, #24]
 800765a:	881a      	ldrh	r2, [r3, #0]
 800765c:	2a00      	cmp	r2, #0
 800765e:	f000 8181 	beq.w	8007964 <forward_dense+0x30c>
 8007662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007666:	ed2d 8b02 	vpush	{d8}
 800766a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800766e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8007672:	b095      	sub	sp, #84	; 0x54
 8007674:	b105      	cbz	r5, 8007678 <forward_dense+0x20>
 8007676:	682d      	ldr	r5, [r5, #0]
 8007678:	2a01      	cmp	r2, #1
 800767a:	f000 828f 	beq.w	8007b9c <forward_dense+0x544>
 800767e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8007682:	b106      	cbz	r6, 8007686 <forward_dense+0x2e>
 8007684:	6836      	ldr	r6, [r6, #0]
 8007686:	2a02      	cmp	r2, #2
 8007688:	f000 816e 	beq.w	8007968 <forward_dense+0x310>
 800768c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8007690:	930b      	str	r3, [sp, #44]	; 0x2c
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8274 	beq.w	8007b80 <forward_dense+0x528>
 8007698:	4619      	mov	r1, r3
 800769a:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800769e:	6809      	ldr	r1, [r1, #0]
 80076a0:	910d      	str	r1, [sp, #52]	; 0x34
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	f240 826e 	bls.w	8007b84 <forward_dense+0x52c>
 80076a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80076ae:	460b      	mov	r3, r1
 80076b0:	68e8      	ldr	r0, [r5, #12]
 80076b2:	68f7      	ldr	r7, [r6, #12]
 80076b4:	6840      	ldr	r0, [r0, #4]
 80076b6:	6999      	ldr	r1, [r3, #24]
 80076b8:	9013      	str	r0, [sp, #76]	; 0x4c
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	680b      	ldr	r3, [r1, #0]
 80076be:	9012      	str	r0, [sp, #72]	; 0x48
 80076c0:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80076c4:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80076c8:	fb00 f404 	mul.w	r4, r0, r4
 80076cc:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80076d0:	fa4e f000 	asr.w	r0, lr, r0
 80076d4:	2a03      	cmp	r2, #3
 80076d6:	9010      	str	r0, [sp, #64]	; 0x40
 80076d8:	f000 825d 	beq.w	8007b96 <forward_dense+0x53e>
 80076dc:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80076e0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80076e4:	2a00      	cmp	r2, #0
 80076e6:	f000 8246 	beq.w	8007b76 <forward_dense+0x51e>
 80076ea:	6812      	ldr	r2, [r2, #0]
 80076ec:	2a00      	cmp	r2, #0
 80076ee:	f000 8242 	beq.w	8007b76 <forward_dense+0x51e>
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80076f8:	f000 822c 	beq.w	8007b54 <forward_dense+0x4fc>
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	f000 8229 	beq.w	8007b54 <forward_dense+0x4fc>
 8007702:	f04f 0b00 	mov.w	fp, #0
 8007706:	69b2      	ldr	r2, [r6, #24]
 8007708:	69ab      	ldr	r3, [r5, #24]
 800770a:	6891      	ldr	r1, [r2, #8]
 800770c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	6952      	ldr	r2, [r2, #20]
 8007712:	9106      	str	r1, [sp, #24]
 8007714:	fb07 f404 	mul.w	r4, r7, r4
 8007718:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800771c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800771e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007722:	4281      	cmp	r1, r0
 8007724:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8007728:	900e      	str	r0, [sp, #56]	; 0x38
 800772a:	940c      	str	r4, [sp, #48]	; 0x30
 800772c:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8007730:	f080 8113 	bcs.w	800795a <forward_dense+0x302>
 8007734:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007736:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8007984 <forward_dense+0x32c>
 800773a:	f021 0201 	bic.w	r2, r1, #1
 800773e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007742:	9204      	str	r2, [sp, #16]
 8007744:	f001 0201 	and.w	r2, r1, #1
 8007748:	08c8      	lsrs	r0, r1, #3
 800774a:	9208      	str	r2, [sp, #32]
 800774c:	008a      	lsls	r2, r1, #2
 800774e:	f001 0a07 	and.w	sl, r1, #7
 8007752:	920f      	str	r2, [sp, #60]	; 0x3c
 8007754:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8007758:	3320      	adds	r3, #32
 800775a:	465c      	mov	r4, fp
 800775c:	9007      	str	r0, [sp, #28]
 800775e:	46cb      	mov	fp, r9
 8007760:	9205      	str	r2, [sp, #20]
 8007762:	9302      	str	r3, [sp, #8]
 8007764:	46c1      	mov	r9, r8
 8007766:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800776a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	9b02      	ldr	r3, [sp, #8]
 8007772:	3b20      	subs	r3, #32
 8007774:	930a      	str	r3, [sp, #40]	; 0x28
 8007776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007778:	b10b      	cbz	r3, 800777e <forward_dense+0x126>
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2c00      	cmp	r4, #0
 8007780:	f000 81da 	beq.w	8007b38 <forward_dense+0x4e0>
 8007784:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007786:	2904      	cmp	r1, #4
 8007788:	9906      	ldr	r1, [sp, #24]
 800778a:	f000 80fd 	beq.w	8007988 <forward_dense+0x330>
 800778e:	4549      	cmp	r1, r9
 8007790:	f080 80d2 	bcs.w	8007938 <forward_dense+0x2e0>
 8007794:	460f      	mov	r7, r1
 8007796:	9907      	ldr	r1, [sp, #28]
 8007798:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800779c:	f8dd a014 	ldr.w	sl, [sp, #20]
 80077a0:	1c4e      	adds	r6, r1, #1
 80077a2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80077a6:	4694      	mov	ip, r2
 80077a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80077aa:	468e      	mov	lr, r1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 80de 	beq.w	800796e <forward_dense+0x316>
 80077b2:	ecf3 2a01 	vldmia	r3!, {s5}
 80077b6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007984 <forward_dense+0x32c>
 80077ba:	f1be 0f00 	cmp.w	lr, #0
 80077be:	f000 80de 	beq.w	800797e <forward_dense+0x326>
 80077c2:	f10c 0108 	add.w	r1, ip, #8
 80077c6:	4640      	mov	r0, r8
 80077c8:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80077cc:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80077d0:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80077d4:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80077d8:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80077dc:	ed10 5a04 	vldr	s10, [r0, #-16]
 80077e0:	ed50 5a03 	vldr	s11, [r0, #-12]
 80077e4:	ed10 6a02 	vldr	s12, [r0, #-8]
 80077e8:	ed50 6a01 	vldr	s13, [r0, #-4]
 80077ec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80077f0:	edd5 7a00 	vldr	s15, [r5]
 80077f4:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 80077f8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80077fc:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007800:	ed95 3a00 	vldr	s6, [r5]
 8007804:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8007808:	eee3 7a23 	vfma.f32	s15, s6, s7
 800780c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007810:	3108      	adds	r1, #8
 8007812:	edd5 3a00 	vldr	s7, [r5]
 8007816:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800781a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800781e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007822:	3020      	adds	r0, #32
 8007824:	ed95 4a00 	vldr	s8, [r5]
 8007828:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800782c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007830:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007834:	edd5 4a00 	vldr	s9, [r5]
 8007838:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800783c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007840:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007844:	ed95 5a00 	vldr	s10, [r5]
 8007848:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800784c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007850:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007854:	edd5 5a00 	vldr	s11, [r5]
 8007858:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800785c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007860:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007864:	428e      	cmp	r6, r1
 8007866:	ed95 6a00 	vldr	s12, [r5]
 800786a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800786e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007872:	d1a9      	bne.n	80077c8 <forward_dense+0x170>
 8007874:	f1a6 0108 	sub.w	r1, r6, #8
 8007878:	4650      	mov	r0, sl
 800787a:	2a00      	cmp	r2, #0
 800787c:	d04a      	beq.n	8007914 <forward_dense+0x2bc>
 800787e:	780d      	ldrb	r5, [r1, #0]
 8007880:	edd0 6a00 	vldr	s13, [r0]
 8007884:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007888:	edd5 7a00 	vldr	s15, [r5]
 800788c:	2a01      	cmp	r2, #1
 800788e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007892:	d03f      	beq.n	8007914 <forward_dense+0x2bc>
 8007894:	784d      	ldrb	r5, [r1, #1]
 8007896:	edd0 6a01 	vldr	s13, [r0, #4]
 800789a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800789e:	edd5 7a00 	vldr	s15, [r5]
 80078a2:	2a02      	cmp	r2, #2
 80078a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078a8:	d034      	beq.n	8007914 <forward_dense+0x2bc>
 80078aa:	788d      	ldrb	r5, [r1, #2]
 80078ac:	edd0 6a02 	vldr	s13, [r0, #8]
 80078b0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80078b4:	edd5 7a00 	vldr	s15, [r5]
 80078b8:	2a03      	cmp	r2, #3
 80078ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078be:	d029      	beq.n	8007914 <forward_dense+0x2bc>
 80078c0:	78cd      	ldrb	r5, [r1, #3]
 80078c2:	edd0 6a03 	vldr	s13, [r0, #12]
 80078c6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80078ca:	edd5 7a00 	vldr	s15, [r5]
 80078ce:	2a04      	cmp	r2, #4
 80078d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078d4:	d01e      	beq.n	8007914 <forward_dense+0x2bc>
 80078d6:	790d      	ldrb	r5, [r1, #4]
 80078d8:	edd0 6a04 	vldr	s13, [r0, #16]
 80078dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80078e0:	edd5 7a00 	vldr	s15, [r5]
 80078e4:	2a05      	cmp	r2, #5
 80078e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078ea:	d013      	beq.n	8007914 <forward_dense+0x2bc>
 80078ec:	794d      	ldrb	r5, [r1, #5]
 80078ee:	edd0 6a05 	vldr	s13, [r0, #20]
 80078f2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80078f6:	edd5 7a00 	vldr	s15, [r5]
 80078fa:	2a06      	cmp	r2, #6
 80078fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007900:	d008      	beq.n	8007914 <forward_dense+0x2bc>
 8007902:	7989      	ldrb	r1, [r1, #6]
 8007904:	edd0 7a06 	vldr	s15, [r0, #24]
 8007908:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800790c:	edd1 6a00 	vldr	s13, [r1]
 8007910:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007914:	44dc      	add	ip, fp
 8007916:	445e      	add	r6, fp
 8007918:	ee32 7a87 	vadd.f32	s14, s5, s14
 800791c:	eca7 7a01 	vstmia	r7!, {s14}
 8007920:	454f      	cmp	r7, r9
 8007922:	f4ff af43 	bcc.w	80077ac <forward_dense+0x154>
 8007926:	9a06      	ldr	r2, [sp, #24]
 8007928:	eba9 0302 	sub.w	r3, r9, r2
 800792c:	3b01      	subs	r3, #1
 800792e:	f023 0303 	bic.w	r3, r3, #3
 8007932:	3304      	adds	r3, #4
 8007934:	18d3      	adds	r3, r2, r3
 8007936:	9306      	str	r3, [sp, #24]
 8007938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800793a:	9a05      	ldr	r2, [sp, #20]
 800793c:	4499      	add	r9, r3
 800793e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007940:	441a      	add	r2, r3
 8007942:	9205      	str	r2, [sp, #20]
 8007944:	9a02      	ldr	r2, [sp, #8]
 8007946:	441a      	add	r2, r3
 8007948:	9202      	str	r2, [sp, #8]
 800794a:	9a04      	ldr	r2, [sp, #16]
 800794c:	441a      	add	r2, r3
 800794e:	9204      	str	r2, [sp, #16]
 8007950:	9b06      	ldr	r3, [sp, #24]
 8007952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007954:	4293      	cmp	r3, r2
 8007956:	f4ff af08 	bcc.w	800776a <forward_dense+0x112>
 800795a:	b015      	add	sp, #84	; 0x54
 800795c:	ecbd 8b02 	vpop	{d8}
 8007960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007964:	6853      	ldr	r3, [r2, #4]
 8007966:	deff      	udf	#255	; 0xff
 8007968:	2300      	movs	r3, #0
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	deff      	udf	#255	; 0xff
 800796e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007984 <forward_dense+0x32c>
 8007972:	eef0 2a48 	vmov.f32	s5, s16
 8007976:	f1be 0f00 	cmp.w	lr, #0
 800797a:	f47f af22 	bne.w	80077c2 <forward_dense+0x16a>
 800797e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007980:	4661      	mov	r1, ip
 8007982:	e77a      	b.n	800787a <forward_dense+0x222>
 8007984:	00000000 	.word	0x00000000
 8007988:	4549      	cmp	r1, r9
 800798a:	d2d5      	bcs.n	8007938 <forward_dense+0x2e0>
 800798c:	9807      	ldr	r0, [sp, #28]
 800798e:	9103      	str	r1, [sp, #12]
 8007990:	9904      	ldr	r1, [sp, #16]
 8007992:	f100 0c01 	add.w	ip, r0, #1
 8007996:	3901      	subs	r1, #1
 8007998:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800799c:	9109      	str	r1, [sp, #36]	; 0x24
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 80b2 	beq.w	8007b08 <forward_dense+0x4b0>
 80079a4:	9907      	ldr	r1, [sp, #28]
 80079a6:	ecf3 2a01 	vldmia	r3!, {s5}
 80079aa:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8007984 <forward_dense+0x32c>
 80079ae:	2900      	cmp	r1, #0
 80079b0:	f000 80b2 	beq.w	8007b18 <forward_dense+0x4c0>
 80079b4:	9902      	ldr	r1, [sp, #8]
 80079b6:	1d10      	adds	r0, r2, #4
 80079b8:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80079bc:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80079c0:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80079c4:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 80079c8:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80079cc:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 80079d0:	ed11 5a04 	vldr	s10, [r1, #-16]
 80079d4:	ed51 5a03 	vldr	s11, [r1, #-12]
 80079d8:	ed11 6a02 	vldr	s12, [r1, #-8]
 80079dc:	ed51 6a01 	vldr	s13, [r1, #-4]
 80079e0:	f006 070f 	and.w	r7, r6, #15
 80079e4:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80079e8:	edd7 7a00 	vldr	s15, [r7]
 80079ec:	0936      	lsrs	r6, r6, #4
 80079ee:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80079f2:	ed96 3a00 	vldr	s6, [r6]
 80079f6:	ee67 7a82 	vmul.f32	s15, s15, s4
 80079fa:	092e      	lsrs	r6, r5, #4
 80079fc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007a00:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007a04:	f005 050f 	and.w	r5, r5, #15
 8007a08:	edd6 3a00 	vldr	s7, [r6]
 8007a0c:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8007a10:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007a14:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a18:	0937      	lsrs	r7, r6, #4
 8007a1a:	ed95 4a00 	vldr	s8, [r5]
 8007a1e:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8007a22:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007a26:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007a2a:	f006 060f 	and.w	r6, r6, #15
 8007a2e:	edd7 4a00 	vldr	s9, [r7]
 8007a32:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007a36:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007a3a:	3004      	adds	r0, #4
 8007a3c:	ed96 5a00 	vldr	s10, [r6]
 8007a40:	092e      	lsrs	r6, r5, #4
 8007a42:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007a46:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007a4a:	f005 050f 	and.w	r5, r5, #15
 8007a4e:	edd6 5a00 	vldr	s11, [r6]
 8007a52:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007a56:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a5a:	4584      	cmp	ip, r0
 8007a5c:	ed95 6a00 	vldr	s12, [r5]
 8007a60:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a64:	f101 0120 	add.w	r1, r1, #32
 8007a68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a6c:	d1a4      	bne.n	80079b8 <forward_dense+0x360>
 8007a6e:	f8dd e014 	ldr.w	lr, [sp, #20]
 8007a72:	f1ac 0804 	sub.w	r8, ip, #4
 8007a76:	9904      	ldr	r1, [sp, #16]
 8007a78:	458e      	cmp	lr, r1
 8007a7a:	d22a      	bcs.n	8007ad2 <forward_dense+0x47a>
 8007a7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a7e:	eba1 070e 	sub.w	r7, r1, lr
 8007a82:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8007a86:	f10e 0008 	add.w	r0, lr, #8
 8007a8a:	f108 36ff 	add.w	r6, r8, #4294967295
 8007a8e:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8007a92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a96:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007a9a:	ed50 6a02 	vldr	s13, [r0, #-8]
 8007a9e:	f001 050f 	and.w	r5, r1, #15
 8007aa2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007aa6:	edd5 7a00 	vldr	s15, [r5]
 8007aaa:	0909      	lsrs	r1, r1, #4
 8007aac:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007ab0:	ed91 6a00 	vldr	s12, [r1]
 8007ab4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007ab8:	42b7      	cmp	r7, r6
 8007aba:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007abe:	f100 0008 	add.w	r0, r0, #8
 8007ac2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ac6:	d1e4      	bne.n	8007a92 <forward_dense+0x43a>
 8007ac8:	f10a 0a01 	add.w	sl, sl, #1
 8007acc:	44d0      	add	r8, sl
 8007ace:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8007ad2:	9908      	ldr	r1, [sp, #32]
 8007ad4:	b321      	cbz	r1, 8007b20 <forward_dense+0x4c8>
 8007ad6:	f898 1000 	ldrb.w	r1, [r8]
 8007ada:	edde 7a00 	vldr	s15, [lr]
 8007ade:	0909      	lsrs	r1, r1, #4
 8007ae0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007ae4:	edd1 6a00 	vldr	s13, [r1]
 8007ae8:	9903      	ldr	r1, [sp, #12]
 8007aea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007aee:	445a      	add	r2, fp
 8007af0:	44dc      	add	ip, fp
 8007af2:	ee72 2a87 	vadd.f32	s5, s5, s14
 8007af6:	ece1 2a01 	vstmia	r1!, {s5}
 8007afa:	4589      	cmp	r9, r1
 8007afc:	9103      	str	r1, [sp, #12]
 8007afe:	f67f af12 	bls.w	8007926 <forward_dense+0x2ce>
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f47f af4e 	bne.w	80079a4 <forward_dense+0x34c>
 8007b08:	9907      	ldr	r1, [sp, #28]
 8007b0a:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8007984 <forward_dense+0x32c>
 8007b0e:	eef0 2a48 	vmov.f32	s5, s16
 8007b12:	2900      	cmp	r1, #0
 8007b14:	f47f af4e 	bne.w	80079b4 <forward_dense+0x35c>
 8007b18:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8007b1c:	4690      	mov	r8, r2
 8007b1e:	e7aa      	b.n	8007a76 <forward_dense+0x41e>
 8007b20:	9903      	ldr	r1, [sp, #12]
 8007b22:	ee32 7a87 	vadd.f32	s14, s5, s14
 8007b26:	445a      	add	r2, fp
 8007b28:	eca1 7a01 	vstmia	r1!, {s14}
 8007b2c:	4549      	cmp	r1, r9
 8007b2e:	9103      	str	r1, [sp, #12]
 8007b30:	44dc      	add	ip, fp
 8007b32:	f4ff af34 	bcc.w	800799e <forward_dense+0x346>
 8007b36:	e6f6      	b.n	8007926 <forward_dense+0x2ce>
 8007b38:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007b3a:	9d06      	ldr	r5, [sp, #24]
 8007b3c:	9101      	str	r1, [sp, #4]
 8007b3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007b40:	9100      	str	r1, [sp, #0]
 8007b42:	4628      	mov	r0, r5
 8007b44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b46:	f000 fda3 	bl	8008690 <lite_dense_if32of32wf32>
 8007b4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b4c:	462b      	mov	r3, r5
 8007b4e:	4413      	add	r3, r2
 8007b50:	9306      	str	r3, [sp, #24]
 8007b52:	e6f1      	b.n	8007938 <forward_dense+0x2e0>
 8007b54:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8007b58:	f1b9 0f00 	cmp.w	r9, #0
 8007b5c:	d016      	beq.n	8007b8c <forward_dense+0x534>
 8007b5e:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007b62:	f000 ff43 	bl	80089ec <ai_array_get_byte_size>
 8007b66:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	4641      	mov	r1, r8
 8007b6e:	4658      	mov	r0, fp
 8007b70:	f002 fe17 	bl	800a7a2 <memcpy>
 8007b74:	e5c7      	b.n	8007706 <forward_dense+0xae>
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d00a      	beq.n	8007b90 <forward_dense+0x538>
 8007b7a:	f04f 0900 	mov.w	r9, #0
 8007b7e:	e5bd      	b.n	80076fc <forward_dense+0xa4>
 8007b80:	930d      	str	r3, [sp, #52]	; 0x34
 8007b82:	e595      	b.n	80076b0 <forward_dense+0x58>
 8007b84:	2300      	movs	r3, #0
 8007b86:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b88:	460b      	mov	r3, r1
 8007b8a:	e591      	b.n	80076b0 <forward_dense+0x58>
 8007b8c:	46c3      	mov	fp, r8
 8007b8e:	e5ba      	b.n	8007706 <forward_dense+0xae>
 8007b90:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8007b94:	e5b7      	b.n	8007706 <forward_dense+0xae>
 8007b96:	2300      	movs	r3, #0
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	deff      	udf	#255	; 0xff
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	deff      	udf	#255	; 0xff
 8007ba2:	bf00      	nop

08007ba4 <pool_func_ap_array_f32>:
 8007ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba8:	b095      	sub	sp, #84	; 0x54
 8007baa:	4699      	mov	r9, r3
 8007bac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007bae:	f8bd 5078 	ldrh.w	r5, [sp, #120]	; 0x78
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	9304      	str	r3, [sp, #16]
 8007bb6:	4690      	mov	r8, r2
 8007bb8:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8007bbc:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8007bc0:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8007bc4:	f8bd 607c 	ldrh.w	r6, [sp, #124]	; 0x7c
 8007bc8:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8007bcc:	f8bd 0094 	ldrh.w	r0, [sp, #148]	; 0x94
 8007bd0:	9506      	str	r5, [sp, #24]
 8007bd2:	468a      	mov	sl, r1
 8007bd4:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 8007bd8:	9105      	str	r1, [sp, #20]
 8007bda:	ea52 0403 	orrs.w	r4, r2, r3
 8007bde:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 8007be2:	9601      	str	r6, [sp, #4]
 8007be4:	9707      	str	r7, [sp, #28]
 8007be6:	9102      	str	r1, [sp, #8]
 8007be8:	9003      	str	r0, [sp, #12]
 8007bea:	d108      	bne.n	8007bfe <pool_func_ap_array_f32+0x5a>
 8007bec:	eba5 000a 	sub.w	r0, r5, sl
 8007bf0:	3801      	subs	r0, #1
 8007bf2:	3901      	subs	r1, #1
 8007bf4:	fb11 0107 	smlabb	r1, r1, r7, r0
 8007bf8:	0408      	lsls	r0, r1, #16
 8007bfa:	f100 8091 	bmi.w	8007d20 <pool_func_ap_array_f32+0x17c>
 8007bfe:	9903      	ldr	r1, [sp, #12]
 8007c00:	2900      	cmp	r1, #0
 8007c02:	f000 8087 	beq.w	8007d14 <pool_func_ap_array_f32+0x170>
 8007c06:	9902      	ldr	r1, [sp, #8]
 8007c08:	2900      	cmp	r1, #0
 8007c0a:	f000 8083 	beq.w	8007d14 <pool_func_ap_array_f32+0x170>
 8007c0e:	f1b9 0f00 	cmp.w	r9, #0
 8007c12:	d07f      	beq.n	8007d14 <pool_func_ap_array_f32+0x170>
 8007c14:	f1b9 0f01 	cmp.w	r9, #1
 8007c18:	9901      	ldr	r1, [sp, #4]
 8007c1a:	f040 8101 	bne.w	8007e20 <pool_func_ap_array_f32+0x27c>
 8007c1e:	1a8a      	subs	r2, r1, r2
 8007c20:	9906      	ldr	r1, [sp, #24]
 8007c22:	ed9f 6a7d 	vldr	s12, [pc, #500]	; 8007e18 <pool_func_ap_array_f32+0x274>
 8007c26:	1ac9      	subs	r1, r1, r3
 8007c28:	425b      	negs	r3, r3
 8007c2a:	b292      	uxth	r2, r2
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	9209      	str	r2, [sp, #36]	; 0x24
 8007c30:	930e      	str	r3, [sp, #56]	; 0x38
 8007c32:	b28a      	uxth	r2, r1
 8007c34:	2300      	movs	r3, #0
 8007c36:	920d      	str	r2, [sp, #52]	; 0x34
 8007c38:	930a      	str	r3, [sp, #40]	; 0x28
 8007c3a:	9a02      	ldr	r2, [sp, #8]
 8007c3c:	fb02 f303 	mul.w	r3, r2, r3
 8007c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c44:	9b01      	ldr	r3, [sp, #4]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	b21b      	sxth	r3, r3
 8007c4a:	930c      	str	r3, [sp, #48]	; 0x30
 8007c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c4e:	9306      	str	r3, [sp, #24]
 8007c50:	f04f 0e00 	mov.w	lr, #0
 8007c54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c56:	9308      	str	r3, [sp, #32]
 8007c58:	b217      	sxth	r7, r2
 8007c5a:	46f1      	mov	r9, lr
 8007c5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c60:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8007c64:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8007c68:	428f      	cmp	r7, r1
 8007c6a:	4499      	add	r9, r3
 8007c6c:	dd55      	ble.n	8007d1a <pool_func_ap_array_f32+0x176>
 8007c6e:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8007e1c <pool_func_ap_array_f32+0x278>
 8007c72:	f04f 0c00 	mov.w	ip, #0
 8007c76:	ea00 75e0 	and.w	r5, r0, r0, asr #31
 8007c7a:	4286      	cmp	r6, r0
 8007c7c:	da1d      	bge.n	8007cba <pool_func_ap_array_f32+0x116>
 8007c7e:	2900      	cmp	r1, #0
 8007c80:	fb01 f40a 	mul.w	r4, r1, sl
 8007c84:	db19      	blt.n	8007cba <pool_func_ap_array_f32+0x116>
 8007c86:	4541      	cmp	r1, r8
 8007c88:	da17      	bge.n	8007cba <pool_func_ap_array_f32+0x116>
 8007c8a:	2e00      	cmp	r6, #0
 8007c8c:	4633      	mov	r3, r6
 8007c8e:	da05      	bge.n	8007c9c <pool_func_ap_array_f32+0xf8>
 8007c90:	3301      	adds	r3, #1
 8007c92:	b21b      	sxth	r3, r3
 8007c94:	429d      	cmp	r5, r3
 8007c96:	dcfb      	bgt.n	8007c90 <pool_func_ap_array_f32+0xec>
 8007c98:	4283      	cmp	r3, r0
 8007c9a:	da0e      	bge.n	8007cba <pool_func_ap_array_f32+0x116>
 8007c9c:	191a      	adds	r2, r3, r4
 8007c9e:	4553      	cmp	r3, sl
 8007ca0:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8007ca4:	da05      	bge.n	8007cb2 <pool_func_ap_array_f32+0x10e>
 8007ca6:	edd2 7a00 	vldr	s15, [r2]
 8007caa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007cae:	f10c 0c01 	add.w	ip, ip, #1
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	b21b      	sxth	r3, r3
 8007cb6:	4283      	cmp	r3, r0
 8007cb8:	dbf0      	blt.n	8007c9c <pool_func_ap_array_f32+0xf8>
 8007cba:	3101      	adds	r1, #1
 8007cbc:	b209      	sxth	r1, r1
 8007cbe:	42b9      	cmp	r1, r7
 8007cc0:	dbdb      	blt.n	8007c7a <pool_func_ap_array_f32+0xd6>
 8007cc2:	ee07 ca90 	vmov	s15, ip
 8007cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007cce:	9b04      	ldr	r3, [sp, #16]
 8007cd0:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8007cd4:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8007cd8:	9b08      	ldr	r3, [sp, #32]
 8007cda:	440b      	add	r3, r1
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	f10e 0e01 	add.w	lr, lr, #1
 8007ce2:	9308      	str	r3, [sp, #32]
 8007ce4:	9b02      	ldr	r3, [sp, #8]
 8007ce6:	edc9 6a00 	vstr	s13, [r9]
 8007cea:	fa0f fe8e 	sxth.w	lr, lr
 8007cee:	440a      	add	r2, r1
 8007cf0:	b292      	uxth	r2, r2
 8007cf2:	4573      	cmp	r3, lr
 8007cf4:	9206      	str	r2, [sp, #24]
 8007cf6:	46f1      	mov	r9, lr
 8007cf8:	dcb0      	bgt.n	8007c5c <pool_func_ap_array_f32+0xb8>
 8007cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cfc:	9905      	ldr	r1, [sp, #20]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	b21a      	sxth	r2, r3
 8007d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d04:	920a      	str	r2, [sp, #40]	; 0x28
 8007d06:	440b      	add	r3, r1
 8007d08:	9903      	ldr	r1, [sp, #12]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	4291      	cmp	r1, r2
 8007d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d10:	4613      	mov	r3, r2
 8007d12:	dc92      	bgt.n	8007c3a <pool_func_ap_array_f32+0x96>
 8007d14:	b015      	add	sp, #84	; 0x54
 8007d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1a:	eef0 6a46 	vmov.f32	s13, s12
 8007d1e:	e7d6      	b.n	8007cce <pool_func_ap_array_f32+0x12a>
 8007d20:	eba6 0008 	sub.w	r0, r6, r8
 8007d24:	9e03      	ldr	r6, [sp, #12]
 8007d26:	9d05      	ldr	r5, [sp, #20]
 8007d28:	3801      	subs	r0, #1
 8007d2a:	1e71      	subs	r1, r6, #1
 8007d2c:	fb11 0105 	smlabb	r1, r1, r5, r0
 8007d30:	0409      	lsls	r1, r1, #16
 8007d32:	f57f af64 	bpl.w	8007bfe <pool_func_ap_array_f32+0x5a>
 8007d36:	2e00      	cmp	r6, #0
 8007d38:	d0ec      	beq.n	8007d14 <pool_func_ap_array_f32+0x170>
 8007d3a:	9b02      	ldr	r3, [sp, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0e9      	beq.n	8007d14 <pool_func_ap_array_f32+0x170>
 8007d40:	f1b9 0f00 	cmp.w	r9, #0
 8007d44:	d0e6      	beq.n	8007d14 <pool_func_ap_array_f32+0x170>
 8007d46:	f1b9 0f01 	cmp.w	r9, #1
 8007d4a:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8007e18 <pool_func_ap_array_f32+0x274>
 8007d4e:	9408      	str	r4, [sp, #32]
 8007d50:	4623      	mov	r3, r4
 8007d52:	f040 810a 	bne.w	8007f6a <pool_func_ap_array_f32+0x3c6>
 8007d56:	9409      	str	r4, [sp, #36]	; 0x24
 8007d58:	9a02      	ldr	r2, [sp, #8]
 8007d5a:	f9bd 9004 	ldrsh.w	r9, [sp, #4]
 8007d5e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007d62:	fb03 f302 	mul.w	r3, r3, r2
 8007d66:	2700      	movs	r7, #0
 8007d68:	930c      	str	r3, [sp, #48]	; 0x30
 8007d6a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8007d6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d70:	970a      	str	r7, [sp, #40]	; 0x28
 8007d72:	46be      	mov	lr, r7
 8007d74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d78:	454c      	cmp	r4, r9
 8007d7a:	449e      	add	lr, r3
 8007d7c:	b23e      	sxth	r6, r7
 8007d7e:	fa0f f088 	sxth.w	r0, r8
 8007d82:	f280 80ef 	bge.w	8007f64 <pool_func_ap_array_f32+0x3c0>
 8007d86:	f108 3cff 	add.w	ip, r8, #4294967295
 8007d8a:	ebac 0c07 	sub.w	ip, ip, r7
 8007d8e:	eddf 7a23 	vldr	s15, [pc, #140]	; 8007e1c <pool_func_ap_array_f32+0x278>
 8007d92:	fa1f fc8c 	uxth.w	ip, ip
 8007d96:	2500      	movs	r5, #0
 8007d98:	4286      	cmp	r6, r0
 8007d9a:	da0e      	bge.n	8007dba <pool_func_ap_array_f32+0x216>
 8007d9c:	fb04 620a 	mla	r2, r4, sl, r6
 8007da0:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8007da4:	4633      	mov	r3, r6
 8007da6:	3301      	adds	r3, #1
 8007da8:	ecb2 7a01 	vldmia	r2!, {s14}
 8007dac:	b219      	sxth	r1, r3
 8007dae:	4281      	cmp	r1, r0
 8007db0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007db4:	dbf7      	blt.n	8007da6 <pool_func_ap_array_f32+0x202>
 8007db6:	3501      	adds	r5, #1
 8007db8:	4465      	add	r5, ip
 8007dba:	3401      	adds	r4, #1
 8007dbc:	b224      	sxth	r4, r4
 8007dbe:	454c      	cmp	r4, r9
 8007dc0:	dbea      	blt.n	8007d98 <pool_func_ap_array_f32+0x1f4>
 8007dc2:	ee07 5a10 	vmov	s14, r5
 8007dc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007dca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007dce:	9a04      	ldr	r2, [sp, #16]
 8007dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd2:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8007dd6:	9a07      	ldr	r2, [sp, #28]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	4490      	add	r8, r2
 8007ddc:	4417      	add	r7, r2
 8007dde:	9a02      	ldr	r2, [sp, #8]
 8007de0:	b21b      	sxth	r3, r3
 8007de2:	429a      	cmp	r2, r3
 8007de4:	edce 6a00 	vstr	s13, [lr]
 8007de8:	930a      	str	r3, [sp, #40]	; 0x28
 8007dea:	fa1f f888 	uxth.w	r8, r8
 8007dee:	b2bf      	uxth	r7, r7
 8007df0:	469e      	mov	lr, r3
 8007df2:	dcbf      	bgt.n	8007d74 <pool_func_ap_array_f32+0x1d0>
 8007df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df6:	9a01      	ldr	r2, [sp, #4]
 8007df8:	9805      	ldr	r0, [sp, #20]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	4402      	add	r2, r0
 8007dfe:	b219      	sxth	r1, r3
 8007e00:	b292      	uxth	r2, r2
 8007e02:	9b08      	ldr	r3, [sp, #32]
 8007e04:	9201      	str	r2, [sp, #4]
 8007e06:	9a03      	ldr	r2, [sp, #12]
 8007e08:	9109      	str	r1, [sp, #36]	; 0x24
 8007e0a:	4403      	add	r3, r0
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	428a      	cmp	r2, r1
 8007e10:	9308      	str	r3, [sp, #32]
 8007e12:	460b      	mov	r3, r1
 8007e14:	dca0      	bgt.n	8007d58 <pool_func_ap_array_f32+0x1b4>
 8007e16:	e77d      	b.n	8007d14 <pool_func_ap_array_f32+0x170>
 8007e18:	7fc00000 	.word	0x7fc00000
 8007e1c:	00000000 	.word	0x00000000
 8007e20:	1a88      	subs	r0, r1, r2
 8007e22:	9906      	ldr	r1, [sp, #24]
 8007e24:	ed1f 6a04 	vldr	s12, [pc, #-16]	; 8007e18 <pool_func_ap_array_f32+0x274>
 8007e28:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007e2c:	1ac9      	subs	r1, r1, r3
 8007e2e:	4252      	negs	r2, r2
 8007e30:	425b      	negs	r3, r3
 8007e32:	b292      	uxth	r2, r2
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	b280      	uxth	r0, r0
 8007e38:	920a      	str	r2, [sp, #40]	; 0x28
 8007e3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e3c:	b28a      	uxth	r2, r1
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9009      	str	r0, [sp, #36]	; 0x24
 8007e42:	9212      	str	r2, [sp, #72]	; 0x48
 8007e44:	930e      	str	r3, [sp, #56]	; 0x38
 8007e46:	9a02      	ldr	r2, [sp, #8]
 8007e48:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8007e4c:	fb02 f303 	mul.w	r3, r2, r3
 8007e50:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8007e54:	920d      	str	r2, [sp, #52]	; 0x34
 8007e56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e58:	9311      	str	r3, [sp, #68]	; 0x44
 8007e5a:	9206      	str	r2, [sp, #24]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e60:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e62:	9208      	str	r2, [sp, #32]
 8007e64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e66:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
 8007e6a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8007e6e:	4413      	add	r3, r2
 8007e70:	fb09 f303 	mul.w	r3, r9, r3
 8007e74:	f04f 0800 	mov.w	r8, #0
 8007e78:	930c      	str	r3, [sp, #48]	; 0x30
 8007e7a:	4646      	mov	r6, r8
 8007e7c:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8007e80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007e82:	4571      	cmp	r1, lr
 8007e84:	da6b      	bge.n	8007f5e <pool_func_ap_array_f32+0x3ba>
 8007e86:	2300      	movs	r3, #0
 8007e88:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8007e8c:	ed1f 7a1d 	vldr	s14, [pc, #-116]	; 8007e1c <pool_func_ap_array_f32+0x278>
 8007e90:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8007e94:	9301      	str	r3, [sp, #4]
 8007e96:	45a4      	cmp	ip, r4
 8007e98:	da21      	bge.n	8007ede <pool_func_ap_array_f32+0x33a>
 8007e9a:	2900      	cmp	r1, #0
 8007e9c:	fb0a f501 	mul.w	r5, sl, r1
 8007ea0:	db1d      	blt.n	8007ede <pool_func_ap_array_f32+0x33a>
 8007ea2:	4541      	cmp	r1, r8
 8007ea4:	da1b      	bge.n	8007ede <pool_func_ap_array_f32+0x33a>
 8007ea6:	f1bc 0f00 	cmp.w	ip, #0
 8007eaa:	4663      	mov	r3, ip
 8007eac:	da05      	bge.n	8007eba <pool_func_ap_array_f32+0x316>
 8007eae:	3301      	adds	r3, #1
 8007eb0:	b21b      	sxth	r3, r3
 8007eb2:	429f      	cmp	r7, r3
 8007eb4:	dcfb      	bgt.n	8007eae <pool_func_ap_array_f32+0x30a>
 8007eb6:	42a3      	cmp	r3, r4
 8007eb8:	da11      	bge.n	8007ede <pool_func_ap_array_f32+0x33a>
 8007eba:	18ea      	adds	r2, r5, r3
 8007ebc:	1c58      	adds	r0, r3, #1
 8007ebe:	fb09 6202 	mla	r2, r9, r2, r6
 8007ec2:	459a      	cmp	sl, r3
 8007ec4:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8007ec8:	b203      	sxth	r3, r0
 8007eca:	dd06      	ble.n	8007eda <pool_func_ap_array_f32+0x336>
 8007ecc:	edd2 7a00 	vldr	s15, [r2]
 8007ed0:	9a01      	ldr	r2, [sp, #4]
 8007ed2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ed6:	3201      	adds	r2, #1
 8007ed8:	9201      	str	r2, [sp, #4]
 8007eda:	42a3      	cmp	r3, r4
 8007edc:	dbed      	blt.n	8007eba <pool_func_ap_array_f32+0x316>
 8007ede:	3101      	adds	r1, #1
 8007ee0:	b209      	sxth	r1, r1
 8007ee2:	4571      	cmp	r1, lr
 8007ee4:	dbd7      	blt.n	8007e96 <pool_func_ap_array_f32+0x2f2>
 8007ee6:	eddd 7a01 	vldr	s15, [sp, #4]
 8007eea:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8007eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ef2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ef8:	9a04      	ldr	r2, [sp, #16]
 8007efa:	f108 0801 	add.w	r8, r8, #1
 8007efe:	4433      	add	r3, r6
 8007f00:	fa0f f888 	sxth.w	r8, r8
 8007f04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f08:	45c8      	cmp	r8, r9
 8007f0a:	4646      	mov	r6, r8
 8007f0c:	edc3 6a00 	vstr	s13, [r3]
 8007f10:	dbb6      	blt.n	8007e80 <pool_func_ap_array_f32+0x2dc>
 8007f12:	e9dd 2006 	ldrd	r2, r0, [sp, #24]
 8007f16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f18:	4402      	add	r2, r0
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	b219      	sxth	r1, r3
 8007f1e:	b292      	uxth	r2, r2
 8007f20:	9b08      	ldr	r3, [sp, #32]
 8007f22:	9206      	str	r2, [sp, #24]
 8007f24:	9a02      	ldr	r2, [sp, #8]
 8007f26:	910f      	str	r1, [sp, #60]	; 0x3c
 8007f28:	4403      	add	r3, r0
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	428a      	cmp	r2, r1
 8007f2e:	9308      	str	r3, [sp, #32]
 8007f30:	460b      	mov	r3, r1
 8007f32:	dc97      	bgt.n	8007e64 <pool_func_ap_array_f32+0x2c0>
 8007f34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f38:	9805      	ldr	r0, [sp, #20]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	4402      	add	r2, r0
 8007f3e:	b219      	sxth	r1, r3
 8007f40:	b292      	uxth	r2, r2
 8007f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f44:	9209      	str	r2, [sp, #36]	; 0x24
 8007f46:	9a03      	ldr	r2, [sp, #12]
 8007f48:	910e      	str	r1, [sp, #56]	; 0x38
 8007f4a:	4403      	add	r3, r0
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	428a      	cmp	r2, r1
 8007f50:	930a      	str	r3, [sp, #40]	; 0x28
 8007f52:	460b      	mov	r3, r1
 8007f54:	f73f af77 	bgt.w	8007e46 <pool_func_ap_array_f32+0x2a2>
 8007f58:	b015      	add	sp, #84	; 0x54
 8007f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5e:	eef0 6a46 	vmov.f32	s13, s12
 8007f62:	e7c8      	b.n	8007ef6 <pool_func_ap_array_f32+0x352>
 8007f64:	eef0 6a46 	vmov.f32	s13, s12
 8007f68:	e731      	b.n	8007dce <pool_func_ap_array_f32+0x22a>
 8007f6a:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 8007f6e:	ea4f 0789 	mov.w	r7, r9, lsl #2
 8007f72:	9409      	str	r4, [sp, #36]	; 0x24
 8007f74:	9a02      	ldr	r2, [sp, #8]
 8007f76:	f8dd b018 	ldr.w	fp, [sp, #24]
 8007f7a:	fb03 f302 	mul.w	r3, r3, r2
 8007f7e:	930c      	str	r3, [sp, #48]	; 0x30
 8007f80:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8007f84:	930d      	str	r3, [sp, #52]	; 0x34
 8007f86:	2000      	movs	r0, #0
 8007f88:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8007f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8007f8e:	4686      	mov	lr, r0
 8007f90:	4603      	mov	r3, r0
 8007f92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f94:	4413      	add	r3, r2
 8007f96:	fb09 f303 	mul.w	r3, r9, r3
 8007f9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f9c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007fa0:	1a1b      	subs	r3, r3, r0
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	2600      	movs	r6, #0
 8007fa6:	930e      	str	r3, [sp, #56]	; 0x38
 8007fa8:	fa0f fa80 	sxth.w	sl, r0
 8007fac:	fa0f f48b 	sxth.w	r4, fp
 8007fb0:	4635      	mov	r5, r6
 8007fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	da55      	bge.n	8008066 <pool_func_ap_array_f32+0x4c2>
 8007fba:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8007e1c <pool_func_ap_array_f32+0x278>
 8007fbe:	4698      	mov	r8, r3
 8007fc0:	f04f 0c00 	mov.w	ip, #0
 8007fc4:	45a2      	cmp	sl, r4
 8007fc6:	da15      	bge.n	8007ff4 <pool_func_ap_array_f32+0x450>
 8007fc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007fcc:	fb03 a308 	mla	r3, r3, r8, sl
 8007fd0:	fb09 5303 	mla	r3, r9, r3, r5
 8007fd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007fd8:	4652      	mov	r2, sl
 8007fda:	3201      	adds	r2, #1
 8007fdc:	ed93 7a00 	vldr	s14, [r3]
 8007fe0:	b211      	sxth	r1, r2
 8007fe2:	42a1      	cmp	r1, r4
 8007fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007fe8:	443b      	add	r3, r7
 8007fea:	dbf6      	blt.n	8007fda <pool_func_ap_array_f32+0x436>
 8007fec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fee:	f10c 0c01 	add.w	ip, ip, #1
 8007ff2:	449c      	add	ip, r3
 8007ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ff6:	f108 0801 	add.w	r8, r8, #1
 8007ffa:	fa0f f888 	sxth.w	r8, r8
 8007ffe:	4598      	cmp	r8, r3
 8008000:	dbe0      	blt.n	8007fc4 <pool_func_ap_array_f32+0x420>
 8008002:	ee07 ca10 	vmov	s14, ip
 8008006:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800800a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800800e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008010:	9a04      	ldr	r2, [sp, #16]
 8008012:	3601      	adds	r6, #1
 8008014:	442b      	add	r3, r5
 8008016:	b236      	sxth	r6, r6
 8008018:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800801c:	454e      	cmp	r6, r9
 800801e:	4635      	mov	r5, r6
 8008020:	edc3 6a00 	vstr	s13, [r3]
 8008024:	dbc5      	blt.n	8007fb2 <pool_func_ap_array_f32+0x40e>
 8008026:	9b07      	ldr	r3, [sp, #28]
 8008028:	9a02      	ldr	r2, [sp, #8]
 800802a:	f10e 0e01 	add.w	lr, lr, #1
 800802e:	fa0f fe8e 	sxth.w	lr, lr
 8008032:	449b      	add	fp, r3
 8008034:	4418      	add	r0, r3
 8008036:	4572      	cmp	r2, lr
 8008038:	fa1f fb8b 	uxth.w	fp, fp
 800803c:	b280      	uxth	r0, r0
 800803e:	4673      	mov	r3, lr
 8008040:	dca7      	bgt.n	8007f92 <pool_func_ap_array_f32+0x3ee>
 8008042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008044:	9a01      	ldr	r2, [sp, #4]
 8008046:	9805      	ldr	r0, [sp, #20]
 8008048:	3301      	adds	r3, #1
 800804a:	4402      	add	r2, r0
 800804c:	b219      	sxth	r1, r3
 800804e:	b292      	uxth	r2, r2
 8008050:	9b08      	ldr	r3, [sp, #32]
 8008052:	9201      	str	r2, [sp, #4]
 8008054:	9a03      	ldr	r2, [sp, #12]
 8008056:	9109      	str	r1, [sp, #36]	; 0x24
 8008058:	4403      	add	r3, r0
 800805a:	b29b      	uxth	r3, r3
 800805c:	428a      	cmp	r2, r1
 800805e:	9308      	str	r3, [sp, #32]
 8008060:	460b      	mov	r3, r1
 8008062:	dc87      	bgt.n	8007f74 <pool_func_ap_array_f32+0x3d0>
 8008064:	e656      	b.n	8007d14 <pool_func_ap_array_f32+0x170>
 8008066:	eef0 6a46 	vmov.f32	s13, s12
 800806a:	e7d0      	b.n	800800e <pool_func_ap_array_f32+0x46a>

0800806c <nl_func_relu_array_f32>:
 800806c:	b430      	push	{r4, r5}
 800806e:	698c      	ldr	r4, [r1, #24]
 8008070:	6981      	ldr	r1, [r0, #24]
 8008072:	68a5      	ldr	r5, [r4, #8]
 8008074:	6889      	ldr	r1, [r1, #8]
 8008076:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800807a:	3a01      	subs	r2, #1
 800807c:	0093      	lsls	r3, r2, #2
 800807e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8008082:	4295      	cmp	r5, r2
 8008084:	d814      	bhi.n	80080b0 <nl_func_relu_array_f32+0x44>
 8008086:	1d18      	adds	r0, r3, #4
 8008088:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80080b4 <nl_func_relu_array_f32+0x48>
 800808c:	1d13      	adds	r3, r2, #4
 800808e:	4401      	add	r1, r0
 8008090:	461a      	mov	r2, r3
 8008092:	ed73 7a01 	vldmdb	r3!, {s15}
 8008096:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800809a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809e:	bfb8      	it	lt
 80080a0:	eef0 7a47 	vmovlt.f32	s15, s14
 80080a4:	ed61 7a01 	vstmdb	r1!, {s15}
 80080a8:	68a0      	ldr	r0, [r4, #8]
 80080aa:	3a08      	subs	r2, #8
 80080ac:	4290      	cmp	r0, r2
 80080ae:	d9ef      	bls.n	8008090 <nl_func_relu_array_f32+0x24>
 80080b0:	bc30      	pop	{r4, r5}
 80080b2:	4770      	bx	lr
 80080b4:	00000000 	.word	0x00000000

080080b8 <forward_sm>:
 80080b8:	6982      	ldr	r2, [r0, #24]
 80080ba:	8813      	ldrh	r3, [r2, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d07c      	beq.n	80081ba <forward_sm+0x102>
 80080c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	ed2d 8b04 	vpush	{d8-d9}
 80080c8:	6852      	ldr	r2, [r2, #4]
 80080ca:	6854      	ldr	r4, [r2, #4]
 80080cc:	b085      	sub	sp, #20
 80080ce:	b104      	cbz	r4, 80080d2 <forward_sm+0x1a>
 80080d0:	6824      	ldr	r4, [r4, #0]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d076      	beq.n	80081c4 <forward_sm+0x10c>
 80080d6:	6913      	ldr	r3, [r2, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d076      	beq.n	80081ca <forward_sm+0x112>
 80080dc:	681e      	ldr	r6, [r3, #0]
 80080de:	68a3      	ldr	r3, [r4, #8]
 80080e0:	68e0      	ldr	r0, [r4, #12]
 80080e2:	68f2      	ldr	r2, [r6, #12]
 80080e4:	6845      	ldr	r5, [r0, #4]
 80080e6:	6857      	ldr	r7, [r2, #4]
 80080e8:	0a1b      	lsrs	r3, r3, #8
 80080ea:	d068      	beq.n	80081be <forward_sm+0x106>
 80080ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80080f0:	2201      	movs	r2, #1
 80080f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080f6:	4298      	cmp	r0, r3
 80080f8:	fb01 f202 	mul.w	r2, r1, r2
 80080fc:	d1f9      	bne.n	80080f2 <forward_sm+0x3a>
 80080fe:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8008102:	69a2      	ldr	r2, [r4, #24]
 8008104:	69b3      	ldr	r3, [r6, #24]
 8008106:	6892      	ldr	r2, [r2, #8]
 8008108:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800810c:	eb02 0309 	add.w	r3, r2, r9
 8008110:	429a      	cmp	r2, r3
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	d24c      	bcs.n	80081b0 <forward_sm+0xf8>
 8008116:	00bb      	lsls	r3, r7, #2
 8008118:	9303      	str	r3, [sp, #12]
 800811a:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800811e:	00ab      	lsls	r3, r5, #2
 8008120:	2d01      	cmp	r5, #1
 8008122:	ed92 8a00 	vldr	s16, [r2]
 8008126:	9302      	str	r3, [sp, #8]
 8008128:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800812c:	463e      	mov	r6, r7
 800812e:	d93c      	bls.n	80081aa <forward_sm+0xf2>
 8008130:	1d13      	adds	r3, r2, #4
 8008132:	ecf3 7a01 	vldmia	r3!, {s15}
 8008136:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800813a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800813e:	bfb8      	it	lt
 8008140:	eeb0 8a67 	vmovlt.f32	s16, s15
 8008144:	429e      	cmp	r6, r3
 8008146:	d1f4      	bne.n	8008132 <forward_sm+0x7a>
 8008148:	eddf 8a21 	vldr	s17, [pc, #132]	; 80081d0 <forward_sm+0x118>
 800814c:	4692      	mov	sl, r2
 800814e:	46c3      	mov	fp, r8
 8008150:	46c1      	mov	r9, r8
 8008152:	2400      	movs	r4, #0
 8008154:	ecba 0a01 	vldmia	sl!, {s0}
 8008158:	ee30 0a48 	vsub.f32	s0, s0, s16
 800815c:	f005 fdd0 	bl	800dd00 <expf>
 8008160:	3401      	adds	r4, #1
 8008162:	42a5      	cmp	r5, r4
 8008164:	ee78 8a80 	vadd.f32	s17, s17, s0
 8008168:	eca9 0a01 	vstmia	r9!, {s0}
 800816c:	d8f2      	bhi.n	8008154 <forward_sm+0x9c>
 800816e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008176:	d00b      	beq.n	8008190 <forward_sm+0xd8>
 8008178:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800817c:	2300      	movs	r3, #0
 800817e:	3301      	adds	r3, #1
 8008180:	429d      	cmp	r5, r3
 8008182:	eddb 7a00 	vldr	s15, [fp]
 8008186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800818a:	eceb 7a01 	vstmia	fp!, {s15}
 800818e:	d8f6      	bhi.n	800817e <forward_sm+0xc6>
 8008190:	9b03      	ldr	r3, [sp, #12]
 8008192:	9901      	ldr	r1, [sp, #4]
 8008194:	4498      	add	r8, r3
 8008196:	9b02      	ldr	r3, [sp, #8]
 8008198:	42b9      	cmp	r1, r7
 800819a:	463a      	mov	r2, r7
 800819c:	441e      	add	r6, r3
 800819e:	d907      	bls.n	80081b0 <forward_sm+0xf8>
 80081a0:	2d01      	cmp	r5, #1
 80081a2:	ed92 8a00 	vldr	s16, [r2]
 80081a6:	441f      	add	r7, r3
 80081a8:	d8c2      	bhi.n	8008130 <forward_sm+0x78>
 80081aa:	2d00      	cmp	r5, #0
 80081ac:	d0f0      	beq.n	8008190 <forward_sm+0xd8>
 80081ae:	e7cb      	b.n	8008148 <forward_sm+0x90>
 80081b0:	b005      	add	sp, #20
 80081b2:	ecbd 8b04 	vpop	{d8-d9}
 80081b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	deff      	udf	#255	; 0xff
 80081be:	f04f 0904 	mov.w	r9, #4
 80081c2:	e79e      	b.n	8008102 <forward_sm+0x4a>
 80081c4:	2300      	movs	r3, #0
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	deff      	udf	#255	; 0xff
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	deff      	udf	#255	; 0xff
 80081ce:	bf00      	nop
 80081d0:	00000000 	.word	0x00000000

080081d4 <forward_upsample>:
 80081d4:	6983      	ldr	r3, [r0, #24]
 80081d6:	881a      	ldrh	r2, [r3, #0]
 80081d8:	2a00      	cmp	r2, #0
 80081da:	f000 80f1 	beq.w	80083c0 <forward_upsample+0x1ec>
 80081de:	6859      	ldr	r1, [r3, #4]
 80081e0:	684b      	ldr	r3, [r1, #4]
 80081e2:	b103      	cbz	r3, 80081e6 <forward_upsample+0x12>
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2a01      	cmp	r2, #1
 80081e8:	f000 81b0 	beq.w	800854c <forward_upsample+0x378>
 80081ec:	690a      	ldr	r2, [r1, #16]
 80081ee:	2a00      	cmp	r2, #0
 80081f0:	f000 81af 	beq.w	8008552 <forward_upsample+0x37e>
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	ed2d 8b04 	vpush	{d8-d9}
 80081fc:	f8d2 9000 	ldr.w	r9, [r2]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	68d1      	ldr	r1, [r2, #12]
 8008206:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800820a:	6a03      	ldr	r3, [r0, #32]
 800820c:	6895      	ldr	r5, [r2, #8]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	b087      	sub	sp, #28
 8008212:	edd3 8a00 	vldr	s17, [r3]
 8008216:	edd3 7a01 	vldr	s15, [r3, #4]
 800821a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800821e:	9104      	str	r1, [sp, #16]
 8008220:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8008224:	689c      	ldr	r4, [r3, #8]
 8008226:	7f03      	ldrb	r3, [r0, #28]
 8008228:	9503      	str	r5, [sp, #12]
 800822a:	6855      	ldr	r5, [r2, #4]
 800822c:	68ca      	ldr	r2, [r1, #12]
 800822e:	688f      	ldr	r7, [r1, #8]
 8008230:	9202      	str	r2, [sp, #8]
 8008232:	2b03      	cmp	r3, #3
 8008234:	f200 80bf 	bhi.w	80083b6 <forward_upsample+0x1e2>
 8008238:	e8df f013 	tbh	[pc, r3, lsl #1]
 800823c:	00c5011e 	.word	0x00c5011e
 8008240:	00c40004 	.word	0x00c40004
 8008244:	7f43      	ldrb	r3, [r0, #29]
 8008246:	2b00      	cmp	r3, #0
 8008248:	f040 8173 	bne.w	8008532 <forward_upsample+0x35e>
 800824c:	eddf 0ac2 	vldr	s1, [pc, #776]	; 8008558 <forward_upsample+0x384>
 8008250:	eeb0 2a60 	vmov.f32	s4, s1
 8008254:	9b02      	ldr	r3, [sp, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 80ad 	beq.w	80083b6 <forward_upsample+0x1e2>
 800825c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8008260:	ee83 0a28 	vdiv.f32	s0, s6, s17
 8008264:	9b04      	ldr	r3, [sp, #16]
 8008266:	3b01      	subs	r3, #1
 8008268:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 800826c:	eec3 1a27 	vdiv.f32	s3, s6, s15
 8008270:	ee01 3a10 	vmov	s2, r3
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	eddf 2ab8 	vldr	s5, [pc, #736]	; 8008558 <forward_upsample+0x384>
 800827a:	1e5a      	subs	r2, r3, #1
 800827c:	ee03 2a90 	vmov	s7, r2
 8008280:	fb05 f303 	mul.w	r3, r5, r3
 8008284:	9304      	str	r3, [sp, #16]
 8008286:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 800828a:	2300      	movs	r3, #0
 800828c:	eef8 3a63 	vcvt.f32.u32	s7, s7
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	eddd 7a01 	vldr	s15, [sp, #4]
 8008296:	9b04      	ldr	r3, [sp, #16]
 8008298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80082a0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80082a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ac:	bfb8      	it	lt
 80082ae:	eef0 7a62 	vmovlt.f32	s15, s5
 80082b2:	eef4 7ac1 	vcmpe.f32	s15, s2
 80082b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ba:	bf88      	it	hi
 80082bc:	eef0 7a41 	vmovhi.f32	s15, s2
 80082c0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80082c4:	eef4 7a41 	vcmp.f32	s15, s2
 80082c8:	eeb8 4a47 	vcvt.f32.u32	s8, s14
 80082cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d0:	ee37 8ac4 	vsub.f32	s16, s15, s8
 80082d4:	bf14      	ite	ne
 80082d6:	469a      	movne	sl, r3
 80082d8:	f04f 0a00 	moveq.w	sl, #0
 80082dc:	2f00      	cmp	r7, #0
 80082de:	d063      	beq.n	80083a8 <forward_upsample+0x1d4>
 80082e0:	ee73 7a67 	vsub.f32	s15, s6, s15
 80082e4:	ee17 2a10 	vmov	r2, s14
 80082e8:	9b03      	ldr	r3, [sp, #12]
 80082ea:	ee37 4a84 	vadd.f32	s8, s15, s8
 80082ee:	fb03 f902 	mul.w	r9, r3, r2
 80082f2:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 80082f6:	f04f 0c00 	mov.w	ip, #0
 80082fa:	ee07 ca90 	vmov	s15, ip
 80082fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008302:	ee37 7a42 	vsub.f32	s14, s14, s4
 8008306:	ee27 7a21 	vmul.f32	s14, s14, s3
 800830a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800830e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008312:	bfb8      	it	lt
 8008314:	eeb0 7a62 	vmovlt.f32	s14, s5
 8008318:	eeb4 7ae3 	vcmpe.f32	s14, s7
 800831c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008320:	bf88      	it	hi
 8008322:	eeb0 7a63 	vmovhi.f32	s14, s7
 8008326:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800832a:	ee73 5a47 	vsub.f32	s11, s6, s14
 800832e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008332:	eeb4 7a63 	vcmp.f32	s14, s7
 8008336:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800833a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800833e:	ee17 3a90 	vmov	r3, s15
 8008342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008346:	ee25 5a84 	vmul.f32	s10, s11, s8
 800834a:	ee67 4a04 	vmul.f32	s9, s14, s8
 800834e:	ee65 5a88 	vmul.f32	s11, s11, s16
 8008352:	ee28 7a07 	vmul.f32	s14, s16, s14
 8008356:	bf14      	ite	ne
 8008358:	462a      	movne	r2, r5
 800835a:	2200      	moveq	r2, #0
 800835c:	444b      	add	r3, r9
 800835e:	b1fd      	cbz	r5, 80083a0 <forward_upsample+0x1cc>
 8008360:	fb0e 8303 	mla	r3, lr, r3, r8
 8008364:	eb02 010a 	add.w	r1, r2, sl
 8008368:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800836c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008370:	eb03 000b 	add.w	r0, r3, fp
 8008374:	eb04 060e 	add.w	r6, r4, lr
 8008378:	ecf2 7a01 	vldmia	r2!, {s15}
 800837c:	ecf3 6a01 	vldmia	r3!, {s13}
 8008380:	ecb0 6a01 	vldmia	r0!, {s12}
 8008384:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8008388:	eee6 7a85 	vfma.f32	s15, s13, s10
 800838c:	ecf1 6a01 	vldmia	r1!, {s13}
 8008390:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008394:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008398:	ece4 7a01 	vstmia	r4!, {s15}
 800839c:	42b4      	cmp	r4, r6
 800839e:	d1eb      	bne.n	8008378 <forward_upsample+0x1a4>
 80083a0:	f10c 0c01 	add.w	ip, ip, #1
 80083a4:	4567      	cmp	r7, ip
 80083a6:	d1a8      	bne.n	80082fa <forward_upsample+0x126>
 80083a8:	9b01      	ldr	r3, [sp, #4]
 80083aa:	9a02      	ldr	r2, [sp, #8]
 80083ac:	3301      	adds	r3, #1
 80083ae:	429a      	cmp	r2, r3
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	f47f af6e 	bne.w	8008292 <forward_upsample+0xbe>
 80083b6:	b007      	add	sp, #28
 80083b8:	ecbd 8b04 	vpop	{d8-d9}
 80083bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c0:	6853      	ldr	r3, [r2, #4]
 80083c2:	deff      	udf	#255	; 0xff
 80083c4:	e7fe      	b.n	80083c4 <forward_upsample+0x1f0>
 80083c6:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80083ca:	2a03      	cmp	r2, #3
 80083cc:	bf97      	itett	ls
 80083ce:	4b63      	ldrls	r3, [pc, #396]	; (800855c <forward_upsample+0x388>)
 80083d0:	ed9f 8a63 	vldrhi	s16, [pc, #396]	; 8008560 <forward_upsample+0x38c>
 80083d4:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 80083d8:	ed93 8a00 	vldrls	s16, [r3]
 80083dc:	9b02      	ldr	r3, [sp, #8]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0e9      	beq.n	80083b6 <forward_upsample+0x1e2>
 80083e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083e6:	ee87 9a28 	vdiv.f32	s18, s14, s17
 80083ea:	00ad      	lsls	r5, r5, #2
 80083ec:	eec7 8a27 	vdiv.f32	s17, s14, s15
 80083f0:	2f00      	cmp	r7, #0
 80083f2:	d0e0      	beq.n	80083b6 <forward_upsample+0x1e2>
 80083f4:	fb07 f305 	mul.w	r3, r7, r5
 80083f8:	9304      	str	r3, [sp, #16]
 80083fa:	2300      	movs	r3, #0
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	4626      	mov	r6, r4
 8008400:	f04f 0b00 	mov.w	fp, #0
 8008404:	eddd 7a01 	vldr	s15, [sp, #4]
 8008408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840c:	eeb0 0a48 	vmov.f32	s0, s16
 8008410:	eea7 0a89 	vfma.f32	s0, s15, s18
 8008414:	f005 fcfc 	bl	800de10 <roundf>
 8008418:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800841c:	9b03      	ldr	r3, [sp, #12]
 800841e:	ee17 aa90 	vmov	sl, s15
 8008422:	fb03 fa0a 	mul.w	sl, r3, sl
 8008426:	ee07 ba90 	vmov	s15, fp
 800842a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842e:	eeb0 0a48 	vmov.f32	s0, s16
 8008432:	eea7 0aa8 	vfma.f32	s0, s15, s17
 8008436:	f005 fceb 	bl	800de10 <roundf>
 800843a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800843e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008442:	ee17 1a90 	vmov	r1, s15
 8008446:	4451      	add	r1, sl
 8008448:	4630      	mov	r0, r6
 800844a:	689a      	ldr	r2, [r3, #8]
 800844c:	f10b 0b01 	add.w	fp, fp, #1
 8008450:	fb05 8101 	mla	r1, r5, r1, r8
 8008454:	f002 f9a5 	bl	800a7a2 <memcpy>
 8008458:	455f      	cmp	r7, fp
 800845a:	442e      	add	r6, r5
 800845c:	d1e3      	bne.n	8008426 <forward_upsample+0x252>
 800845e:	9a04      	ldr	r2, [sp, #16]
 8008460:	9b01      	ldr	r3, [sp, #4]
 8008462:	4414      	add	r4, r2
 8008464:	9a02      	ldr	r2, [sp, #8]
 8008466:	3301      	adds	r3, #1
 8008468:	429a      	cmp	r2, r3
 800846a:	9301      	str	r3, [sp, #4]
 800846c:	d1c7      	bne.n	80083fe <forward_upsample+0x22a>
 800846e:	b007      	add	sp, #28
 8008470:	ecbd 8b04 	vpop	{d8-d9}
 8008474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008478:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800847c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008480:	9a02      	ldr	r2, [sp, #8]
 8008482:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8008486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800848a:	fb07 f202 	mul.w	r2, r7, r2
 800848e:	ee17 aa90 	vmov	sl, s15
 8008492:	fb05 f202 	mul.w	r2, r5, r2
 8008496:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800849a:	0092      	lsls	r2, r2, #2
 800849c:	2100      	movs	r1, #0
 800849e:	4620      	mov	r0, r4
 80084a0:	ee17 6a90 	vmov	r6, s15
 80084a4:	f002 f8ed 	bl	800a682 <memset>
 80084a8:	9b04      	ldr	r3, [sp, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d083      	beq.n	80083b6 <forward_upsample+0x1e2>
 80084ae:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 80084b2:	9903      	ldr	r1, [sp, #12]
 80084b4:	fb0a 5a05 	mla	sl, sl, r5, r5
 80084b8:	fb05 f707 	mul.w	r7, r5, r7
 80084bc:	ee17 3a90 	vmov	r3, s15
 80084c0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80084c4:	00ad      	lsls	r5, r5, #2
 80084c6:	1c72      	adds	r2, r6, #1
 80084c8:	2900      	cmp	r1, #0
 80084ca:	f43f af74 	beq.w	80083b6 <forward_upsample+0x1e2>
 80084ce:	fb07 f303 	mul.w	r3, r7, r3
 80084d2:	fb02 f707 	mul.w	r7, r2, r7
 80084d6:	fb01 f205 	mul.w	r2, r1, r5
 80084da:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	9205      	str	r2, [sp, #20]
 80084e2:	2200      	movs	r2, #0
 80084e4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80084e8:	9303      	str	r3, [sp, #12]
 80084ea:	46c8      	mov	r8, r9
 80084ec:	46b9      	mov	r9, r7
 80084ee:	460f      	mov	r7, r1
 80084f0:	f8dd b004 	ldr.w	fp, [sp, #4]
 80084f4:	2600      	movs	r6, #0
 80084f6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80084fa:	4659      	mov	r1, fp
 80084fc:	4620      	mov	r0, r4
 80084fe:	689a      	ldr	r2, [r3, #8]
 8008500:	3601      	adds	r6, #1
 8008502:	f002 f94e 	bl	800a7a2 <memcpy>
 8008506:	42b7      	cmp	r7, r6
 8008508:	44ab      	add	fp, r5
 800850a:	4454      	add	r4, sl
 800850c:	d1f3      	bne.n	80084f6 <forward_upsample+0x322>
 800850e:	9a01      	ldr	r2, [sp, #4]
 8008510:	9905      	ldr	r1, [sp, #20]
 8008512:	9b02      	ldr	r3, [sp, #8]
 8008514:	440a      	add	r2, r1
 8008516:	9201      	str	r2, [sp, #4]
 8008518:	9a03      	ldr	r2, [sp, #12]
 800851a:	464c      	mov	r4, r9
 800851c:	4491      	add	r9, r2
 800851e:	9a04      	ldr	r2, [sp, #16]
 8008520:	3301      	adds	r3, #1
 8008522:	429a      	cmp	r2, r3
 8008524:	9302      	str	r3, [sp, #8]
 8008526:	d1e3      	bne.n	80084f0 <forward_upsample+0x31c>
 8008528:	b007      	add	sp, #28
 800852a:	ecbd 8b04 	vpop	{d8-d9}
 800852e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008536:	ee78 0ac7 	vsub.f32	s1, s17, s14
 800853a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800853e:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 8008542:	ee60 0a82 	vmul.f32	s1, s1, s4
 8008546:	ee27 2a02 	vmul.f32	s4, s14, s4
 800854a:	e683      	b.n	8008254 <forward_upsample+0x80>
 800854c:	2300      	movs	r3, #0
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	deff      	udf	#255	; 0xff
 8008552:	68d3      	ldr	r3, [r2, #12]
 8008554:	deff      	udf	#255	; 0xff
 8008556:	bf00      	nop
 8008558:	00000000 	.word	0x00000000
 800855c:	0800e490 	.word	0x0800e490
 8008560:	38d1b717 	.word	0x38d1b717

08008564 <ai_check_custom_types>:
 8008564:	b082      	sub	sp, #8
 8008566:	4b13      	ldr	r3, [pc, #76]	; (80085b4 <ai_check_custom_types+0x50>)
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	b118      	cbz	r0, 8008574 <ai_check_custom_types+0x10>
 800856c:	7803      	ldrb	r3, [r0, #0]
 800856e:	2b03      	cmp	r3, #3
 8008570:	d002      	beq.n	8008578 <ai_check_custom_types+0x14>
 8008572:	2000      	movs	r0, #0
 8008574:	b002      	add	sp, #8
 8008576:	4770      	bx	lr
 8008578:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800857c:	4293      	cmp	r3, r2
 800857e:	d004      	beq.n	800858a <ai_check_custom_types+0x26>
 8008580:	2001      	movs	r0, #1
 8008582:	f080 0001 	eor.w	r0, r0, #1
 8008586:	b002      	add	sp, #8
 8008588:	4770      	bx	lr
 800858a:	7842      	ldrb	r2, [r0, #1]
 800858c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008590:	429a      	cmp	r2, r3
 8008592:	f100 0001 	add.w	r0, r0, #1
 8008596:	d1f3      	bne.n	8008580 <ai_check_custom_types+0x1c>
 8008598:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800859c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d1ed      	bne.n	8008580 <ai_check_custom_types+0x1c>
 80085a4:	7842      	ldrb	r2, [r0, #1]
 80085a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d1e8      	bne.n	8008580 <ai_check_custom_types+0x1c>
 80085ae:	2000      	movs	r0, #0
 80085b0:	e7e7      	b.n	8008582 <ai_check_custom_types+0x1e>
 80085b2:	bf00      	nop
 80085b4:	84048403 	.word	0x84048403

080085b8 <ai_layers_init_all>:
 80085b8:	4601      	mov	r1, r0
 80085ba:	2000      	movs	r0, #0
 80085bc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80085be:	b143      	cbz	r3, 80085d2 <ai_layers_init_all+0x1a>
 80085c0:	691a      	ldr	r2, [r3, #16]
 80085c2:	60d9      	str	r1, [r3, #12]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	f100 0001 	add.w	r0, r0, #1
 80085ca:	d002      	beq.n	80085d2 <ai_layers_init_all+0x1a>
 80085cc:	b10a      	cbz	r2, 80085d2 <ai_layers_init_all+0x1a>
 80085ce:	4613      	mov	r3, r2
 80085d0:	e7f5      	b.n	80085be <ai_layers_init_all+0x6>
 80085d2:	4770      	bx	lr

080085d4 <ai_layers_post_init_all>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80085d8:	2500      	movs	r5, #0
 80085da:	b16c      	cbz	r4, 80085f8 <ai_layers_post_init_all+0x24>
 80085dc:	6863      	ldr	r3, [r4, #4]
 80085de:	07db      	lsls	r3, r3, #31
 80085e0:	d504      	bpl.n	80085ec <ai_layers_post_init_all+0x18>
 80085e2:	6a23      	ldr	r3, [r4, #32]
 80085e4:	4620      	mov	r0, r4
 80085e6:	b10b      	cbz	r3, 80085ec <ai_layers_post_init_all+0x18>
 80085e8:	4798      	blx	r3
 80085ea:	3501      	adds	r5, #1
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	42a3      	cmp	r3, r4
 80085f0:	d002      	beq.n	80085f8 <ai_layers_post_init_all+0x24>
 80085f2:	b10b      	cbz	r3, 80085f8 <ai_layers_post_init_all+0x24>
 80085f4:	461c      	mov	r4, r3
 80085f6:	e7f0      	b.n	80085da <ai_layers_post_init_all+0x6>
 80085f8:	4628      	mov	r0, r5
 80085fa:	bd38      	pop	{r3, r4, r5, pc}

080085fc <ai_layers_forward_all>:
 80085fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008600:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8008604:	4604      	mov	r4, r0
 8008606:	f1b8 0f00 	cmp.w	r8, #0
 800860a:	d02b      	beq.n	8008664 <ai_layers_forward_all+0x68>
 800860c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800860e:	6381      	str	r1, [r0, #56]	; 0x38
 8008610:	b321      	cbz	r1, 800865c <ai_layers_forward_all+0x60>
 8008612:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008614:	2001      	movs	r0, #1
 8008616:	47c0      	blx	r8
 8008618:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800861a:	b1fe      	cbz	r6, 800865c <ai_layers_forward_all+0x60>
 800861c:	2700      	movs	r7, #0
 800861e:	4631      	mov	r1, r6
 8008620:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008622:	2002      	movs	r0, #2
 8008624:	47c0      	blx	r8
 8008626:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008628:	4628      	mov	r0, r5
 800862a:	696b      	ldr	r3, [r5, #20]
 800862c:	4798      	blx	r3
 800862e:	692e      	ldr	r6, [r5, #16]
 8008630:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008632:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008634:	42b5      	cmp	r5, r6
 8008636:	f04f 0003 	mov.w	r0, #3
 800863a:	d007      	beq.n	800864c <ai_layers_forward_all+0x50>
 800863c:	47c0      	blx	r8
 800863e:	3701      	adds	r7, #1
 8008640:	63a6      	str	r6, [r4, #56]	; 0x38
 8008642:	2e00      	cmp	r6, #0
 8008644:	d1eb      	bne.n	800861e <ai_layers_forward_all+0x22>
 8008646:	4638      	mov	r0, r7
 8008648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800864c:	2003      	movs	r0, #3
 800864e:	47c0      	blx	r8
 8008650:	2300      	movs	r3, #0
 8008652:	3701      	adds	r7, #1
 8008654:	63a3      	str	r3, [r4, #56]	; 0x38
 8008656:	4638      	mov	r0, r7
 8008658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800865c:	2700      	movs	r7, #0
 800865e:	4638      	mov	r0, r7
 8008660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008664:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008666:	6385      	str	r5, [r0, #56]	; 0x38
 8008668:	2d00      	cmp	r5, #0
 800866a:	d0f7      	beq.n	800865c <ai_layers_forward_all+0x60>
 800866c:	4647      	mov	r7, r8
 800866e:	696b      	ldr	r3, [r5, #20]
 8008670:	4628      	mov	r0, r5
 8008672:	4798      	blx	r3
 8008674:	462b      	mov	r3, r5
 8008676:	692d      	ldr	r5, [r5, #16]
 8008678:	429d      	cmp	r5, r3
 800867a:	d004      	beq.n	8008686 <ai_layers_forward_all+0x8a>
 800867c:	63a5      	str	r5, [r4, #56]	; 0x38
 800867e:	3701      	adds	r7, #1
 8008680:	2d00      	cmp	r5, #0
 8008682:	d1f4      	bne.n	800866e <ai_layers_forward_all+0x72>
 8008684:	e7df      	b.n	8008646 <ai_layers_forward_all+0x4a>
 8008686:	2300      	movs	r3, #0
 8008688:	63a3      	str	r3, [r4, #56]	; 0x38
 800868a:	3701      	adds	r7, #1
 800868c:	e7db      	b.n	8008646 <ai_layers_forward_all+0x4a>
 800868e:	bf00      	nop

08008690 <lite_dense_if32of32wf32>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8008698:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800869c:	4287      	cmp	r7, r0
 800869e:	f240 8106 	bls.w	80088ae <lite_dense_if32of32wf32+0x21e>
 80086a2:	f1a6 0810 	sub.w	r8, r6, #16
 80086a6:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80086aa:	f108 0801 	add.w	r8, r8, #1
 80086ae:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 80086b2:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80086b6:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80086ba:	4605      	mov	r5, r0
 80086bc:	f006 0a0f 	and.w	sl, r6, #15
 80086c0:	2e0f      	cmp	r6, #15
 80086c2:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80088d4 <lite_dense_if32of32wf32+0x244>
 80086c6:	f240 8101 	bls.w	80088cc <lite_dense_if32of32wf32+0x23c>
 80086ca:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80086ce:	f102 0440 	add.w	r4, r2, #64	; 0x40
 80086d2:	46b6      	mov	lr, r6
 80086d4:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 80086d8:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 80086dc:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 80086e0:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 80086e4:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 80086e8:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 80086ec:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 80086f0:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 80086f4:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 80086f8:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 80086fc:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8008700:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8008704:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8008708:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800870c:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8008710:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008714:	f1ae 0e10 	sub.w	lr, lr, #16
 8008718:	f1be 0f0f 	cmp.w	lr, #15
 800871c:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8008720:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8008724:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008728:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800872c:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008730:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8008734:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8008738:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800873c:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8008740:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8008744:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008748:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 800874c:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8008750:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008754:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8008758:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 800875c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008760:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8008764:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8008768:	eee4 7a24 	vfma.f32	s15, s8, s9
 800876c:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8008770:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8008774:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008778:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800877c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8008780:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008784:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8008788:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800878c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008790:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008794:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008798:	eee4 7a24 	vfma.f32	s15, s8, s9
 800879c:	eee5 7a25 	vfma.f32	s15, s10, s11
 80087a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80087a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087a8:	d894      	bhi.n	80086d4 <lite_dense_if32of32wf32+0x44>
 80087aa:	eb02 0e0b 	add.w	lr, r2, fp
 80087ae:	4654      	mov	r4, sl
 80087b0:	46c4      	mov	ip, r8
 80087b2:	2c00      	cmp	r4, #0
 80087b4:	d075      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 80087b6:	eddc 6a00 	vldr	s13, [ip]
 80087ba:	edde 7a00 	vldr	s15, [lr]
 80087be:	2c01      	cmp	r4, #1
 80087c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087c4:	d06d      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 80087c6:	eddc 6a01 	vldr	s13, [ip, #4]
 80087ca:	edde 7a01 	vldr	s15, [lr, #4]
 80087ce:	2c02      	cmp	r4, #2
 80087d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087d4:	d065      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 80087d6:	eddc 6a02 	vldr	s13, [ip, #8]
 80087da:	edde 7a02 	vldr	s15, [lr, #8]
 80087de:	2c03      	cmp	r4, #3
 80087e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087e4:	d05d      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 80087e6:	eddc 6a03 	vldr	s13, [ip, #12]
 80087ea:	edde 7a03 	vldr	s15, [lr, #12]
 80087ee:	2c04      	cmp	r4, #4
 80087f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087f4:	d055      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 80087f6:	eddc 6a04 	vldr	s13, [ip, #16]
 80087fa:	edde 7a04 	vldr	s15, [lr, #16]
 80087fe:	2c05      	cmp	r4, #5
 8008800:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008804:	d04d      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 8008806:	eddc 6a05 	vldr	s13, [ip, #20]
 800880a:	edde 7a05 	vldr	s15, [lr, #20]
 800880e:	2c06      	cmp	r4, #6
 8008810:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008814:	d045      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 8008816:	eddc 6a06 	vldr	s13, [ip, #24]
 800881a:	edde 7a06 	vldr	s15, [lr, #24]
 800881e:	2c07      	cmp	r4, #7
 8008820:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008824:	d03d      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 8008826:	eddc 6a07 	vldr	s13, [ip, #28]
 800882a:	edde 7a07 	vldr	s15, [lr, #28]
 800882e:	2c08      	cmp	r4, #8
 8008830:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008834:	d035      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 8008836:	eddc 6a08 	vldr	s13, [ip, #32]
 800883a:	edde 7a08 	vldr	s15, [lr, #32]
 800883e:	2c09      	cmp	r4, #9
 8008840:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008844:	d02d      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 8008846:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800884a:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800884e:	2c0a      	cmp	r4, #10
 8008850:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008854:	d025      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 8008856:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800885a:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800885e:	2c0b      	cmp	r4, #11
 8008860:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008864:	d01d      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 8008866:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800886a:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800886e:	2c0c      	cmp	r4, #12
 8008870:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008874:	d015      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 8008876:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800887a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800887e:	3c0d      	subs	r4, #13
 8008880:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008884:	d00d      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 8008886:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800888a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800888e:	2c01      	cmp	r4, #1
 8008890:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008894:	d005      	beq.n	80088a2 <lite_dense_if32of32wf32+0x212>
 8008896:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800889a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800889e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088a2:	444a      	add	r2, r9
 80088a4:	eca5 7a01 	vstmia	r5!, {s14}
 80088a8:	42af      	cmp	r7, r5
 80088aa:	f63f af09 	bhi.w	80086c0 <lite_dense_if32of32wf32+0x30>
 80088ae:	b15b      	cbz	r3, 80088c8 <lite_dense_if32of32wf32+0x238>
 80088b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088b2:	b14a      	cbz	r2, 80088c8 <lite_dense_if32of32wf32+0x238>
 80088b4:	edd0 7a00 	vldr	s15, [r0]
 80088b8:	ecb3 7a01 	vldmia	r3!, {s14}
 80088bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80088c0:	ece0 7a01 	vstmia	r0!, {s15}
 80088c4:	4287      	cmp	r7, r0
 80088c6:	d1f5      	bne.n	80088b4 <lite_dense_if32of32wf32+0x224>
 80088c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088cc:	4634      	mov	r4, r6
 80088ce:	4696      	mov	lr, r2
 80088d0:	468c      	mov	ip, r1
 80088d2:	e76e      	b.n	80087b2 <lite_dense_if32of32wf32+0x122>
 80088d4:	00000000 	.word	0x00000000

080088d8 <ai_version_get>:
 80088d8:	0212      	lsls	r2, r2, #8
 80088da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80088de:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80088e2:	4770      	bx	lr

080088e4 <get_tensor_byte_size>:
 80088e4:	b410      	push	{r4}
 80088e6:	6983      	ldr	r3, [r0, #24]
 80088e8:	68c4      	ldr	r4, [r0, #12]
 80088ea:	6941      	ldr	r1, [r0, #20]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68e0      	ldr	r0, [r4, #12]
 80088f0:	4a07      	ldr	r2, [pc, #28]	; (8008910 <get_tensor_byte_size+0x2c>)
 80088f2:	68c9      	ldr	r1, [r1, #12]
 80088f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088f8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80088fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008900:	fb01 f000 	mul.w	r0, r1, r0
 8008904:	4293      	cmp	r3, r2
 8008906:	bf04      	itt	eq
 8008908:	3007      	addeq	r0, #7
 800890a:	08c0      	lsreq	r0, r0, #3
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	000400c0 	.word	0x000400c0

08008914 <ai_array_to_buffer_fmt>:
 8008914:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008918:	2b02      	cmp	r3, #2
 800891a:	d050      	beq.n	80089be <ai_array_to_buffer_fmt+0xaa>
 800891c:	4b2a      	ldr	r3, [pc, #168]	; (80089c8 <ai_array_to_buffer_fmt+0xb4>)
 800891e:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8008922:	429a      	cmp	r2, r3
 8008924:	d00b      	beq.n	800893e <ai_array_to_buffer_fmt+0x2a>
 8008926:	dc1c      	bgt.n	8008962 <ai_array_to_buffer_fmt+0x4e>
 8008928:	4b28      	ldr	r3, [pc, #160]	; (80089cc <ai_array_to_buffer_fmt+0xb8>)
 800892a:	429a      	cmp	r2, r3
 800892c:	d007      	beq.n	800893e <ai_array_to_buffer_fmt+0x2a>
 800892e:	dd0b      	ble.n	8008948 <ai_array_to_buffer_fmt+0x34>
 8008930:	4b27      	ldr	r3, [pc, #156]	; (80089d0 <ai_array_to_buffer_fmt+0xbc>)
 8008932:	429a      	cmp	r2, r3
 8008934:	d003      	beq.n	800893e <ai_array_to_buffer_fmt+0x2a>
 8008936:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800893a:	429a      	cmp	r2, r3
 800893c:	d131      	bne.n	80089a2 <ai_array_to_buffer_fmt+0x8e>
 800893e:	4613      	mov	r3, r2
 8008940:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008944:	4318      	orrs	r0, r3
 8008946:	4770      	bx	lr
 8008948:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800894c:	429a      	cmp	r2, r3
 800894e:	d0f6      	beq.n	800893e <ai_array_to_buffer_fmt+0x2a>
 8008950:	dd2c      	ble.n	80089ac <ai_array_to_buffer_fmt+0x98>
 8008952:	4b20      	ldr	r3, [pc, #128]	; (80089d4 <ai_array_to_buffer_fmt+0xc0>)
 8008954:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008958:	429a      	cmp	r2, r3
 800895a:	bf18      	it	ne
 800895c:	2340      	movne	r3, #64	; 0x40
 800895e:	4318      	orrs	r0, r3
 8008960:	4770      	bx	lr
 8008962:	4b1d      	ldr	r3, [pc, #116]	; (80089d8 <ai_array_to_buffer_fmt+0xc4>)
 8008964:	429a      	cmp	r2, r3
 8008966:	d0ea      	beq.n	800893e <ai_array_to_buffer_fmt+0x2a>
 8008968:	dd0e      	ble.n	8008988 <ai_array_to_buffer_fmt+0x74>
 800896a:	4b1c      	ldr	r3, [pc, #112]	; (80089dc <ai_array_to_buffer_fmt+0xc8>)
 800896c:	429a      	cmp	r2, r3
 800896e:	d0e6      	beq.n	800893e <ai_array_to_buffer_fmt+0x2a>
 8008970:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8008974:	429a      	cmp	r2, r3
 8008976:	d0e2      	beq.n	800893e <ai_array_to_buffer_fmt+0x2a>
 8008978:	4b19      	ldr	r3, [pc, #100]	; (80089e0 <ai_array_to_buffer_fmt+0xcc>)
 800897a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800897e:	429a      	cmp	r2, r3
 8008980:	bf18      	it	ne
 8008982:	2340      	movne	r3, #64	; 0x40
 8008984:	4318      	orrs	r0, r3
 8008986:	4770      	bx	lr
 8008988:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800898c:	429a      	cmp	r2, r3
 800898e:	d0d6      	beq.n	800893e <ai_array_to_buffer_fmt+0x2a>
 8008990:	3307      	adds	r3, #7
 8008992:	429a      	cmp	r2, r3
 8008994:	d0d3      	beq.n	800893e <ai_array_to_buffer_fmt+0x2a>
 8008996:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800899a:	429a      	cmp	r2, r3
 800899c:	bf18      	it	ne
 800899e:	2340      	movne	r3, #64	; 0x40
 80089a0:	e7ce      	b.n	8008940 <ai_array_to_buffer_fmt+0x2c>
 80089a2:	4b10      	ldr	r3, [pc, #64]	; (80089e4 <ai_array_to_buffer_fmt+0xd0>)
 80089a4:	429a      	cmp	r2, r3
 80089a6:	bf18      	it	ne
 80089a8:	2340      	movne	r3, #64	; 0x40
 80089aa:	e7c9      	b.n	8008940 <ai_array_to_buffer_fmt+0x2c>
 80089ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d0c4      	beq.n	800893e <ai_array_to_buffer_fmt+0x2a>
 80089b4:	3380      	adds	r3, #128	; 0x80
 80089b6:	429a      	cmp	r2, r3
 80089b8:	bf18      	it	ne
 80089ba:	2340      	movne	r3, #64	; 0x40
 80089bc:	e7c0      	b.n	8008940 <ai_array_to_buffer_fmt+0x2c>
 80089be:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <ai_array_to_buffer_fmt+0xd4>)
 80089c0:	4003      	ands	r3, r0
 80089c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089c6:	e7bb      	b.n	8008940 <ai_array_to_buffer_fmt+0x2c>
 80089c8:	00840040 	.word	0x00840040
 80089cc:	00040840 	.word	0x00040840
 80089d0:	00041040 	.word	0x00041040
 80089d4:	00040447 	.word	0x00040447
 80089d8:	00840840 	.word	0x00840840
 80089dc:	00841040 	.word	0x00841040
 80089e0:	0084084f 	.word	0x0084084f
 80089e4:	0004084f 	.word	0x0004084f
 80089e8:	00803fff 	.word	0x00803fff

080089ec <ai_array_get_byte_size>:
 80089ec:	b319      	cbz	r1, 8008a36 <ai_array_get_byte_size+0x4a>
 80089ee:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80089f2:	fb03 f101 	mul.w	r1, r3, r1
 80089f6:	3107      	adds	r1, #7
 80089f8:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80089fc:	f021 0307 	bic.w	r3, r1, #7
 8008a00:	2a04      	cmp	r2, #4
 8008a02:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8008a06:	fa23 f101 	lsr.w	r1, r3, r1
 8008a0a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8008a0e:	d00b      	beq.n	8008a28 <ai_array_get_byte_size+0x3c>
 8008a10:	2a08      	cmp	r2, #8
 8008a12:	d002      	beq.n	8008a1a <ai_array_get_byte_size+0x2e>
 8008a14:	3107      	adds	r1, #7
 8008a16:	08c8      	lsrs	r0, r1, #3
 8008a18:	4770      	bx	lr
 8008a1a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008a1e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8008a22:	3107      	adds	r1, #7
 8008a24:	08c8      	lsrs	r0, r1, #3
 8008a26:	4770      	bx	lr
 8008a28:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008a2c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008a30:	3107      	adds	r1, #7
 8008a32:	08c8      	lsrs	r0, r1, #3
 8008a34:	4770      	bx	lr
 8008a36:	4608      	mov	r0, r1
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop

08008a3c <ai_array_get_data_byte_size>:
 8008a3c:	b169      	cbz	r1, 8008a5a <ai_array_get_data_byte_size+0x1e>
 8008a3e:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8008a42:	fb02 f101 	mul.w	r1, r2, r1
 8008a46:	1dcb      	adds	r3, r1, #7
 8008a48:	f023 0307 	bic.w	r3, r3, #7
 8008a4c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008a50:	fa23 f000 	lsr.w	r0, r3, r0
 8008a54:	3007      	adds	r0, #7
 8008a56:	08c0      	lsrs	r0, r0, #3
 8008a58:	4770      	bx	lr
 8008a5a:	4608      	mov	r0, r1
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop

08008a60 <arm_cfft_radix4_init_f32>:
 8008a60:	b410      	push	{r4}
 8008a62:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008a66:	4c27      	ldr	r4, [pc, #156]	; (8008b04 <arm_cfft_radix4_init_f32+0xa4>)
 8008a68:	7082      	strb	r2, [r0, #2]
 8008a6a:	70c3      	strb	r3, [r0, #3]
 8008a6c:	8001      	strh	r1, [r0, #0]
 8008a6e:	6044      	str	r4, [r0, #4]
 8008a70:	d027      	beq.n	8008ac2 <arm_cfft_radix4_init_f32+0x62>
 8008a72:	d911      	bls.n	8008a98 <arm_cfft_radix4_init_f32+0x38>
 8008a74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008a78:	d02f      	beq.n	8008ada <arm_cfft_radix4_init_f32+0x7a>
 8008a7a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008a7e:	d11b      	bne.n	8008ab8 <arm_cfft_radix4_init_f32+0x58>
 8008a80:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8008a84:	4b20      	ldr	r3, [pc, #128]	; (8008b08 <arm_cfft_radix4_init_f32+0xa8>)
 8008a86:	6102      	str	r2, [r0, #16]
 8008a88:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8008a8c:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8008a90:	2000      	movs	r0, #0
 8008a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a96:	4770      	bx	lr
 8008a98:	2910      	cmp	r1, #16
 8008a9a:	d028      	beq.n	8008aee <arm_cfft_radix4_init_f32+0x8e>
 8008a9c:	2940      	cmp	r1, #64	; 0x40
 8008a9e:	d10b      	bne.n	8008ab8 <arm_cfft_radix4_init_f32+0x58>
 8008aa0:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 8008aa4:	4b19      	ldr	r3, [pc, #100]	; (8008b0c <arm_cfft_radix4_init_f32+0xac>)
 8008aa6:	6102      	str	r2, [r0, #16]
 8008aa8:	f04f 1240 	mov.w	r2, #4194368	; 0x400040
 8008aac:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ab6:	4770      	bx	lr
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8008abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 8008ac6:	4b12      	ldr	r3, [pc, #72]	; (8008b10 <arm_cfft_radix4_init_f32+0xb0>)
 8008ac8:	6102      	str	r2, [r0, #16]
 8008aca:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
 8008ace:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 8008ade:	4b0d      	ldr	r3, [pc, #52]	; (8008b14 <arm_cfft_radix4_init_f32+0xb4>)
 8008ae0:	6102      	str	r2, [r0, #16]
 8008ae2:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 8008ae6:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8008aea:	2000      	movs	r0, #0
 8008aec:	e7d1      	b.n	8008a92 <arm_cfft_radix4_init_f32+0x32>
 8008aee:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8008af2:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <arm_cfft_radix4_init_f32+0xb8>)
 8008af4:	6102      	str	r2, [r0, #16]
 8008af6:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
 8008afa:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8008afe:	2000      	movs	r0, #0
 8008b00:	e7c7      	b.n	8008a92 <arm_cfft_radix4_init_f32+0x32>
 8008b02:	bf00      	nop
 8008b04:	0800eca0 	.word	0x0800eca0
 8008b08:	0800e4a0 	.word	0x0800e4a0
 8008b0c:	0800e51e 	.word	0x0800e51e
 8008b10:	0800e4be 	.word	0x0800e4be
 8008b14:	0800e4a6 	.word	0x0800e4a6
 8008b18:	0800e69e 	.word	0x0800e69e

08008b1c <arm_radix4_butterfly_f32>:
 8008b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b20:	ed2d 8b06 	vpush	{d8-d10}
 8008b24:	088c      	lsrs	r4, r1, #2
 8008b26:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8008b2a:	461d      	mov	r5, r3
 8008b2c:	b08d      	sub	sp, #52	; 0x34
 8008b2e:	468a      	mov	sl, r1
 8008b30:	eb00 0109 	add.w	r1, r0, r9
 8008b34:	1d16      	adds	r6, r2, #4
 8008b36:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8008b3a:	eb01 0209 	add.w	r2, r1, r9
 8008b3e:	9402      	str	r4, [sp, #8]
 8008b40:	9009      	str	r0, [sp, #36]	; 0x24
 8008b42:	9301      	str	r3, [sp, #4]
 8008b44:	46a3      	mov	fp, r4
 8008b46:	4603      	mov	r3, r0
 8008b48:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8008b4c:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
 8008b50:	960a      	str	r6, [sp, #40]	; 0x28
 8008b52:	eb02 0009 	add.w	r0, r2, r9
 8008b56:	4688      	mov	r8, r1
 8008b58:	00ff      	lsls	r7, r7, #3
 8008b5a:	4634      	mov	r4, r6
 8008b5c:	4635      	mov	r5, r6
 8008b5e:	ed93 7a00 	vldr	s14, [r3]
 8008b62:	ed92 1a00 	vldr	s2, [r2]
 8008b66:	edd0 1a00 	vldr	s3, [r0]
 8008b6a:	ed92 2a01 	vldr	s4, [r2, #4]
 8008b6e:	edd0 2a01 	vldr	s5, [r0, #4]
 8008b72:	edd3 3a01 	vldr	s7, [r3, #4]
 8008b76:	edd1 7a00 	vldr	s15, [r1]
 8008b7a:	edd1 5a01 	vldr	s11, [r1, #4]
 8008b7e:	ed54 4a01 	vldr	s9, [r4, #-4]
 8008b82:	ed94 3a00 	vldr	s6, [r4]
 8008b86:	ee37 5aa1 	vadd.f32	s10, s15, s3
 8008b8a:	ee35 6aa2 	vadd.f32	s12, s11, s5
 8008b8e:	ee37 4a01 	vadd.f32	s8, s14, s2
 8008b92:	ee73 6a82 	vadd.f32	s13, s7, s4
 8008b96:	ee34 0a05 	vadd.f32	s0, s8, s10
 8008b9a:	ee76 0a86 	vadd.f32	s1, s13, s12
 8008b9e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8008ba2:	ee37 7a41 	vsub.f32	s14, s14, s2
 8008ba6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8008baa:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8008bae:	ed83 0a00 	vstr	s0, [r3]
 8008bb2:	edc3 0a01 	vstr	s1, [r3, #4]
 8008bb6:	ed55 1a01 	vldr	s3, [r5, #-4]
 8008bba:	ed96 2a00 	vldr	s4, [r6]
 8008bbe:	ee77 2a25 	vadd.f32	s5, s14, s11
 8008bc2:	ee34 4a45 	vsub.f32	s8, s8, s10
 8008bc6:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008bca:	ed95 5a00 	vldr	s10, [r5]
 8008bce:	ed16 6a01 	vldr	s12, [r6, #-4]
 8008bd2:	ee37 7a65 	vsub.f32	s14, s14, s11
 8008bd6:	ee73 5ae7 	vsub.f32	s11, s7, s15
 8008bda:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8008bde:	ee22 1aa1 	vmul.f32	s2, s5, s3
 8008be2:	ee67 3a06 	vmul.f32	s7, s14, s12
 8008be6:	ee62 2a85 	vmul.f32	s5, s5, s10
 8008bea:	ee27 6a86 	vmul.f32	s12, s15, s12
 8008bee:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008bf2:	ee67 7a82 	vmul.f32	s15, s15, s4
 8008bf6:	ee65 5aa1 	vmul.f32	s11, s11, s3
 8008bfa:	ee27 7a02 	vmul.f32	s14, s14, s4
 8008bfe:	ee64 1a84 	vmul.f32	s3, s9, s8
 8008c02:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8008c06:	ee23 4a04 	vmul.f32	s8, s6, s8
 8008c0a:	ee63 6a26 	vmul.f32	s13, s6, s13
 8008c0e:	ee35 5a01 	vadd.f32	s10, s10, s2
 8008c12:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8008c16:	ee76 6aa1 	vadd.f32	s13, s13, s3
 8008c1a:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8008c1e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8008c22:	ee36 7a47 	vsub.f32	s14, s12, s14
 8008c26:	3308      	adds	r3, #8
 8008c28:	4598      	cmp	r8, r3
 8008c2a:	edc1 6a00 	vstr	s13, [r1]
 8008c2e:	edc1 4a01 	vstr	s9, [r1, #4]
 8008c32:	4474      	add	r4, lr
 8008c34:	ed82 5a00 	vstr	s10, [r2]
 8008c38:	edc2 5a01 	vstr	s11, [r2, #4]
 8008c3c:	4465      	add	r5, ip
 8008c3e:	edc0 7a00 	vstr	s15, [r0]
 8008c42:	ed80 7a01 	vstr	s14, [r0, #4]
 8008c46:	443e      	add	r6, r7
 8008c48:	f101 0108 	add.w	r1, r1, #8
 8008c4c:	f102 0208 	add.w	r2, r2, #8
 8008c50:	f100 0008 	add.w	r0, r0, #8
 8008c54:	d183      	bne.n	8008b5e <arm_radix4_butterfly_f32+0x42>
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8008c5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	2a04      	cmp	r2, #4
 8008c64:	9307      	str	r3, [sp, #28]
 8008c66:	f240 80b6 	bls.w	8008dd6 <arm_radix4_butterfly_f32+0x2ba>
 8008c6a:	9807      	ldr	r0, [sp, #28]
 8008c6c:	9208      	str	r2, [sp, #32]
 8008c6e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c76:	9306      	str	r3, [sp, #24]
 8008c78:	00c3      	lsls	r3, r0, #3
 8008c7a:	ea4f 029b 	mov.w	r2, fp, lsr #2
 8008c7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008c80:	9305      	str	r3, [sp, #20]
 8008c82:	0103      	lsls	r3, r0, #4
 8008c84:	9202      	str	r2, [sp, #8]
 8008c86:	eb06 1802 	add.w	r8, r6, r2, lsl #4
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	00d2      	lsls	r2, r2, #3
 8008c8e:	2300      	movs	r3, #0
 8008c90:	9203      	str	r2, [sp, #12]
 8008c92:	46be      	mov	lr, r7
 8008c94:	46bc      	mov	ip, r7
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	9b03      	ldr	r3, [sp, #12]
 8008c9a:	ed17 0a01 	vldr	s0, [r7, #-4]
 8008c9e:	edd7 0a00 	vldr	s1, [r7]
 8008ca2:	ed1c 1a01 	vldr	s2, [ip, #-4]
 8008ca6:	eddc 1a00 	vldr	s3, [ip]
 8008caa:	ed1e 2a01 	vldr	s4, [lr, #-4]
 8008cae:	edde 2a00 	vldr	s5, [lr]
 8008cb2:	9d01      	ldr	r5, [sp, #4]
 8008cb4:	1999      	adds	r1, r3, r6
 8008cb6:	eb03 0208 	add.w	r2, r3, r8
 8008cba:	1d34      	adds	r4, r6, #4
 8008cbc:	4643      	mov	r3, r8
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	ed14 7a01 	vldr	s14, [r4, #-4]
 8008cc4:	edd3 3a00 	vldr	s7, [r3]
 8008cc8:	edd2 4a00 	vldr	s9, [r2]
 8008ccc:	edd0 5a01 	vldr	s11, [r0, #4]
 8008cd0:	ed93 6a01 	vldr	s12, [r3, #4]
 8008cd4:	edd2 6a01 	vldr	s13, [r2, #4]
 8008cd8:	edd1 7a00 	vldr	s15, [r1]
 8008cdc:	ed91 5a01 	vldr	s10, [r1, #4]
 8008ce0:	ee37 4a23 	vadd.f32	s8, s14, s7
 8008ce4:	ee37 9aa4 	vadd.f32	s18, s15, s9
 8008ce8:	ee75 8a26 	vadd.f32	s17, s10, s13
 8008cec:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008cf0:	ee35 5a66 	vsub.f32	s10, s10, s13
 8008cf4:	ee75 4a86 	vadd.f32	s9, s11, s12
 8008cf8:	ee37 7a63 	vsub.f32	s14, s14, s7
 8008cfc:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8008d00:	ee77 3a05 	vadd.f32	s7, s14, s10
 8008d04:	ee75 6ae7 	vsub.f32	s13, s11, s15
 8008d08:	ee34 3a49 	vsub.f32	s6, s8, s18
 8008d0c:	ee34 6ae8 	vsub.f32	s12, s9, s17
 8008d10:	ee37 7a45 	vsub.f32	s14, s14, s10
 8008d14:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008d18:	ee61 aa03 	vmul.f32	s21, s2, s6
 8008d1c:	ee21 8a86 	vmul.f32	s16, s3, s12
 8008d20:	ee20 aa23 	vmul.f32	s20, s0, s7
 8008d24:	ee20 5aa6 	vmul.f32	s10, s1, s13
 8008d28:	ee62 9a07 	vmul.f32	s19, s4, s14
 8008d2c:	ee62 5aa7 	vmul.f32	s11, s5, s15
 8008d30:	ee21 3a83 	vmul.f32	s6, s3, s6
 8008d34:	ee21 6a06 	vmul.f32	s12, s2, s12
 8008d38:	ee60 3aa3 	vmul.f32	s7, s1, s7
 8008d3c:	ee60 6a26 	vmul.f32	s13, s0, s13
 8008d40:	ee22 7a87 	vmul.f32	s14, s5, s14
 8008d44:	ee62 7a27 	vmul.f32	s15, s4, s15
 8008d48:	ee34 4a09 	vadd.f32	s8, s8, s18
 8008d4c:	ee74 4aa8 	vadd.f32	s9, s9, s17
 8008d50:	ee38 8a2a 	vadd.f32	s16, s16, s21
 8008d54:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008d58:	ee35 5a0a 	vadd.f32	s10, s10, s20
 8008d5c:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8008d60:	ee75 5aa9 	vadd.f32	s11, s11, s19
 8008d64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d68:	445d      	add	r5, fp
 8008d6a:	45aa      	cmp	sl, r5
 8008d6c:	ed04 4a01 	vstr	s8, [r4, #-4]
 8008d70:	edc0 4a01 	vstr	s9, [r0, #4]
 8008d74:	444c      	add	r4, r9
 8008d76:	ed81 8a00 	vstr	s16, [r1]
 8008d7a:	ed81 6a01 	vstr	s12, [r1, #4]
 8008d7e:	4448      	add	r0, r9
 8008d80:	ed83 5a00 	vstr	s10, [r3]
 8008d84:	edc3 6a01 	vstr	s13, [r3, #4]
 8008d88:	4449      	add	r1, r9
 8008d8a:	edc2 5a00 	vstr	s11, [r2]
 8008d8e:	edc2 7a01 	vstr	s15, [r2, #4]
 8008d92:	444b      	add	r3, r9
 8008d94:	444a      	add	r2, r9
 8008d96:	d893      	bhi.n	8008cc0 <arm_radix4_butterfly_f32+0x1a4>
 8008d98:	9a05      	ldr	r2, [sp, #20]
 8008d9a:	9b01      	ldr	r3, [sp, #4]
 8008d9c:	4417      	add	r7, r2
 8008d9e:	9a04      	ldr	r2, [sp, #16]
 8008da0:	4494      	add	ip, r2
 8008da2:	9a06      	ldr	r2, [sp, #24]
 8008da4:	4496      	add	lr, r2
 8008da6:	9a02      	ldr	r2, [sp, #8]
 8008da8:	3301      	adds	r3, #1
 8008daa:	429a      	cmp	r2, r3
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	f106 0608 	add.w	r6, r6, #8
 8008db2:	f108 0808 	add.w	r8, r8, #8
 8008db6:	f47f af6f 	bne.w	8008c98 <arm_radix4_butterfly_f32+0x17c>
 8008dba:	9b07      	ldr	r3, [sp, #28]
 8008dbc:	4693      	mov	fp, r2
 8008dbe:	9a08      	ldr	r2, [sp, #32]
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	0892      	lsrs	r2, r2, #2
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	2a04      	cmp	r2, #4
 8008dc8:	9208      	str	r2, [sp, #32]
 8008dca:	9307      	str	r3, [sp, #28]
 8008dcc:	d903      	bls.n	8008dd6 <arm_radix4_butterfly_f32+0x2ba>
 8008dce:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e74b      	b.n	8008c6e <arm_radix4_butterfly_f32+0x152>
 8008dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008dda:	3320      	adds	r3, #32
 8008ddc:	ed13 4a04 	vldr	s8, [r3, #-16]
 8008de0:	ed53 4a02 	vldr	s9, [r3, #-8]
 8008de4:	ed53 5a01 	vldr	s11, [r3, #-4]
 8008de8:	ed53 3a03 	vldr	s7, [r3, #-12]
 8008dec:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8008df0:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8008df4:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8008df8:	ed53 7a07 	vldr	s15, [r3, #-28]	; 0xffffffe4
 8008dfc:	ee37 5a04 	vadd.f32	s10, s14, s8
 8008e00:	ee37 7a44 	vsub.f32	s14, s14, s8
 8008e04:	ee36 4aa4 	vadd.f32	s8, s13, s9
 8008e08:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8008e0c:	ee76 4a65 	vsub.f32	s9, s12, s11
 8008e10:	ee36 6a25 	vadd.f32	s12, s12, s11
 8008e14:	ee77 5aa3 	vadd.f32	s11, s15, s7
 8008e18:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8008e1c:	ee75 3a04 	vadd.f32	s7, s10, s8
 8008e20:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008e24:	ee37 4a24 	vadd.f32	s8, s14, s9
 8008e28:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008e2c:	ee75 4a86 	vadd.f32	s9, s11, s12
 8008e30:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8008e34:	ee77 5ae6 	vsub.f32	s11, s15, s13
 8008e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e3c:	3a01      	subs	r2, #1
 8008e3e:	ed43 3a08 	vstr	s7, [r3, #-32]	; 0xffffffe0
 8008e42:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8008e46:	ed03 4a04 	vstr	s8, [r3, #-16]
 8008e4a:	ed03 7a02 	vstr	s14, [r3, #-8]
 8008e4e:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8008e52:	ed03 6a05 	vstr	s12, [r3, #-20]	; 0xffffffec
 8008e56:	ed43 5a03 	vstr	s11, [r3, #-12]
 8008e5a:	ed43 7a01 	vstr	s15, [r3, #-4]
 8008e5e:	f103 0320 	add.w	r3, r3, #32
 8008e62:	d1bb      	bne.n	8008ddc <arm_radix4_butterfly_f32+0x2c0>
 8008e64:	b00d      	add	sp, #52	; 0x34
 8008e66:	ecbd 8b06 	vpop	{d8-d10}
 8008e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6e:	bf00      	nop

08008e70 <arm_radix4_butterfly_inverse_f32>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	ed2d 8b08 	vpush	{d8-d11}
 8008e78:	088d      	lsrs	r5, r1, #2
 8008e7a:	b08d      	sub	sp, #52	; 0x34
 8008e7c:	012c      	lsls	r4, r5, #4
 8008e7e:	461e      	mov	r6, r3
 8008e80:	3204      	adds	r2, #4
 8008e82:	468a      	mov	sl, r1
 8008e84:	900a      	str	r0, [sp, #40]	; 0x28
 8008e86:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	4420      	add	r0, r4
 8008e90:	9209      	str	r2, [sp, #36]	; 0x24
 8008e92:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8008e96:	190a      	adds	r2, r1, r4
 8008e98:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008e9a:	9502      	str	r5, [sp, #8]
 8008e9c:	ea4f 09c5 	mov.w	r9, r5, lsl #3
 8008ea0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8008ea4:	46ab      	mov	fp, r5
 8008ea6:	ea4f 1e06 	mov.w	lr, r6, lsl #4
 8008eaa:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 8008eae:	eb03 0809 	add.w	r8, r3, r9
 8008eb2:	00ff      	lsls	r7, r7, #3
 8008eb4:	4626      	mov	r6, r4
 8008eb6:	4625      	mov	r5, r4
 8008eb8:	edd3 7a00 	vldr	s15, [r3]
 8008ebc:	edd2 1a00 	vldr	s3, [r2]
 8008ec0:	ed90 2a01 	vldr	s4, [r0, #4]
 8008ec4:	edd2 2a01 	vldr	s5, [r2, #4]
 8008ec8:	ed93 7a01 	vldr	s14, [r3, #4]
 8008ecc:	ed90 1a00 	vldr	s2, [r0]
 8008ed0:	edd1 4a00 	vldr	s9, [r1]
 8008ed4:	ed91 4a01 	vldr	s8, [r1, #4]
 8008ed8:	ed14 3a01 	vldr	s6, [r4, #-4]
 8008edc:	edd4 5a00 	vldr	s11, [r4]
 8008ee0:	ee74 3aa1 	vadd.f32	s7, s9, s3
 8008ee4:	ee34 6a22 	vadd.f32	s12, s8, s5
 8008ee8:	ee77 6a02 	vadd.f32	s13, s14, s4
 8008eec:	ee37 5a81 	vadd.f32	s10, s15, s2
 8008ef0:	ee76 0a86 	vadd.f32	s1, s13, s12
 8008ef4:	ee35 8a23 	vadd.f32	s16, s10, s7
 8008ef8:	ee74 4ae1 	vsub.f32	s9, s9, s3
 8008efc:	ee34 4a62 	vsub.f32	s8, s8, s5
 8008f00:	ee37 7a42 	vsub.f32	s14, s14, s4
 8008f04:	ee77 7ac1 	vsub.f32	s15, s15, s2
 8008f08:	ed83 8a00 	vstr	s16, [r3]
 8008f0c:	edc3 0a01 	vstr	s1, [r3, #4]
 8008f10:	ed15 2a01 	vldr	s4, [r5, #-4]
 8008f14:	edd5 2a00 	vldr	s5, [r5]
 8008f18:	edd6 1a00 	vldr	s3, [r6]
 8008f1c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008f20:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008f24:	ed56 3a01 	vldr	s7, [r6, #-4]
 8008f28:	ee37 6ac4 	vsub.f32	s12, s15, s8
 8008f2c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8008f30:	ee34 4a87 	vadd.f32	s8, s9, s14
 8008f34:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008f38:	ee66 4a02 	vmul.f32	s9, s12, s4
 8008f3c:	ee26 6a22 	vmul.f32	s12, s12, s5
 8008f40:	ee64 2a22 	vmul.f32	s5, s8, s5
 8008f44:	ee24 4a02 	vmul.f32	s8, s8, s4
 8008f48:	ee23 2a05 	vmul.f32	s4, s6, s10
 8008f4c:	ee23 3a26 	vmul.f32	s6, s6, s13
 8008f50:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8008f54:	ee65 5a85 	vmul.f32	s11, s11, s10
 8008f58:	ee27 5aa3 	vmul.f32	s10, s15, s7
 8008f5c:	ee67 3a23 	vmul.f32	s7, s14, s7
 8008f60:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8008f64:	ee27 7a21 	vmul.f32	s14, s14, s3
 8008f68:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008f6c:	ee36 6a04 	vadd.f32	s12, s12, s8
 8008f70:	ee72 4a66 	vsub.f32	s9, s4, s13
 8008f74:	ee35 7a47 	vsub.f32	s14, s10, s14
 8008f78:	ee75 6a83 	vadd.f32	s13, s11, s6
 8008f7c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8008f80:	3308      	adds	r3, #8
 8008f82:	4598      	cmp	r8, r3
 8008f84:	edc1 4a00 	vstr	s9, [r1]
 8008f88:	edc1 6a01 	vstr	s13, [r1, #4]
 8008f8c:	4474      	add	r4, lr
 8008f8e:	edc0 2a00 	vstr	s5, [r0]
 8008f92:	ed80 6a01 	vstr	s12, [r0, #4]
 8008f96:	4465      	add	r5, ip
 8008f98:	ed82 7a00 	vstr	s14, [r2]
 8008f9c:	edc2 7a01 	vstr	s15, [r2, #4]
 8008fa0:	443e      	add	r6, r7
 8008fa2:	f101 0108 	add.w	r1, r1, #8
 8008fa6:	f100 0008 	add.w	r0, r0, #8
 8008faa:	f102 0208 	add.w	r2, r2, #8
 8008fae:	d183      	bne.n	8008eb8 <arm_radix4_butterfly_inverse_f32+0x48>
 8008fb0:	9b01      	ldr	r3, [sp, #4]
 8008fb2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8008fb6:	920b      	str	r2, [sp, #44]	; 0x2c
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	2a04      	cmp	r2, #4
 8008fbe:	9307      	str	r3, [sp, #28]
 8008fc0:	f240 80b6 	bls.w	8009130 <arm_radix4_butterfly_inverse_f32+0x2c0>
 8008fc4:	9807      	ldr	r0, [sp, #28]
 8008fc6:	9208      	str	r2, [sp, #32]
 8008fc8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8008fcc:	00db      	lsls	r3, r3, #3
 8008fce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008fd0:	9306      	str	r3, [sp, #24]
 8008fd2:	00c3      	lsls	r3, r0, #3
 8008fd4:	ea4f 029b 	mov.w	r2, fp, lsr #2
 8008fd8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008fda:	9305      	str	r3, [sp, #20]
 8008fdc:	0103      	lsls	r3, r0, #4
 8008fde:	9202      	str	r2, [sp, #8]
 8008fe0:	eb06 1802 	add.w	r8, r6, r2, lsl #4
 8008fe4:	9304      	str	r3, [sp, #16]
 8008fe6:	00d2      	lsls	r2, r2, #3
 8008fe8:	2300      	movs	r3, #0
 8008fea:	9203      	str	r2, [sp, #12]
 8008fec:	46be      	mov	lr, r7
 8008fee:	46bc      	mov	ip, r7
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	ed17 1a01 	vldr	s2, [r7, #-4]
 8008ff8:	edd7 1a00 	vldr	s3, [r7]
 8008ffc:	ed1c 2a01 	vldr	s4, [ip, #-4]
 8009000:	eddc 2a00 	vldr	s5, [ip]
 8009004:	ed1e 3a01 	vldr	s6, [lr, #-4]
 8009008:	edde 3a00 	vldr	s7, [lr]
 800900c:	9d01      	ldr	r5, [sp, #4]
 800900e:	1999      	adds	r1, r3, r6
 8009010:	eb03 0208 	add.w	r2, r3, r8
 8009014:	1d34      	adds	r4, r6, #4
 8009016:	4643      	mov	r3, r8
 8009018:	4630      	mov	r0, r6
 800901a:	ed54 7a01 	vldr	s15, [r4, #-4]
 800901e:	edd3 0a00 	vldr	s1, [r3]
 8009022:	edd2 4a00 	vldr	s9, [r2]
 8009026:	ed90 7a01 	vldr	s14, [r0, #4]
 800902a:	ed93 6a01 	vldr	s12, [r3, #4]
 800902e:	edd2 6a01 	vldr	s13, [r2, #4]
 8009032:	edd1 5a00 	vldr	s11, [r1]
 8009036:	ed91 5a01 	vldr	s10, [r1, #4]
 800903a:	ee37 4aa0 	vadd.f32	s8, s15, s1
 800903e:	ee35 9aa4 	vadd.f32	s18, s11, s9
 8009042:	ee75 9a26 	vadd.f32	s19, s10, s13
 8009046:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800904a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800904e:	ee77 4a06 	vadd.f32	s9, s14, s12
 8009052:	ee35 5a66 	vsub.f32	s10, s10, s13
 8009056:	ee37 7a46 	vsub.f32	s14, s14, s12
 800905a:	ee77 6ac5 	vsub.f32	s13, s15, s10
 800905e:	ee34 6a49 	vsub.f32	s12, s8, s18
 8009062:	ee74 0ae9 	vsub.f32	s1, s9, s19
 8009066:	ee77 7a85 	vadd.f32	s15, s15, s10
 800906a:	ee35 5a87 	vadd.f32	s10, s11, s14
 800906e:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009072:	ee62 8a06 	vmul.f32	s17, s4, s12
 8009076:	ee22 baa0 	vmul.f32	s22, s5, s1
 800907a:	ee21 8a26 	vmul.f32	s16, s2, s13
 800907e:	ee62 0a20 	vmul.f32	s1, s4, s1
 8009082:	ee61 aa85 	vmul.f32	s21, s3, s10
 8009086:	ee63 5a27 	vmul.f32	s11, s6, s15
 800908a:	ee23 aa87 	vmul.f32	s20, s7, s14
 800908e:	ee22 6a86 	vmul.f32	s12, s5, s12
 8009092:	ee61 6aa6 	vmul.f32	s13, s3, s13
 8009096:	ee21 5a05 	vmul.f32	s10, s2, s10
 800909a:	ee63 7aa7 	vmul.f32	s15, s7, s15
 800909e:	ee23 7a07 	vmul.f32	s14, s6, s14
 80090a2:	ee36 6a20 	vadd.f32	s12, s12, s1
 80090a6:	ee34 4a09 	vadd.f32	s8, s8, s18
 80090aa:	ee74 4aa9 	vadd.f32	s9, s9, s19
 80090ae:	ee78 8acb 	vsub.f32	s17, s17, s22
 80090b2:	ee78 0a6a 	vsub.f32	s1, s16, s21
 80090b6:	ee76 6a85 	vadd.f32	s13, s13, s10
 80090ba:	ee75 5aca 	vsub.f32	s11, s11, s20
 80090be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80090c2:	445d      	add	r5, fp
 80090c4:	45aa      	cmp	sl, r5
 80090c6:	ed04 4a01 	vstr	s8, [r4, #-4]
 80090ca:	edc0 4a01 	vstr	s9, [r0, #4]
 80090ce:	444c      	add	r4, r9
 80090d0:	edc1 8a00 	vstr	s17, [r1]
 80090d4:	ed81 6a01 	vstr	s12, [r1, #4]
 80090d8:	4448      	add	r0, r9
 80090da:	edc3 0a00 	vstr	s1, [r3]
 80090de:	edc3 6a01 	vstr	s13, [r3, #4]
 80090e2:	4449      	add	r1, r9
 80090e4:	edc2 5a00 	vstr	s11, [r2]
 80090e8:	edc2 7a01 	vstr	s15, [r2, #4]
 80090ec:	444b      	add	r3, r9
 80090ee:	444a      	add	r2, r9
 80090f0:	d893      	bhi.n	800901a <arm_radix4_butterfly_inverse_f32+0x1aa>
 80090f2:	9a05      	ldr	r2, [sp, #20]
 80090f4:	9b01      	ldr	r3, [sp, #4]
 80090f6:	4417      	add	r7, r2
 80090f8:	9a04      	ldr	r2, [sp, #16]
 80090fa:	4494      	add	ip, r2
 80090fc:	9a06      	ldr	r2, [sp, #24]
 80090fe:	4496      	add	lr, r2
 8009100:	9a02      	ldr	r2, [sp, #8]
 8009102:	3301      	adds	r3, #1
 8009104:	429a      	cmp	r2, r3
 8009106:	9301      	str	r3, [sp, #4]
 8009108:	f106 0608 	add.w	r6, r6, #8
 800910c:	f108 0808 	add.w	r8, r8, #8
 8009110:	f47f af6f 	bne.w	8008ff2 <arm_radix4_butterfly_inverse_f32+0x182>
 8009114:	9b07      	ldr	r3, [sp, #28]
 8009116:	4693      	mov	fp, r2
 8009118:	9a08      	ldr	r2, [sp, #32]
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	0892      	lsrs	r2, r2, #2
 800911e:	b29b      	uxth	r3, r3
 8009120:	2a04      	cmp	r2, #4
 8009122:	9208      	str	r2, [sp, #32]
 8009124:	9307      	str	r3, [sp, #28]
 8009126:	d903      	bls.n	8009130 <arm_radix4_butterfly_inverse_f32+0x2c0>
 8009128:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 800912c:	4618      	mov	r0, r3
 800912e:	e74b      	b.n	8008fc8 <arm_radix4_butterfly_inverse_f32+0x158>
 8009130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009132:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009134:	3320      	adds	r3, #32
 8009136:	ed13 4a04 	vldr	s8, [r3, #-16]
 800913a:	ed53 4a02 	vldr	s9, [r3, #-8]
 800913e:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8009142:	ed53 3a03 	vldr	s7, [r3, #-12]
 8009146:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 800914a:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 800914e:	ed13 5a01 	vldr	s10, [r3, #-4]
 8009152:	ed53 7a07 	vldr	s15, [r3, #-28]	; 0xffffffe4
 8009156:	ee37 6a04 	vadd.f32	s12, s14, s8
 800915a:	ee37 7a44 	vsub.f32	s14, s14, s8
 800915e:	ee35 4aa4 	vadd.f32	s8, s11, s9
 8009162:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8009166:	ee76 4ac5 	vsub.f32	s9, s13, s10
 800916a:	ee36 5a85 	vadd.f32	s10, s13, s10
 800916e:	ee77 6aa3 	vadd.f32	s13, s15, s7
 8009172:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8009176:	ee76 3a04 	vadd.f32	s7, s12, s8
 800917a:	ee36 6a44 	vsub.f32	s12, s12, s8
 800917e:	ee37 4a64 	vsub.f32	s8, s14, s9
 8009182:	ee37 7a24 	vadd.f32	s14, s14, s9
 8009186:	ee76 4a85 	vadd.f32	s9, s13, s10
 800918a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800918e:	ee37 5aa5 	vadd.f32	s10, s15, s11
 8009192:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009196:	ee63 3a80 	vmul.f32	s7, s7, s0
 800919a:	ee26 6a00 	vmul.f32	s12, s12, s0
 800919e:	ee24 4a00 	vmul.f32	s8, s8, s0
 80091a2:	ee27 7a00 	vmul.f32	s14, s14, s0
 80091a6:	ee64 4a80 	vmul.f32	s9, s9, s0
 80091aa:	ee66 6a80 	vmul.f32	s13, s13, s0
 80091ae:	ee65 5a00 	vmul.f32	s11, s10, s0
 80091b2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80091b6:	3a01      	subs	r2, #1
 80091b8:	ed43 3a08 	vstr	s7, [r3, #-32]	; 0xffffffe0
 80091bc:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 80091c0:	ed03 4a04 	vstr	s8, [r3, #-16]
 80091c4:	ed03 7a02 	vstr	s14, [r3, #-8]
 80091c8:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 80091cc:	ed43 6a05 	vstr	s13, [r3, #-20]	; 0xffffffec
 80091d0:	ed43 5a03 	vstr	s11, [r3, #-12]
 80091d4:	ed43 7a01 	vstr	s15, [r3, #-4]
 80091d8:	f103 0320 	add.w	r3, r3, #32
 80091dc:	d1ab      	bne.n	8009136 <arm_radix4_butterfly_inverse_f32+0x2c6>
 80091de:	b00d      	add	sp, #52	; 0x34
 80091e0:	ecbd 8b08 	vpop	{d8-d11}
 80091e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091e8 <arm_cfft_radix4_f32>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	4604      	mov	r4, r0
 80091ec:	7880      	ldrb	r0, [r0, #2]
 80091ee:	6862      	ldr	r2, [r4, #4]
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	2801      	cmp	r0, #1
 80091f4:	460d      	mov	r5, r1
 80091f6:	8821      	ldrh	r1, [r4, #0]
 80091f8:	d006      	beq.n	8009208 <arm_cfft_radix4_f32+0x20>
 80091fa:	4628      	mov	r0, r5
 80091fc:	f7ff fc8e 	bl	8008b1c <arm_radix4_butterfly_f32>
 8009200:	78e3      	ldrb	r3, [r4, #3]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d008      	beq.n	8009218 <arm_cfft_radix4_f32+0x30>
 8009206:	bd70      	pop	{r4, r5, r6, pc}
 8009208:	ed94 0a04 	vldr	s0, [r4, #16]
 800920c:	4628      	mov	r0, r5
 800920e:	f7ff fe2f 	bl	8008e70 <arm_radix4_butterfly_inverse_f32>
 8009212:	78e3      	ldrb	r3, [r4, #3]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d1f6      	bne.n	8009206 <arm_cfft_radix4_f32+0x1e>
 8009218:	4628      	mov	r0, r5
 800921a:	68a3      	ldr	r3, [r4, #8]
 800921c:	89e2      	ldrh	r2, [r4, #14]
 800921e:	8821      	ldrh	r1, [r4, #0]
 8009220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009224:	f000 b800 	b.w	8009228 <arm_bitreversal_f32>

08009228 <arm_bitreversal_f32>:
 8009228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	b085      	sub	sp, #20
 800922e:	084c      	lsrs	r4, r1, #1
 8009230:	0052      	lsls	r2, r2, #1
 8009232:	2100      	movs	r1, #0
 8009234:	9201      	str	r2, [sp, #4]
 8009236:	1ea2      	subs	r2, r4, #2
 8009238:	9402      	str	r4, [sp, #8]
 800923a:	f104 0e01 	add.w	lr, r4, #1
 800923e:	9203      	str	r2, [sp, #12]
 8009240:	460c      	mov	r4, r1
 8009242:	460a      	mov	r2, r1
 8009244:	9d02      	ldr	r5, [sp, #8]
 8009246:	3101      	adds	r1, #1
 8009248:	442a      	add	r2, r5
 800924a:	00c9      	lsls	r1, r1, #3
 800924c:	00d2      	lsls	r2, r2, #3
 800924e:	1846      	adds	r6, r0, r1
 8009250:	1885      	adds	r5, r0, r2
 8009252:	3104      	adds	r1, #4
 8009254:	3204      	adds	r2, #4
 8009256:	6837      	ldr	r7, [r6, #0]
 8009258:	f8d5 c000 	ldr.w	ip, [r5]
 800925c:	f8c6 c000 	str.w	ip, [r6]
 8009260:	4401      	add	r1, r0
 8009262:	4402      	add	r2, r0
 8009264:	602f      	str	r7, [r5, #0]
 8009266:	3402      	adds	r4, #2
 8009268:	680e      	ldr	r6, [r1, #0]
 800926a:	f8d2 9000 	ldr.w	r9, [r2]
 800926e:	f8c1 9000 	str.w	r9, [r1]
 8009272:	b2a4      	uxth	r4, r4
 8009274:	6016      	str	r6, [r2, #0]
 8009276:	eb04 050e 	add.w	r5, r4, lr
 800927a:	881a      	ldrh	r2, [r3, #0]
 800927c:	00ed      	lsls	r5, r5, #3
 800927e:	eb00 0c05 	add.w	ip, r0, r5
 8009282:	3504      	adds	r5, #4
 8009284:	9500      	str	r5, [sp, #0]
 8009286:	eb02 010e 	add.w	r1, r2, lr
 800928a:	9d03      	ldr	r5, [sp, #12]
 800928c:	00c9      	lsls	r1, r1, #3
 800928e:	00e7      	lsls	r7, r4, #3
 8009290:	00d6      	lsls	r6, r2, #3
 8009292:	f101 0b04 	add.w	fp, r1, #4
 8009296:	eb00 0901 	add.w	r9, r0, r1
 800929a:	42ac      	cmp	r4, r5
 800929c:	9901      	ldr	r1, [sp, #4]
 800929e:	9d00      	ldr	r5, [sp, #0]
 80092a0:	eb00 0807 	add.w	r8, r0, r7
 80092a4:	eb00 0a06 	add.w	sl, r0, r6
 80092a8:	f107 0704 	add.w	r7, r7, #4
 80092ac:	f106 0604 	add.w	r6, r6, #4
 80092b0:	440b      	add	r3, r1
 80092b2:	4407      	add	r7, r0
 80092b4:	4406      	add	r6, r0
 80092b6:	4621      	mov	r1, r4
 80092b8:	4405      	add	r5, r0
 80092ba:	4483      	add	fp, r0
 80092bc:	d820      	bhi.n	8009300 <arm_bitreversal_f32+0xd8>
 80092be:	42a2      	cmp	r2, r4
 80092c0:	d9c0      	bls.n	8009244 <arm_bitreversal_f32+0x1c>
 80092c2:	edd8 7a00 	vldr	s15, [r8]
 80092c6:	ed9a 7a00 	vldr	s14, [sl]
 80092ca:	ed88 7a00 	vstr	s14, [r8]
 80092ce:	edca 7a00 	vstr	s15, [sl]
 80092d2:	f8d7 8000 	ldr.w	r8, [r7]
 80092d6:	f8d6 a000 	ldr.w	sl, [r6]
 80092da:	f8c7 a000 	str.w	sl, [r7]
 80092de:	f8c6 8000 	str.w	r8, [r6]
 80092e2:	f8dc 6000 	ldr.w	r6, [ip]
 80092e6:	f8d9 7000 	ldr.w	r7, [r9]
 80092ea:	f8cc 7000 	str.w	r7, [ip]
 80092ee:	f8c9 6000 	str.w	r6, [r9]
 80092f2:	682e      	ldr	r6, [r5, #0]
 80092f4:	f8db 7000 	ldr.w	r7, [fp]
 80092f8:	602f      	str	r7, [r5, #0]
 80092fa:	f8cb 6000 	str.w	r6, [fp]
 80092fe:	e7a1      	b.n	8009244 <arm_bitreversal_f32+0x1c>
 8009300:	b005      	add	sp, #20
 8009302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009306:	bf00      	nop

08009308 <arm_cmplx_mag_f32>:
 8009308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800930c:	ed2d 8b02 	vpush	{d8}
 8009310:	0897      	lsrs	r7, r2, #2
 8009312:	b084      	sub	sp, #16
 8009314:	d077      	beq.n	8009406 <arm_cmplx_mag_f32+0xfe>
 8009316:	f04f 0800 	mov.w	r8, #0
 800931a:	f100 0420 	add.w	r4, r0, #32
 800931e:	f101 0510 	add.w	r5, r1, #16
 8009322:	463e      	mov	r6, r7
 8009324:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8009328:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800932c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009330:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009334:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009338:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800933c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009340:	f2c0 80c5 	blt.w	80094ce <arm_cmplx_mag_f32+0x1c6>
 8009344:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009350:	f100 80cb 	bmi.w	80094ea <arm_cmplx_mag_f32+0x1e2>
 8009354:	ed05 8a04 	vstr	s16, [r5, #-16]
 8009358:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800935c:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8009360:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009364:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009368:	ee30 0a27 	vadd.f32	s0, s0, s15
 800936c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009374:	f2c0 80a8 	blt.w	80094c8 <arm_cmplx_mag_f32+0x1c0>
 8009378:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800937c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009380:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009384:	f100 80a8 	bmi.w	80094d8 <arm_cmplx_mag_f32+0x1d0>
 8009388:	ed05 8a03 	vstr	s16, [r5, #-12]
 800938c:	ed14 0a04 	vldr	s0, [r4, #-16]
 8009390:	ed54 7a03 	vldr	s15, [r4, #-12]
 8009394:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009398:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800939c:	ee30 0a27 	vadd.f32	s0, s0, s15
 80093a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80093a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a8:	f2c0 808b 	blt.w	80094c2 <arm_cmplx_mag_f32+0x1ba>
 80093ac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80093b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80093b8:	f100 80a9 	bmi.w	800950e <arm_cmplx_mag_f32+0x206>
 80093bc:	ed05 8a02 	vstr	s16, [r5, #-8]
 80093c0:	ed14 0a02 	vldr	s0, [r4, #-8]
 80093c4:	ed54 7a01 	vldr	s15, [r4, #-4]
 80093c8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80093cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80093d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80093d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093dc:	db6e      	blt.n	80094bc <arm_cmplx_mag_f32+0x1b4>
 80093de:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80093e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80093ea:	f100 8087 	bmi.w	80094fc <arm_cmplx_mag_f32+0x1f4>
 80093ee:	ed05 8a01 	vstr	s16, [r5, #-4]
 80093f2:	3e01      	subs	r6, #1
 80093f4:	f104 0420 	add.w	r4, r4, #32
 80093f8:	f105 0510 	add.w	r5, r5, #16
 80093fc:	d192      	bne.n	8009324 <arm_cmplx_mag_f32+0x1c>
 80093fe:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8009402:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8009406:	f012 0203 	ands.w	r2, r2, #3
 800940a:	d052      	beq.n	80094b2 <arm_cmplx_mag_f32+0x1aa>
 800940c:	ed90 0a00 	vldr	s0, [r0]
 8009410:	edd0 7a01 	vldr	s15, [r0, #4]
 8009414:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009418:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800941c:	2300      	movs	r3, #0
 800941e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009422:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800942a:	bfb8      	it	lt
 800942c:	600b      	strlt	r3, [r1, #0]
 800942e:	db08      	blt.n	8009442 <arm_cmplx_mag_f32+0x13a>
 8009430:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009438:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800943c:	d479      	bmi.n	8009532 <arm_cmplx_mag_f32+0x22a>
 800943e:	ed81 8a00 	vstr	s16, [r1]
 8009442:	3a01      	subs	r2, #1
 8009444:	d035      	beq.n	80094b2 <arm_cmplx_mag_f32+0x1aa>
 8009446:	ed90 0a02 	vldr	s0, [r0, #8]
 800944a:	edd0 7a03 	vldr	s15, [r0, #12]
 800944e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009452:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009456:	2300      	movs	r3, #0
 8009458:	ee37 0a80 	vadd.f32	s0, s15, s0
 800945c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009464:	bfb8      	it	lt
 8009466:	604b      	strlt	r3, [r1, #4]
 8009468:	db08      	blt.n	800947c <arm_cmplx_mag_f32+0x174>
 800946a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800946e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009472:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009476:	d453      	bmi.n	8009520 <arm_cmplx_mag_f32+0x218>
 8009478:	ed81 8a01 	vstr	s16, [r1, #4]
 800947c:	2a01      	cmp	r2, #1
 800947e:	d018      	beq.n	80094b2 <arm_cmplx_mag_f32+0x1aa>
 8009480:	ed90 0a04 	vldr	s0, [r0, #16]
 8009484:	edd0 7a05 	vldr	s15, [r0, #20]
 8009488:	ee20 0a00 	vmul.f32	s0, s0, s0
 800948c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009490:	2300      	movs	r3, #0
 8009492:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009496:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800949a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800949e:	db19      	blt.n	80094d4 <arm_cmplx_mag_f32+0x1cc>
 80094a0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80094a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80094ac:	d44a      	bmi.n	8009544 <arm_cmplx_mag_f32+0x23c>
 80094ae:	ed81 8a02 	vstr	s16, [r1, #8]
 80094b2:	b004      	add	sp, #16
 80094b4:	ecbd 8b02 	vpop	{d8}
 80094b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094bc:	f845 8c04 	str.w	r8, [r5, #-4]
 80094c0:	e797      	b.n	80093f2 <arm_cmplx_mag_f32+0xea>
 80094c2:	f845 8c08 	str.w	r8, [r5, #-8]
 80094c6:	e77b      	b.n	80093c0 <arm_cmplx_mag_f32+0xb8>
 80094c8:	f845 8c0c 	str.w	r8, [r5, #-12]
 80094cc:	e75e      	b.n	800938c <arm_cmplx_mag_f32+0x84>
 80094ce:	f845 8c10 	str.w	r8, [r5, #-16]
 80094d2:	e741      	b.n	8009358 <arm_cmplx_mag_f32+0x50>
 80094d4:	608b      	str	r3, [r1, #8]
 80094d6:	e7ec      	b.n	80094b2 <arm_cmplx_mag_f32+0x1aa>
 80094d8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80094dc:	9001      	str	r0, [sp, #4]
 80094de:	f004 fc45 	bl	800dd6c <sqrtf>
 80094e2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80094e6:	9801      	ldr	r0, [sp, #4]
 80094e8:	e74e      	b.n	8009388 <arm_cmplx_mag_f32+0x80>
 80094ea:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80094ee:	9001      	str	r0, [sp, #4]
 80094f0:	f004 fc3c 	bl	800dd6c <sqrtf>
 80094f4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80094f8:	9801      	ldr	r0, [sp, #4]
 80094fa:	e72b      	b.n	8009354 <arm_cmplx_mag_f32+0x4c>
 80094fc:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009500:	9001      	str	r0, [sp, #4]
 8009502:	f004 fc33 	bl	800dd6c <sqrtf>
 8009506:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800950a:	9801      	ldr	r0, [sp, #4]
 800950c:	e76f      	b.n	80093ee <arm_cmplx_mag_f32+0xe6>
 800950e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009512:	9001      	str	r0, [sp, #4]
 8009514:	f004 fc2a 	bl	800dd6c <sqrtf>
 8009518:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800951c:	9801      	ldr	r0, [sp, #4]
 800951e:	e74d      	b.n	80093bc <arm_cmplx_mag_f32+0xb4>
 8009520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009524:	9201      	str	r2, [sp, #4]
 8009526:	f004 fc21 	bl	800dd6c <sqrtf>
 800952a:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800952e:	9903      	ldr	r1, [sp, #12]
 8009530:	e7a2      	b.n	8009478 <arm_cmplx_mag_f32+0x170>
 8009532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009536:	9201      	str	r2, [sp, #4]
 8009538:	f004 fc18 	bl	800dd6c <sqrtf>
 800953c:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009540:	9903      	ldr	r1, [sp, #12]
 8009542:	e77c      	b.n	800943e <arm_cmplx_mag_f32+0x136>
 8009544:	9101      	str	r1, [sp, #4]
 8009546:	f004 fc11 	bl	800dd6c <sqrtf>
 800954a:	9901      	ldr	r1, [sp, #4]
 800954c:	e7af      	b.n	80094ae <arm_cmplx_mag_f32+0x1a6>
 800954e:	bf00      	nop

08009550 <malloc>:
 8009550:	4b02      	ldr	r3, [pc, #8]	; (800955c <malloc+0xc>)
 8009552:	4601      	mov	r1, r0
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	f000 b823 	b.w	80095a0 <_malloc_r>
 800955a:	bf00      	nop
 800955c:	20000c28 	.word	0x20000c28

08009560 <sbrk_aligned>:
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	4e0e      	ldr	r6, [pc, #56]	; (800959c <sbrk_aligned+0x3c>)
 8009564:	460c      	mov	r4, r1
 8009566:	6831      	ldr	r1, [r6, #0]
 8009568:	4605      	mov	r5, r0
 800956a:	b911      	cbnz	r1, 8009572 <sbrk_aligned+0x12>
 800956c:	f001 f8ca 	bl	800a704 <_sbrk_r>
 8009570:	6030      	str	r0, [r6, #0]
 8009572:	4621      	mov	r1, r4
 8009574:	4628      	mov	r0, r5
 8009576:	f001 f8c5 	bl	800a704 <_sbrk_r>
 800957a:	1c43      	adds	r3, r0, #1
 800957c:	d00a      	beq.n	8009594 <sbrk_aligned+0x34>
 800957e:	1cc4      	adds	r4, r0, #3
 8009580:	f024 0403 	bic.w	r4, r4, #3
 8009584:	42a0      	cmp	r0, r4
 8009586:	d007      	beq.n	8009598 <sbrk_aligned+0x38>
 8009588:	1a21      	subs	r1, r4, r0
 800958a:	4628      	mov	r0, r5
 800958c:	f001 f8ba 	bl	800a704 <_sbrk_r>
 8009590:	3001      	adds	r0, #1
 8009592:	d101      	bne.n	8009598 <sbrk_aligned+0x38>
 8009594:	f04f 34ff 	mov.w	r4, #4294967295
 8009598:	4620      	mov	r0, r4
 800959a:	bd70      	pop	{r4, r5, r6, pc}
 800959c:	20013964 	.word	0x20013964

080095a0 <_malloc_r>:
 80095a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095a4:	1ccd      	adds	r5, r1, #3
 80095a6:	f025 0503 	bic.w	r5, r5, #3
 80095aa:	3508      	adds	r5, #8
 80095ac:	2d0c      	cmp	r5, #12
 80095ae:	bf38      	it	cc
 80095b0:	250c      	movcc	r5, #12
 80095b2:	2d00      	cmp	r5, #0
 80095b4:	4607      	mov	r7, r0
 80095b6:	db01      	blt.n	80095bc <_malloc_r+0x1c>
 80095b8:	42a9      	cmp	r1, r5
 80095ba:	d905      	bls.n	80095c8 <_malloc_r+0x28>
 80095bc:	230c      	movs	r3, #12
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	2600      	movs	r6, #0
 80095c2:	4630      	mov	r0, r6
 80095c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800969c <_malloc_r+0xfc>
 80095cc:	f000 f868 	bl	80096a0 <__malloc_lock>
 80095d0:	f8d8 3000 	ldr.w	r3, [r8]
 80095d4:	461c      	mov	r4, r3
 80095d6:	bb5c      	cbnz	r4, 8009630 <_malloc_r+0x90>
 80095d8:	4629      	mov	r1, r5
 80095da:	4638      	mov	r0, r7
 80095dc:	f7ff ffc0 	bl	8009560 <sbrk_aligned>
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	4604      	mov	r4, r0
 80095e4:	d155      	bne.n	8009692 <_malloc_r+0xf2>
 80095e6:	f8d8 4000 	ldr.w	r4, [r8]
 80095ea:	4626      	mov	r6, r4
 80095ec:	2e00      	cmp	r6, #0
 80095ee:	d145      	bne.n	800967c <_malloc_r+0xdc>
 80095f0:	2c00      	cmp	r4, #0
 80095f2:	d048      	beq.n	8009686 <_malloc_r+0xe6>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	4631      	mov	r1, r6
 80095f8:	4638      	mov	r0, r7
 80095fa:	eb04 0903 	add.w	r9, r4, r3
 80095fe:	f001 f881 	bl	800a704 <_sbrk_r>
 8009602:	4581      	cmp	r9, r0
 8009604:	d13f      	bne.n	8009686 <_malloc_r+0xe6>
 8009606:	6821      	ldr	r1, [r4, #0]
 8009608:	1a6d      	subs	r5, r5, r1
 800960a:	4629      	mov	r1, r5
 800960c:	4638      	mov	r0, r7
 800960e:	f7ff ffa7 	bl	8009560 <sbrk_aligned>
 8009612:	3001      	adds	r0, #1
 8009614:	d037      	beq.n	8009686 <_malloc_r+0xe6>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	442b      	add	r3, r5
 800961a:	6023      	str	r3, [r4, #0]
 800961c:	f8d8 3000 	ldr.w	r3, [r8]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d038      	beq.n	8009696 <_malloc_r+0xf6>
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	42a2      	cmp	r2, r4
 8009628:	d12b      	bne.n	8009682 <_malloc_r+0xe2>
 800962a:	2200      	movs	r2, #0
 800962c:	605a      	str	r2, [r3, #4]
 800962e:	e00f      	b.n	8009650 <_malloc_r+0xb0>
 8009630:	6822      	ldr	r2, [r4, #0]
 8009632:	1b52      	subs	r2, r2, r5
 8009634:	d41f      	bmi.n	8009676 <_malloc_r+0xd6>
 8009636:	2a0b      	cmp	r2, #11
 8009638:	d917      	bls.n	800966a <_malloc_r+0xca>
 800963a:	1961      	adds	r1, r4, r5
 800963c:	42a3      	cmp	r3, r4
 800963e:	6025      	str	r5, [r4, #0]
 8009640:	bf18      	it	ne
 8009642:	6059      	strne	r1, [r3, #4]
 8009644:	6863      	ldr	r3, [r4, #4]
 8009646:	bf08      	it	eq
 8009648:	f8c8 1000 	streq.w	r1, [r8]
 800964c:	5162      	str	r2, [r4, r5]
 800964e:	604b      	str	r3, [r1, #4]
 8009650:	4638      	mov	r0, r7
 8009652:	f104 060b 	add.w	r6, r4, #11
 8009656:	f000 f829 	bl	80096ac <__malloc_unlock>
 800965a:	f026 0607 	bic.w	r6, r6, #7
 800965e:	1d23      	adds	r3, r4, #4
 8009660:	1af2      	subs	r2, r6, r3
 8009662:	d0ae      	beq.n	80095c2 <_malloc_r+0x22>
 8009664:	1b9b      	subs	r3, r3, r6
 8009666:	50a3      	str	r3, [r4, r2]
 8009668:	e7ab      	b.n	80095c2 <_malloc_r+0x22>
 800966a:	42a3      	cmp	r3, r4
 800966c:	6862      	ldr	r2, [r4, #4]
 800966e:	d1dd      	bne.n	800962c <_malloc_r+0x8c>
 8009670:	f8c8 2000 	str.w	r2, [r8]
 8009674:	e7ec      	b.n	8009650 <_malloc_r+0xb0>
 8009676:	4623      	mov	r3, r4
 8009678:	6864      	ldr	r4, [r4, #4]
 800967a:	e7ac      	b.n	80095d6 <_malloc_r+0x36>
 800967c:	4634      	mov	r4, r6
 800967e:	6876      	ldr	r6, [r6, #4]
 8009680:	e7b4      	b.n	80095ec <_malloc_r+0x4c>
 8009682:	4613      	mov	r3, r2
 8009684:	e7cc      	b.n	8009620 <_malloc_r+0x80>
 8009686:	230c      	movs	r3, #12
 8009688:	603b      	str	r3, [r7, #0]
 800968a:	4638      	mov	r0, r7
 800968c:	f000 f80e 	bl	80096ac <__malloc_unlock>
 8009690:	e797      	b.n	80095c2 <_malloc_r+0x22>
 8009692:	6025      	str	r5, [r4, #0]
 8009694:	e7dc      	b.n	8009650 <_malloc_r+0xb0>
 8009696:	605b      	str	r3, [r3, #4]
 8009698:	deff      	udf	#255	; 0xff
 800969a:	bf00      	nop
 800969c:	20013960 	.word	0x20013960

080096a0 <__malloc_lock>:
 80096a0:	4801      	ldr	r0, [pc, #4]	; (80096a8 <__malloc_lock+0x8>)
 80096a2:	f001 b87c 	b.w	800a79e <__retarget_lock_acquire_recursive>
 80096a6:	bf00      	nop
 80096a8:	20013aa8 	.word	0x20013aa8

080096ac <__malloc_unlock>:
 80096ac:	4801      	ldr	r0, [pc, #4]	; (80096b4 <__malloc_unlock+0x8>)
 80096ae:	f001 b877 	b.w	800a7a0 <__retarget_lock_release_recursive>
 80096b2:	bf00      	nop
 80096b4:	20013aa8 	.word	0x20013aa8

080096b8 <_realloc_r>:
 80096b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096bc:	4680      	mov	r8, r0
 80096be:	4614      	mov	r4, r2
 80096c0:	460e      	mov	r6, r1
 80096c2:	b921      	cbnz	r1, 80096ce <_realloc_r+0x16>
 80096c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096c8:	4611      	mov	r1, r2
 80096ca:	f7ff bf69 	b.w	80095a0 <_malloc_r>
 80096ce:	b92a      	cbnz	r2, 80096dc <_realloc_r+0x24>
 80096d0:	f001 fef8 	bl	800b4c4 <_free_r>
 80096d4:	4625      	mov	r5, r4
 80096d6:	4628      	mov	r0, r5
 80096d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096dc:	f002 fbeb 	bl	800beb6 <_malloc_usable_size_r>
 80096e0:	4284      	cmp	r4, r0
 80096e2:	4607      	mov	r7, r0
 80096e4:	d802      	bhi.n	80096ec <_realloc_r+0x34>
 80096e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096ea:	d812      	bhi.n	8009712 <_realloc_r+0x5a>
 80096ec:	4621      	mov	r1, r4
 80096ee:	4640      	mov	r0, r8
 80096f0:	f7ff ff56 	bl	80095a0 <_malloc_r>
 80096f4:	4605      	mov	r5, r0
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d0ed      	beq.n	80096d6 <_realloc_r+0x1e>
 80096fa:	42bc      	cmp	r4, r7
 80096fc:	4622      	mov	r2, r4
 80096fe:	4631      	mov	r1, r6
 8009700:	bf28      	it	cs
 8009702:	463a      	movcs	r2, r7
 8009704:	f001 f84d 	bl	800a7a2 <memcpy>
 8009708:	4631      	mov	r1, r6
 800970a:	4640      	mov	r0, r8
 800970c:	f001 feda 	bl	800b4c4 <_free_r>
 8009710:	e7e1      	b.n	80096d6 <_realloc_r+0x1e>
 8009712:	4635      	mov	r5, r6
 8009714:	e7df      	b.n	80096d6 <_realloc_r+0x1e>

08009716 <__cvt>:
 8009716:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800971a:	ec55 4b10 	vmov	r4, r5, d0
 800971e:	2d00      	cmp	r5, #0
 8009720:	460e      	mov	r6, r1
 8009722:	4619      	mov	r1, r3
 8009724:	462b      	mov	r3, r5
 8009726:	bfbb      	ittet	lt
 8009728:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800972c:	461d      	movlt	r5, r3
 800972e:	2300      	movge	r3, #0
 8009730:	232d      	movlt	r3, #45	; 0x2d
 8009732:	700b      	strb	r3, [r1, #0]
 8009734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009736:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800973a:	4691      	mov	r9, r2
 800973c:	f023 0820 	bic.w	r8, r3, #32
 8009740:	bfbc      	itt	lt
 8009742:	4622      	movlt	r2, r4
 8009744:	4614      	movlt	r4, r2
 8009746:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800974a:	d005      	beq.n	8009758 <__cvt+0x42>
 800974c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009750:	d100      	bne.n	8009754 <__cvt+0x3e>
 8009752:	3601      	adds	r6, #1
 8009754:	2102      	movs	r1, #2
 8009756:	e000      	b.n	800975a <__cvt+0x44>
 8009758:	2103      	movs	r1, #3
 800975a:	ab03      	add	r3, sp, #12
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	ab02      	add	r3, sp, #8
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	ec45 4b10 	vmov	d0, r4, r5
 8009766:	4653      	mov	r3, sl
 8009768:	4632      	mov	r2, r6
 800976a:	f001 f8b9 	bl	800a8e0 <_dtoa_r>
 800976e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009772:	4607      	mov	r7, r0
 8009774:	d102      	bne.n	800977c <__cvt+0x66>
 8009776:	f019 0f01 	tst.w	r9, #1
 800977a:	d022      	beq.n	80097c2 <__cvt+0xac>
 800977c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009780:	eb07 0906 	add.w	r9, r7, r6
 8009784:	d110      	bne.n	80097a8 <__cvt+0x92>
 8009786:	783b      	ldrb	r3, [r7, #0]
 8009788:	2b30      	cmp	r3, #48	; 0x30
 800978a:	d10a      	bne.n	80097a2 <__cvt+0x8c>
 800978c:	2200      	movs	r2, #0
 800978e:	2300      	movs	r3, #0
 8009790:	4620      	mov	r0, r4
 8009792:	4629      	mov	r1, r5
 8009794:	f7f7 f9a0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009798:	b918      	cbnz	r0, 80097a2 <__cvt+0x8c>
 800979a:	f1c6 0601 	rsb	r6, r6, #1
 800979e:	f8ca 6000 	str.w	r6, [sl]
 80097a2:	f8da 3000 	ldr.w	r3, [sl]
 80097a6:	4499      	add	r9, r3
 80097a8:	2200      	movs	r2, #0
 80097aa:	2300      	movs	r3, #0
 80097ac:	4620      	mov	r0, r4
 80097ae:	4629      	mov	r1, r5
 80097b0:	f7f7 f992 	bl	8000ad8 <__aeabi_dcmpeq>
 80097b4:	b108      	cbz	r0, 80097ba <__cvt+0xa4>
 80097b6:	f8cd 900c 	str.w	r9, [sp, #12]
 80097ba:	2230      	movs	r2, #48	; 0x30
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	454b      	cmp	r3, r9
 80097c0:	d307      	bcc.n	80097d2 <__cvt+0xbc>
 80097c2:	9b03      	ldr	r3, [sp, #12]
 80097c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097c6:	1bdb      	subs	r3, r3, r7
 80097c8:	4638      	mov	r0, r7
 80097ca:	6013      	str	r3, [r2, #0]
 80097cc:	b004      	add	sp, #16
 80097ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d2:	1c59      	adds	r1, r3, #1
 80097d4:	9103      	str	r1, [sp, #12]
 80097d6:	701a      	strb	r2, [r3, #0]
 80097d8:	e7f0      	b.n	80097bc <__cvt+0xa6>

080097da <__exponent>:
 80097da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097dc:	4603      	mov	r3, r0
 80097de:	2900      	cmp	r1, #0
 80097e0:	bfb8      	it	lt
 80097e2:	4249      	neglt	r1, r1
 80097e4:	f803 2b02 	strb.w	r2, [r3], #2
 80097e8:	bfb4      	ite	lt
 80097ea:	222d      	movlt	r2, #45	; 0x2d
 80097ec:	222b      	movge	r2, #43	; 0x2b
 80097ee:	2909      	cmp	r1, #9
 80097f0:	7042      	strb	r2, [r0, #1]
 80097f2:	dd2a      	ble.n	800984a <__exponent+0x70>
 80097f4:	f10d 0207 	add.w	r2, sp, #7
 80097f8:	4617      	mov	r7, r2
 80097fa:	260a      	movs	r6, #10
 80097fc:	4694      	mov	ip, r2
 80097fe:	fb91 f5f6 	sdiv	r5, r1, r6
 8009802:	fb06 1415 	mls	r4, r6, r5, r1
 8009806:	3430      	adds	r4, #48	; 0x30
 8009808:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800980c:	460c      	mov	r4, r1
 800980e:	2c63      	cmp	r4, #99	; 0x63
 8009810:	f102 32ff 	add.w	r2, r2, #4294967295
 8009814:	4629      	mov	r1, r5
 8009816:	dcf1      	bgt.n	80097fc <__exponent+0x22>
 8009818:	3130      	adds	r1, #48	; 0x30
 800981a:	f1ac 0402 	sub.w	r4, ip, #2
 800981e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009822:	1c41      	adds	r1, r0, #1
 8009824:	4622      	mov	r2, r4
 8009826:	42ba      	cmp	r2, r7
 8009828:	d30a      	bcc.n	8009840 <__exponent+0x66>
 800982a:	f10d 0209 	add.w	r2, sp, #9
 800982e:	eba2 020c 	sub.w	r2, r2, ip
 8009832:	42bc      	cmp	r4, r7
 8009834:	bf88      	it	hi
 8009836:	2200      	movhi	r2, #0
 8009838:	4413      	add	r3, r2
 800983a:	1a18      	subs	r0, r3, r0
 800983c:	b003      	add	sp, #12
 800983e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009840:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009844:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009848:	e7ed      	b.n	8009826 <__exponent+0x4c>
 800984a:	2330      	movs	r3, #48	; 0x30
 800984c:	3130      	adds	r1, #48	; 0x30
 800984e:	7083      	strb	r3, [r0, #2]
 8009850:	70c1      	strb	r1, [r0, #3]
 8009852:	1d03      	adds	r3, r0, #4
 8009854:	e7f1      	b.n	800983a <__exponent+0x60>
	...

08009858 <_printf_float>:
 8009858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	ed2d 8b02 	vpush	{d8}
 8009860:	b08d      	sub	sp, #52	; 0x34
 8009862:	460c      	mov	r4, r1
 8009864:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009868:	4616      	mov	r6, r2
 800986a:	461f      	mov	r7, r3
 800986c:	4605      	mov	r5, r0
 800986e:	f000 ff11 	bl	800a694 <_localeconv_r>
 8009872:	f8d0 a000 	ldr.w	sl, [r0]
 8009876:	4650      	mov	r0, sl
 8009878:	f7f6 fd02 	bl	8000280 <strlen>
 800987c:	2300      	movs	r3, #0
 800987e:	930a      	str	r3, [sp, #40]	; 0x28
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	9305      	str	r3, [sp, #20]
 8009884:	f8d8 3000 	ldr.w	r3, [r8]
 8009888:	f894 b018 	ldrb.w	fp, [r4, #24]
 800988c:	3307      	adds	r3, #7
 800988e:	f023 0307 	bic.w	r3, r3, #7
 8009892:	f103 0208 	add.w	r2, r3, #8
 8009896:	f8c8 2000 	str.w	r2, [r8]
 800989a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800989e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098a2:	9307      	str	r3, [sp, #28]
 80098a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80098a8:	ee08 0a10 	vmov	s16, r0
 80098ac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80098b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098b4:	4b9e      	ldr	r3, [pc, #632]	; (8009b30 <_printf_float+0x2d8>)
 80098b6:	f04f 32ff 	mov.w	r2, #4294967295
 80098ba:	f7f7 f93f 	bl	8000b3c <__aeabi_dcmpun>
 80098be:	bb88      	cbnz	r0, 8009924 <_printf_float+0xcc>
 80098c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098c4:	4b9a      	ldr	r3, [pc, #616]	; (8009b30 <_printf_float+0x2d8>)
 80098c6:	f04f 32ff 	mov.w	r2, #4294967295
 80098ca:	f7f7 f919 	bl	8000b00 <__aeabi_dcmple>
 80098ce:	bb48      	cbnz	r0, 8009924 <_printf_float+0xcc>
 80098d0:	2200      	movs	r2, #0
 80098d2:	2300      	movs	r3, #0
 80098d4:	4640      	mov	r0, r8
 80098d6:	4649      	mov	r1, r9
 80098d8:	f7f7 f908 	bl	8000aec <__aeabi_dcmplt>
 80098dc:	b110      	cbz	r0, 80098e4 <_printf_float+0x8c>
 80098de:	232d      	movs	r3, #45	; 0x2d
 80098e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098e4:	4a93      	ldr	r2, [pc, #588]	; (8009b34 <_printf_float+0x2dc>)
 80098e6:	4b94      	ldr	r3, [pc, #592]	; (8009b38 <_printf_float+0x2e0>)
 80098e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80098ec:	bf94      	ite	ls
 80098ee:	4690      	movls	r8, r2
 80098f0:	4698      	movhi	r8, r3
 80098f2:	2303      	movs	r3, #3
 80098f4:	6123      	str	r3, [r4, #16]
 80098f6:	9b05      	ldr	r3, [sp, #20]
 80098f8:	f023 0304 	bic.w	r3, r3, #4
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	f04f 0900 	mov.w	r9, #0
 8009902:	9700      	str	r7, [sp, #0]
 8009904:	4633      	mov	r3, r6
 8009906:	aa0b      	add	r2, sp, #44	; 0x2c
 8009908:	4621      	mov	r1, r4
 800990a:	4628      	mov	r0, r5
 800990c:	f000 f9da 	bl	8009cc4 <_printf_common>
 8009910:	3001      	adds	r0, #1
 8009912:	f040 8090 	bne.w	8009a36 <_printf_float+0x1de>
 8009916:	f04f 30ff 	mov.w	r0, #4294967295
 800991a:	b00d      	add	sp, #52	; 0x34
 800991c:	ecbd 8b02 	vpop	{d8}
 8009920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009924:	4642      	mov	r2, r8
 8009926:	464b      	mov	r3, r9
 8009928:	4640      	mov	r0, r8
 800992a:	4649      	mov	r1, r9
 800992c:	f7f7 f906 	bl	8000b3c <__aeabi_dcmpun>
 8009930:	b140      	cbz	r0, 8009944 <_printf_float+0xec>
 8009932:	464b      	mov	r3, r9
 8009934:	2b00      	cmp	r3, #0
 8009936:	bfbc      	itt	lt
 8009938:	232d      	movlt	r3, #45	; 0x2d
 800993a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800993e:	4a7f      	ldr	r2, [pc, #508]	; (8009b3c <_printf_float+0x2e4>)
 8009940:	4b7f      	ldr	r3, [pc, #508]	; (8009b40 <_printf_float+0x2e8>)
 8009942:	e7d1      	b.n	80098e8 <_printf_float+0x90>
 8009944:	6863      	ldr	r3, [r4, #4]
 8009946:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800994a:	9206      	str	r2, [sp, #24]
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	d13f      	bne.n	80099d0 <_printf_float+0x178>
 8009950:	2306      	movs	r3, #6
 8009952:	6063      	str	r3, [r4, #4]
 8009954:	9b05      	ldr	r3, [sp, #20]
 8009956:	6861      	ldr	r1, [r4, #4]
 8009958:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800995c:	2300      	movs	r3, #0
 800995e:	9303      	str	r3, [sp, #12]
 8009960:	ab0a      	add	r3, sp, #40	; 0x28
 8009962:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009966:	ab09      	add	r3, sp, #36	; 0x24
 8009968:	ec49 8b10 	vmov	d0, r8, r9
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	6022      	str	r2, [r4, #0]
 8009970:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009974:	4628      	mov	r0, r5
 8009976:	f7ff fece 	bl	8009716 <__cvt>
 800997a:	9b06      	ldr	r3, [sp, #24]
 800997c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800997e:	2b47      	cmp	r3, #71	; 0x47
 8009980:	4680      	mov	r8, r0
 8009982:	d108      	bne.n	8009996 <_printf_float+0x13e>
 8009984:	1cc8      	adds	r0, r1, #3
 8009986:	db02      	blt.n	800998e <_printf_float+0x136>
 8009988:	6863      	ldr	r3, [r4, #4]
 800998a:	4299      	cmp	r1, r3
 800998c:	dd41      	ble.n	8009a12 <_printf_float+0x1ba>
 800998e:	f1ab 0302 	sub.w	r3, fp, #2
 8009992:	fa5f fb83 	uxtb.w	fp, r3
 8009996:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800999a:	d820      	bhi.n	80099de <_printf_float+0x186>
 800999c:	3901      	subs	r1, #1
 800999e:	465a      	mov	r2, fp
 80099a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80099a4:	9109      	str	r1, [sp, #36]	; 0x24
 80099a6:	f7ff ff18 	bl	80097da <__exponent>
 80099aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ac:	1813      	adds	r3, r2, r0
 80099ae:	2a01      	cmp	r2, #1
 80099b0:	4681      	mov	r9, r0
 80099b2:	6123      	str	r3, [r4, #16]
 80099b4:	dc02      	bgt.n	80099bc <_printf_float+0x164>
 80099b6:	6822      	ldr	r2, [r4, #0]
 80099b8:	07d2      	lsls	r2, r2, #31
 80099ba:	d501      	bpl.n	80099c0 <_printf_float+0x168>
 80099bc:	3301      	adds	r3, #1
 80099be:	6123      	str	r3, [r4, #16]
 80099c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d09c      	beq.n	8009902 <_printf_float+0xaa>
 80099c8:	232d      	movs	r3, #45	; 0x2d
 80099ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099ce:	e798      	b.n	8009902 <_printf_float+0xaa>
 80099d0:	9a06      	ldr	r2, [sp, #24]
 80099d2:	2a47      	cmp	r2, #71	; 0x47
 80099d4:	d1be      	bne.n	8009954 <_printf_float+0xfc>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1bc      	bne.n	8009954 <_printf_float+0xfc>
 80099da:	2301      	movs	r3, #1
 80099dc:	e7b9      	b.n	8009952 <_printf_float+0xfa>
 80099de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80099e2:	d118      	bne.n	8009a16 <_printf_float+0x1be>
 80099e4:	2900      	cmp	r1, #0
 80099e6:	6863      	ldr	r3, [r4, #4]
 80099e8:	dd0b      	ble.n	8009a02 <_printf_float+0x1aa>
 80099ea:	6121      	str	r1, [r4, #16]
 80099ec:	b913      	cbnz	r3, 80099f4 <_printf_float+0x19c>
 80099ee:	6822      	ldr	r2, [r4, #0]
 80099f0:	07d0      	lsls	r0, r2, #31
 80099f2:	d502      	bpl.n	80099fa <_printf_float+0x1a2>
 80099f4:	3301      	adds	r3, #1
 80099f6:	440b      	add	r3, r1
 80099f8:	6123      	str	r3, [r4, #16]
 80099fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80099fc:	f04f 0900 	mov.w	r9, #0
 8009a00:	e7de      	b.n	80099c0 <_printf_float+0x168>
 8009a02:	b913      	cbnz	r3, 8009a0a <_printf_float+0x1b2>
 8009a04:	6822      	ldr	r2, [r4, #0]
 8009a06:	07d2      	lsls	r2, r2, #31
 8009a08:	d501      	bpl.n	8009a0e <_printf_float+0x1b6>
 8009a0a:	3302      	adds	r3, #2
 8009a0c:	e7f4      	b.n	80099f8 <_printf_float+0x1a0>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e7f2      	b.n	80099f8 <_printf_float+0x1a0>
 8009a12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a18:	4299      	cmp	r1, r3
 8009a1a:	db05      	blt.n	8009a28 <_printf_float+0x1d0>
 8009a1c:	6823      	ldr	r3, [r4, #0]
 8009a1e:	6121      	str	r1, [r4, #16]
 8009a20:	07d8      	lsls	r0, r3, #31
 8009a22:	d5ea      	bpl.n	80099fa <_printf_float+0x1a2>
 8009a24:	1c4b      	adds	r3, r1, #1
 8009a26:	e7e7      	b.n	80099f8 <_printf_float+0x1a0>
 8009a28:	2900      	cmp	r1, #0
 8009a2a:	bfd4      	ite	le
 8009a2c:	f1c1 0202 	rsble	r2, r1, #2
 8009a30:	2201      	movgt	r2, #1
 8009a32:	4413      	add	r3, r2
 8009a34:	e7e0      	b.n	80099f8 <_printf_float+0x1a0>
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	055a      	lsls	r2, r3, #21
 8009a3a:	d407      	bmi.n	8009a4c <_printf_float+0x1f4>
 8009a3c:	6923      	ldr	r3, [r4, #16]
 8009a3e:	4642      	mov	r2, r8
 8009a40:	4631      	mov	r1, r6
 8009a42:	4628      	mov	r0, r5
 8009a44:	47b8      	blx	r7
 8009a46:	3001      	adds	r0, #1
 8009a48:	d12c      	bne.n	8009aa4 <_printf_float+0x24c>
 8009a4a:	e764      	b.n	8009916 <_printf_float+0xbe>
 8009a4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a50:	f240 80e0 	bls.w	8009c14 <_printf_float+0x3bc>
 8009a54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f7f7 f83c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d034      	beq.n	8009ace <_printf_float+0x276>
 8009a64:	4a37      	ldr	r2, [pc, #220]	; (8009b44 <_printf_float+0x2ec>)
 8009a66:	2301      	movs	r3, #1
 8009a68:	4631      	mov	r1, r6
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	47b8      	blx	r7
 8009a6e:	3001      	adds	r0, #1
 8009a70:	f43f af51 	beq.w	8009916 <_printf_float+0xbe>
 8009a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	db02      	blt.n	8009a82 <_printf_float+0x22a>
 8009a7c:	6823      	ldr	r3, [r4, #0]
 8009a7e:	07d8      	lsls	r0, r3, #31
 8009a80:	d510      	bpl.n	8009aa4 <_printf_float+0x24c>
 8009a82:	ee18 3a10 	vmov	r3, s16
 8009a86:	4652      	mov	r2, sl
 8009a88:	4631      	mov	r1, r6
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	47b8      	blx	r7
 8009a8e:	3001      	adds	r0, #1
 8009a90:	f43f af41 	beq.w	8009916 <_printf_float+0xbe>
 8009a94:	f04f 0800 	mov.w	r8, #0
 8009a98:	f104 091a 	add.w	r9, r4, #26
 8009a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	4543      	cmp	r3, r8
 8009aa2:	dc09      	bgt.n	8009ab8 <_printf_float+0x260>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	079b      	lsls	r3, r3, #30
 8009aa8:	f100 8107 	bmi.w	8009cba <_printf_float+0x462>
 8009aac:	68e0      	ldr	r0, [r4, #12]
 8009aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ab0:	4298      	cmp	r0, r3
 8009ab2:	bfb8      	it	lt
 8009ab4:	4618      	movlt	r0, r3
 8009ab6:	e730      	b.n	800991a <_printf_float+0xc2>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	464a      	mov	r2, r9
 8009abc:	4631      	mov	r1, r6
 8009abe:	4628      	mov	r0, r5
 8009ac0:	47b8      	blx	r7
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	f43f af27 	beq.w	8009916 <_printf_float+0xbe>
 8009ac8:	f108 0801 	add.w	r8, r8, #1
 8009acc:	e7e6      	b.n	8009a9c <_printf_float+0x244>
 8009ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	dc39      	bgt.n	8009b48 <_printf_float+0x2f0>
 8009ad4:	4a1b      	ldr	r2, [pc, #108]	; (8009b44 <_printf_float+0x2ec>)
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	4631      	mov	r1, r6
 8009ada:	4628      	mov	r0, r5
 8009adc:	47b8      	blx	r7
 8009ade:	3001      	adds	r0, #1
 8009ae0:	f43f af19 	beq.w	8009916 <_printf_float+0xbe>
 8009ae4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	d102      	bne.n	8009af2 <_printf_float+0x29a>
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	07d9      	lsls	r1, r3, #31
 8009af0:	d5d8      	bpl.n	8009aa4 <_printf_float+0x24c>
 8009af2:	ee18 3a10 	vmov	r3, s16
 8009af6:	4652      	mov	r2, sl
 8009af8:	4631      	mov	r1, r6
 8009afa:	4628      	mov	r0, r5
 8009afc:	47b8      	blx	r7
 8009afe:	3001      	adds	r0, #1
 8009b00:	f43f af09 	beq.w	8009916 <_printf_float+0xbe>
 8009b04:	f04f 0900 	mov.w	r9, #0
 8009b08:	f104 0a1a 	add.w	sl, r4, #26
 8009b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0e:	425b      	negs	r3, r3
 8009b10:	454b      	cmp	r3, r9
 8009b12:	dc01      	bgt.n	8009b18 <_printf_float+0x2c0>
 8009b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b16:	e792      	b.n	8009a3e <_printf_float+0x1e6>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	4652      	mov	r2, sl
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4628      	mov	r0, r5
 8009b20:	47b8      	blx	r7
 8009b22:	3001      	adds	r0, #1
 8009b24:	f43f aef7 	beq.w	8009916 <_printf_float+0xbe>
 8009b28:	f109 0901 	add.w	r9, r9, #1
 8009b2c:	e7ee      	b.n	8009b0c <_printf_float+0x2b4>
 8009b2e:	bf00      	nop
 8009b30:	7fefffff 	.word	0x7fefffff
 8009b34:	08016ca0 	.word	0x08016ca0
 8009b38:	08016ca4 	.word	0x08016ca4
 8009b3c:	08016ca8 	.word	0x08016ca8
 8009b40:	08016cac 	.word	0x08016cac
 8009b44:	08016cb0 	.word	0x08016cb0
 8009b48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	bfa8      	it	ge
 8009b50:	461a      	movge	r2, r3
 8009b52:	2a00      	cmp	r2, #0
 8009b54:	4691      	mov	r9, r2
 8009b56:	dc37      	bgt.n	8009bc8 <_printf_float+0x370>
 8009b58:	f04f 0b00 	mov.w	fp, #0
 8009b5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b60:	f104 021a 	add.w	r2, r4, #26
 8009b64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b66:	9305      	str	r3, [sp, #20]
 8009b68:	eba3 0309 	sub.w	r3, r3, r9
 8009b6c:	455b      	cmp	r3, fp
 8009b6e:	dc33      	bgt.n	8009bd8 <_printf_float+0x380>
 8009b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b74:	429a      	cmp	r2, r3
 8009b76:	db3b      	blt.n	8009bf0 <_printf_float+0x398>
 8009b78:	6823      	ldr	r3, [r4, #0]
 8009b7a:	07da      	lsls	r2, r3, #31
 8009b7c:	d438      	bmi.n	8009bf0 <_printf_float+0x398>
 8009b7e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009b82:	eba2 0903 	sub.w	r9, r2, r3
 8009b86:	9b05      	ldr	r3, [sp, #20]
 8009b88:	1ad2      	subs	r2, r2, r3
 8009b8a:	4591      	cmp	r9, r2
 8009b8c:	bfa8      	it	ge
 8009b8e:	4691      	movge	r9, r2
 8009b90:	f1b9 0f00 	cmp.w	r9, #0
 8009b94:	dc35      	bgt.n	8009c02 <_printf_float+0x3aa>
 8009b96:	f04f 0800 	mov.w	r8, #0
 8009b9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b9e:	f104 0a1a 	add.w	sl, r4, #26
 8009ba2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ba6:	1a9b      	subs	r3, r3, r2
 8009ba8:	eba3 0309 	sub.w	r3, r3, r9
 8009bac:	4543      	cmp	r3, r8
 8009bae:	f77f af79 	ble.w	8009aa4 <_printf_float+0x24c>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4652      	mov	r2, sl
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4628      	mov	r0, r5
 8009bba:	47b8      	blx	r7
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	f43f aeaa 	beq.w	8009916 <_printf_float+0xbe>
 8009bc2:	f108 0801 	add.w	r8, r8, #1
 8009bc6:	e7ec      	b.n	8009ba2 <_printf_float+0x34a>
 8009bc8:	4613      	mov	r3, r2
 8009bca:	4631      	mov	r1, r6
 8009bcc:	4642      	mov	r2, r8
 8009bce:	4628      	mov	r0, r5
 8009bd0:	47b8      	blx	r7
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	d1c0      	bne.n	8009b58 <_printf_float+0x300>
 8009bd6:	e69e      	b.n	8009916 <_printf_float+0xbe>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	4631      	mov	r1, r6
 8009bdc:	4628      	mov	r0, r5
 8009bde:	9205      	str	r2, [sp, #20]
 8009be0:	47b8      	blx	r7
 8009be2:	3001      	adds	r0, #1
 8009be4:	f43f ae97 	beq.w	8009916 <_printf_float+0xbe>
 8009be8:	9a05      	ldr	r2, [sp, #20]
 8009bea:	f10b 0b01 	add.w	fp, fp, #1
 8009bee:	e7b9      	b.n	8009b64 <_printf_float+0x30c>
 8009bf0:	ee18 3a10 	vmov	r3, s16
 8009bf4:	4652      	mov	r2, sl
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	47b8      	blx	r7
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	d1be      	bne.n	8009b7e <_printf_float+0x326>
 8009c00:	e689      	b.n	8009916 <_printf_float+0xbe>
 8009c02:	9a05      	ldr	r2, [sp, #20]
 8009c04:	464b      	mov	r3, r9
 8009c06:	4442      	add	r2, r8
 8009c08:	4631      	mov	r1, r6
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	47b8      	blx	r7
 8009c0e:	3001      	adds	r0, #1
 8009c10:	d1c1      	bne.n	8009b96 <_printf_float+0x33e>
 8009c12:	e680      	b.n	8009916 <_printf_float+0xbe>
 8009c14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c16:	2a01      	cmp	r2, #1
 8009c18:	dc01      	bgt.n	8009c1e <_printf_float+0x3c6>
 8009c1a:	07db      	lsls	r3, r3, #31
 8009c1c:	d53a      	bpl.n	8009c94 <_printf_float+0x43c>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	4642      	mov	r2, r8
 8009c22:	4631      	mov	r1, r6
 8009c24:	4628      	mov	r0, r5
 8009c26:	47b8      	blx	r7
 8009c28:	3001      	adds	r0, #1
 8009c2a:	f43f ae74 	beq.w	8009916 <_printf_float+0xbe>
 8009c2e:	ee18 3a10 	vmov	r3, s16
 8009c32:	4652      	mov	r2, sl
 8009c34:	4631      	mov	r1, r6
 8009c36:	4628      	mov	r0, r5
 8009c38:	47b8      	blx	r7
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	f43f ae6b 	beq.w	8009916 <_printf_float+0xbe>
 8009c40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c44:	2200      	movs	r2, #0
 8009c46:	2300      	movs	r3, #0
 8009c48:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009c4c:	f7f6 ff44 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c50:	b9d8      	cbnz	r0, 8009c8a <_printf_float+0x432>
 8009c52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c56:	f108 0201 	add.w	r2, r8, #1
 8009c5a:	4631      	mov	r1, r6
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	47b8      	blx	r7
 8009c60:	3001      	adds	r0, #1
 8009c62:	d10e      	bne.n	8009c82 <_printf_float+0x42a>
 8009c64:	e657      	b.n	8009916 <_printf_float+0xbe>
 8009c66:	2301      	movs	r3, #1
 8009c68:	4652      	mov	r2, sl
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	47b8      	blx	r7
 8009c70:	3001      	adds	r0, #1
 8009c72:	f43f ae50 	beq.w	8009916 <_printf_float+0xbe>
 8009c76:	f108 0801 	add.w	r8, r8, #1
 8009c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	4543      	cmp	r3, r8
 8009c80:	dcf1      	bgt.n	8009c66 <_printf_float+0x40e>
 8009c82:	464b      	mov	r3, r9
 8009c84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c88:	e6da      	b.n	8009a40 <_printf_float+0x1e8>
 8009c8a:	f04f 0800 	mov.w	r8, #0
 8009c8e:	f104 0a1a 	add.w	sl, r4, #26
 8009c92:	e7f2      	b.n	8009c7a <_printf_float+0x422>
 8009c94:	2301      	movs	r3, #1
 8009c96:	4642      	mov	r2, r8
 8009c98:	e7df      	b.n	8009c5a <_printf_float+0x402>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	464a      	mov	r2, r9
 8009c9e:	4631      	mov	r1, r6
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	47b8      	blx	r7
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	f43f ae36 	beq.w	8009916 <_printf_float+0xbe>
 8009caa:	f108 0801 	add.w	r8, r8, #1
 8009cae:	68e3      	ldr	r3, [r4, #12]
 8009cb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cb2:	1a5b      	subs	r3, r3, r1
 8009cb4:	4543      	cmp	r3, r8
 8009cb6:	dcf0      	bgt.n	8009c9a <_printf_float+0x442>
 8009cb8:	e6f8      	b.n	8009aac <_printf_float+0x254>
 8009cba:	f04f 0800 	mov.w	r8, #0
 8009cbe:	f104 0919 	add.w	r9, r4, #25
 8009cc2:	e7f4      	b.n	8009cae <_printf_float+0x456>

08009cc4 <_printf_common>:
 8009cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc8:	4616      	mov	r6, r2
 8009cca:	4699      	mov	r9, r3
 8009ccc:	688a      	ldr	r2, [r1, #8]
 8009cce:	690b      	ldr	r3, [r1, #16]
 8009cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	bfb8      	it	lt
 8009cd8:	4613      	movlt	r3, r2
 8009cda:	6033      	str	r3, [r6, #0]
 8009cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ce0:	4607      	mov	r7, r0
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	b10a      	cbz	r2, 8009cea <_printf_common+0x26>
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	6033      	str	r3, [r6, #0]
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	0699      	lsls	r1, r3, #26
 8009cee:	bf42      	ittt	mi
 8009cf0:	6833      	ldrmi	r3, [r6, #0]
 8009cf2:	3302      	addmi	r3, #2
 8009cf4:	6033      	strmi	r3, [r6, #0]
 8009cf6:	6825      	ldr	r5, [r4, #0]
 8009cf8:	f015 0506 	ands.w	r5, r5, #6
 8009cfc:	d106      	bne.n	8009d0c <_printf_common+0x48>
 8009cfe:	f104 0a19 	add.w	sl, r4, #25
 8009d02:	68e3      	ldr	r3, [r4, #12]
 8009d04:	6832      	ldr	r2, [r6, #0]
 8009d06:	1a9b      	subs	r3, r3, r2
 8009d08:	42ab      	cmp	r3, r5
 8009d0a:	dc26      	bgt.n	8009d5a <_printf_common+0x96>
 8009d0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d10:	1e13      	subs	r3, r2, #0
 8009d12:	6822      	ldr	r2, [r4, #0]
 8009d14:	bf18      	it	ne
 8009d16:	2301      	movne	r3, #1
 8009d18:	0692      	lsls	r2, r2, #26
 8009d1a:	d42b      	bmi.n	8009d74 <_printf_common+0xb0>
 8009d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d20:	4649      	mov	r1, r9
 8009d22:	4638      	mov	r0, r7
 8009d24:	47c0      	blx	r8
 8009d26:	3001      	adds	r0, #1
 8009d28:	d01e      	beq.n	8009d68 <_printf_common+0xa4>
 8009d2a:	6823      	ldr	r3, [r4, #0]
 8009d2c:	6922      	ldr	r2, [r4, #16]
 8009d2e:	f003 0306 	and.w	r3, r3, #6
 8009d32:	2b04      	cmp	r3, #4
 8009d34:	bf02      	ittt	eq
 8009d36:	68e5      	ldreq	r5, [r4, #12]
 8009d38:	6833      	ldreq	r3, [r6, #0]
 8009d3a:	1aed      	subeq	r5, r5, r3
 8009d3c:	68a3      	ldr	r3, [r4, #8]
 8009d3e:	bf0c      	ite	eq
 8009d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d44:	2500      	movne	r5, #0
 8009d46:	4293      	cmp	r3, r2
 8009d48:	bfc4      	itt	gt
 8009d4a:	1a9b      	subgt	r3, r3, r2
 8009d4c:	18ed      	addgt	r5, r5, r3
 8009d4e:	2600      	movs	r6, #0
 8009d50:	341a      	adds	r4, #26
 8009d52:	42b5      	cmp	r5, r6
 8009d54:	d11a      	bne.n	8009d8c <_printf_common+0xc8>
 8009d56:	2000      	movs	r0, #0
 8009d58:	e008      	b.n	8009d6c <_printf_common+0xa8>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	4652      	mov	r2, sl
 8009d5e:	4649      	mov	r1, r9
 8009d60:	4638      	mov	r0, r7
 8009d62:	47c0      	blx	r8
 8009d64:	3001      	adds	r0, #1
 8009d66:	d103      	bne.n	8009d70 <_printf_common+0xac>
 8009d68:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d70:	3501      	adds	r5, #1
 8009d72:	e7c6      	b.n	8009d02 <_printf_common+0x3e>
 8009d74:	18e1      	adds	r1, r4, r3
 8009d76:	1c5a      	adds	r2, r3, #1
 8009d78:	2030      	movs	r0, #48	; 0x30
 8009d7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d7e:	4422      	add	r2, r4
 8009d80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d88:	3302      	adds	r3, #2
 8009d8a:	e7c7      	b.n	8009d1c <_printf_common+0x58>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	4622      	mov	r2, r4
 8009d90:	4649      	mov	r1, r9
 8009d92:	4638      	mov	r0, r7
 8009d94:	47c0      	blx	r8
 8009d96:	3001      	adds	r0, #1
 8009d98:	d0e6      	beq.n	8009d68 <_printf_common+0xa4>
 8009d9a:	3601      	adds	r6, #1
 8009d9c:	e7d9      	b.n	8009d52 <_printf_common+0x8e>
	...

08009da0 <_printf_i>:
 8009da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009da4:	7e0f      	ldrb	r7, [r1, #24]
 8009da6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009da8:	2f78      	cmp	r7, #120	; 0x78
 8009daa:	4691      	mov	r9, r2
 8009dac:	4680      	mov	r8, r0
 8009dae:	460c      	mov	r4, r1
 8009db0:	469a      	mov	sl, r3
 8009db2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009db6:	d807      	bhi.n	8009dc8 <_printf_i+0x28>
 8009db8:	2f62      	cmp	r7, #98	; 0x62
 8009dba:	d80a      	bhi.n	8009dd2 <_printf_i+0x32>
 8009dbc:	2f00      	cmp	r7, #0
 8009dbe:	f000 80d4 	beq.w	8009f6a <_printf_i+0x1ca>
 8009dc2:	2f58      	cmp	r7, #88	; 0x58
 8009dc4:	f000 80c0 	beq.w	8009f48 <_printf_i+0x1a8>
 8009dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009dd0:	e03a      	b.n	8009e48 <_printf_i+0xa8>
 8009dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dd6:	2b15      	cmp	r3, #21
 8009dd8:	d8f6      	bhi.n	8009dc8 <_printf_i+0x28>
 8009dda:	a101      	add	r1, pc, #4	; (adr r1, 8009de0 <_printf_i+0x40>)
 8009ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009de0:	08009e39 	.word	0x08009e39
 8009de4:	08009e4d 	.word	0x08009e4d
 8009de8:	08009dc9 	.word	0x08009dc9
 8009dec:	08009dc9 	.word	0x08009dc9
 8009df0:	08009dc9 	.word	0x08009dc9
 8009df4:	08009dc9 	.word	0x08009dc9
 8009df8:	08009e4d 	.word	0x08009e4d
 8009dfc:	08009dc9 	.word	0x08009dc9
 8009e00:	08009dc9 	.word	0x08009dc9
 8009e04:	08009dc9 	.word	0x08009dc9
 8009e08:	08009dc9 	.word	0x08009dc9
 8009e0c:	08009f51 	.word	0x08009f51
 8009e10:	08009e79 	.word	0x08009e79
 8009e14:	08009f0b 	.word	0x08009f0b
 8009e18:	08009dc9 	.word	0x08009dc9
 8009e1c:	08009dc9 	.word	0x08009dc9
 8009e20:	08009f73 	.word	0x08009f73
 8009e24:	08009dc9 	.word	0x08009dc9
 8009e28:	08009e79 	.word	0x08009e79
 8009e2c:	08009dc9 	.word	0x08009dc9
 8009e30:	08009dc9 	.word	0x08009dc9
 8009e34:	08009f13 	.word	0x08009f13
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	1d1a      	adds	r2, r3, #4
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	602a      	str	r2, [r5, #0]
 8009e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e09f      	b.n	8009f8c <_printf_i+0x1ec>
 8009e4c:	6820      	ldr	r0, [r4, #0]
 8009e4e:	682b      	ldr	r3, [r5, #0]
 8009e50:	0607      	lsls	r7, r0, #24
 8009e52:	f103 0104 	add.w	r1, r3, #4
 8009e56:	6029      	str	r1, [r5, #0]
 8009e58:	d501      	bpl.n	8009e5e <_printf_i+0xbe>
 8009e5a:	681e      	ldr	r6, [r3, #0]
 8009e5c:	e003      	b.n	8009e66 <_printf_i+0xc6>
 8009e5e:	0646      	lsls	r6, r0, #25
 8009e60:	d5fb      	bpl.n	8009e5a <_printf_i+0xba>
 8009e62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e66:	2e00      	cmp	r6, #0
 8009e68:	da03      	bge.n	8009e72 <_printf_i+0xd2>
 8009e6a:	232d      	movs	r3, #45	; 0x2d
 8009e6c:	4276      	negs	r6, r6
 8009e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e72:	485a      	ldr	r0, [pc, #360]	; (8009fdc <_printf_i+0x23c>)
 8009e74:	230a      	movs	r3, #10
 8009e76:	e012      	b.n	8009e9e <_printf_i+0xfe>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	6820      	ldr	r0, [r4, #0]
 8009e7c:	1d19      	adds	r1, r3, #4
 8009e7e:	6029      	str	r1, [r5, #0]
 8009e80:	0605      	lsls	r5, r0, #24
 8009e82:	d501      	bpl.n	8009e88 <_printf_i+0xe8>
 8009e84:	681e      	ldr	r6, [r3, #0]
 8009e86:	e002      	b.n	8009e8e <_printf_i+0xee>
 8009e88:	0641      	lsls	r1, r0, #25
 8009e8a:	d5fb      	bpl.n	8009e84 <_printf_i+0xe4>
 8009e8c:	881e      	ldrh	r6, [r3, #0]
 8009e8e:	4853      	ldr	r0, [pc, #332]	; (8009fdc <_printf_i+0x23c>)
 8009e90:	2f6f      	cmp	r7, #111	; 0x6f
 8009e92:	bf0c      	ite	eq
 8009e94:	2308      	moveq	r3, #8
 8009e96:	230a      	movne	r3, #10
 8009e98:	2100      	movs	r1, #0
 8009e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e9e:	6865      	ldr	r5, [r4, #4]
 8009ea0:	60a5      	str	r5, [r4, #8]
 8009ea2:	2d00      	cmp	r5, #0
 8009ea4:	bfa2      	ittt	ge
 8009ea6:	6821      	ldrge	r1, [r4, #0]
 8009ea8:	f021 0104 	bicge.w	r1, r1, #4
 8009eac:	6021      	strge	r1, [r4, #0]
 8009eae:	b90e      	cbnz	r6, 8009eb4 <_printf_i+0x114>
 8009eb0:	2d00      	cmp	r5, #0
 8009eb2:	d04b      	beq.n	8009f4c <_printf_i+0x1ac>
 8009eb4:	4615      	mov	r5, r2
 8009eb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009eba:	fb03 6711 	mls	r7, r3, r1, r6
 8009ebe:	5dc7      	ldrb	r7, [r0, r7]
 8009ec0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ec4:	4637      	mov	r7, r6
 8009ec6:	42bb      	cmp	r3, r7
 8009ec8:	460e      	mov	r6, r1
 8009eca:	d9f4      	bls.n	8009eb6 <_printf_i+0x116>
 8009ecc:	2b08      	cmp	r3, #8
 8009ece:	d10b      	bne.n	8009ee8 <_printf_i+0x148>
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	07de      	lsls	r6, r3, #31
 8009ed4:	d508      	bpl.n	8009ee8 <_printf_i+0x148>
 8009ed6:	6923      	ldr	r3, [r4, #16]
 8009ed8:	6861      	ldr	r1, [r4, #4]
 8009eda:	4299      	cmp	r1, r3
 8009edc:	bfde      	ittt	le
 8009ede:	2330      	movle	r3, #48	; 0x30
 8009ee0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ee4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ee8:	1b52      	subs	r2, r2, r5
 8009eea:	6122      	str	r2, [r4, #16]
 8009eec:	f8cd a000 	str.w	sl, [sp]
 8009ef0:	464b      	mov	r3, r9
 8009ef2:	aa03      	add	r2, sp, #12
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	4640      	mov	r0, r8
 8009ef8:	f7ff fee4 	bl	8009cc4 <_printf_common>
 8009efc:	3001      	adds	r0, #1
 8009efe:	d14a      	bne.n	8009f96 <_printf_i+0x1f6>
 8009f00:	f04f 30ff 	mov.w	r0, #4294967295
 8009f04:	b004      	add	sp, #16
 8009f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	f043 0320 	orr.w	r3, r3, #32
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	4833      	ldr	r0, [pc, #204]	; (8009fe0 <_printf_i+0x240>)
 8009f14:	2778      	movs	r7, #120	; 0x78
 8009f16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	6829      	ldr	r1, [r5, #0]
 8009f1e:	061f      	lsls	r7, r3, #24
 8009f20:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f24:	d402      	bmi.n	8009f2c <_printf_i+0x18c>
 8009f26:	065f      	lsls	r7, r3, #25
 8009f28:	bf48      	it	mi
 8009f2a:	b2b6      	uxthmi	r6, r6
 8009f2c:	07df      	lsls	r7, r3, #31
 8009f2e:	bf48      	it	mi
 8009f30:	f043 0320 	orrmi.w	r3, r3, #32
 8009f34:	6029      	str	r1, [r5, #0]
 8009f36:	bf48      	it	mi
 8009f38:	6023      	strmi	r3, [r4, #0]
 8009f3a:	b91e      	cbnz	r6, 8009f44 <_printf_i+0x1a4>
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	f023 0320 	bic.w	r3, r3, #32
 8009f42:	6023      	str	r3, [r4, #0]
 8009f44:	2310      	movs	r3, #16
 8009f46:	e7a7      	b.n	8009e98 <_printf_i+0xf8>
 8009f48:	4824      	ldr	r0, [pc, #144]	; (8009fdc <_printf_i+0x23c>)
 8009f4a:	e7e4      	b.n	8009f16 <_printf_i+0x176>
 8009f4c:	4615      	mov	r5, r2
 8009f4e:	e7bd      	b.n	8009ecc <_printf_i+0x12c>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	6826      	ldr	r6, [r4, #0]
 8009f54:	6961      	ldr	r1, [r4, #20]
 8009f56:	1d18      	adds	r0, r3, #4
 8009f58:	6028      	str	r0, [r5, #0]
 8009f5a:	0635      	lsls	r5, r6, #24
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	d501      	bpl.n	8009f64 <_printf_i+0x1c4>
 8009f60:	6019      	str	r1, [r3, #0]
 8009f62:	e002      	b.n	8009f6a <_printf_i+0x1ca>
 8009f64:	0670      	lsls	r0, r6, #25
 8009f66:	d5fb      	bpl.n	8009f60 <_printf_i+0x1c0>
 8009f68:	8019      	strh	r1, [r3, #0]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	6123      	str	r3, [r4, #16]
 8009f6e:	4615      	mov	r5, r2
 8009f70:	e7bc      	b.n	8009eec <_printf_i+0x14c>
 8009f72:	682b      	ldr	r3, [r5, #0]
 8009f74:	1d1a      	adds	r2, r3, #4
 8009f76:	602a      	str	r2, [r5, #0]
 8009f78:	681d      	ldr	r5, [r3, #0]
 8009f7a:	6862      	ldr	r2, [r4, #4]
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	4628      	mov	r0, r5
 8009f80:	f7f6 f92e 	bl	80001e0 <memchr>
 8009f84:	b108      	cbz	r0, 8009f8a <_printf_i+0x1ea>
 8009f86:	1b40      	subs	r0, r0, r5
 8009f88:	6060      	str	r0, [r4, #4]
 8009f8a:	6863      	ldr	r3, [r4, #4]
 8009f8c:	6123      	str	r3, [r4, #16]
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f94:	e7aa      	b.n	8009eec <_printf_i+0x14c>
 8009f96:	6923      	ldr	r3, [r4, #16]
 8009f98:	462a      	mov	r2, r5
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	47d0      	blx	sl
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	d0ad      	beq.n	8009f00 <_printf_i+0x160>
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	079b      	lsls	r3, r3, #30
 8009fa8:	d413      	bmi.n	8009fd2 <_printf_i+0x232>
 8009faa:	68e0      	ldr	r0, [r4, #12]
 8009fac:	9b03      	ldr	r3, [sp, #12]
 8009fae:	4298      	cmp	r0, r3
 8009fb0:	bfb8      	it	lt
 8009fb2:	4618      	movlt	r0, r3
 8009fb4:	e7a6      	b.n	8009f04 <_printf_i+0x164>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	4632      	mov	r2, r6
 8009fba:	4649      	mov	r1, r9
 8009fbc:	4640      	mov	r0, r8
 8009fbe:	47d0      	blx	sl
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	d09d      	beq.n	8009f00 <_printf_i+0x160>
 8009fc4:	3501      	adds	r5, #1
 8009fc6:	68e3      	ldr	r3, [r4, #12]
 8009fc8:	9903      	ldr	r1, [sp, #12]
 8009fca:	1a5b      	subs	r3, r3, r1
 8009fcc:	42ab      	cmp	r3, r5
 8009fce:	dcf2      	bgt.n	8009fb6 <_printf_i+0x216>
 8009fd0:	e7eb      	b.n	8009faa <_printf_i+0x20a>
 8009fd2:	2500      	movs	r5, #0
 8009fd4:	f104 0619 	add.w	r6, r4, #25
 8009fd8:	e7f5      	b.n	8009fc6 <_printf_i+0x226>
 8009fda:	bf00      	nop
 8009fdc:	08016cb2 	.word	0x08016cb2
 8009fe0:	08016cc3 	.word	0x08016cc3

08009fe4 <_scanf_float>:
 8009fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe8:	b087      	sub	sp, #28
 8009fea:	4617      	mov	r7, r2
 8009fec:	9303      	str	r3, [sp, #12]
 8009fee:	688b      	ldr	r3, [r1, #8]
 8009ff0:	1e5a      	subs	r2, r3, #1
 8009ff2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009ff6:	bf83      	ittte	hi
 8009ff8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009ffc:	195b      	addhi	r3, r3, r5
 8009ffe:	9302      	strhi	r3, [sp, #8]
 800a000:	2300      	movls	r3, #0
 800a002:	bf86      	itte	hi
 800a004:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a008:	608b      	strhi	r3, [r1, #8]
 800a00a:	9302      	strls	r3, [sp, #8]
 800a00c:	680b      	ldr	r3, [r1, #0]
 800a00e:	468b      	mov	fp, r1
 800a010:	2500      	movs	r5, #0
 800a012:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a016:	f84b 3b1c 	str.w	r3, [fp], #28
 800a01a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a01e:	4680      	mov	r8, r0
 800a020:	460c      	mov	r4, r1
 800a022:	465e      	mov	r6, fp
 800a024:	46aa      	mov	sl, r5
 800a026:	46a9      	mov	r9, r5
 800a028:	9501      	str	r5, [sp, #4]
 800a02a:	68a2      	ldr	r2, [r4, #8]
 800a02c:	b152      	cbz	r2, 800a044 <_scanf_float+0x60>
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	2b4e      	cmp	r3, #78	; 0x4e
 800a034:	d864      	bhi.n	800a100 <_scanf_float+0x11c>
 800a036:	2b40      	cmp	r3, #64	; 0x40
 800a038:	d83c      	bhi.n	800a0b4 <_scanf_float+0xd0>
 800a03a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a03e:	b2c8      	uxtb	r0, r1
 800a040:	280e      	cmp	r0, #14
 800a042:	d93a      	bls.n	800a0ba <_scanf_float+0xd6>
 800a044:	f1b9 0f00 	cmp.w	r9, #0
 800a048:	d003      	beq.n	800a052 <_scanf_float+0x6e>
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a056:	f1ba 0f01 	cmp.w	sl, #1
 800a05a:	f200 8113 	bhi.w	800a284 <_scanf_float+0x2a0>
 800a05e:	455e      	cmp	r6, fp
 800a060:	f200 8105 	bhi.w	800a26e <_scanf_float+0x28a>
 800a064:	2501      	movs	r5, #1
 800a066:	4628      	mov	r0, r5
 800a068:	b007      	add	sp, #28
 800a06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a072:	2a0d      	cmp	r2, #13
 800a074:	d8e6      	bhi.n	800a044 <_scanf_float+0x60>
 800a076:	a101      	add	r1, pc, #4	; (adr r1, 800a07c <_scanf_float+0x98>)
 800a078:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a07c:	0800a1bb 	.word	0x0800a1bb
 800a080:	0800a045 	.word	0x0800a045
 800a084:	0800a045 	.word	0x0800a045
 800a088:	0800a045 	.word	0x0800a045
 800a08c:	0800a21b 	.word	0x0800a21b
 800a090:	0800a1f3 	.word	0x0800a1f3
 800a094:	0800a045 	.word	0x0800a045
 800a098:	0800a045 	.word	0x0800a045
 800a09c:	0800a1c9 	.word	0x0800a1c9
 800a0a0:	0800a045 	.word	0x0800a045
 800a0a4:	0800a045 	.word	0x0800a045
 800a0a8:	0800a045 	.word	0x0800a045
 800a0ac:	0800a045 	.word	0x0800a045
 800a0b0:	0800a181 	.word	0x0800a181
 800a0b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a0b8:	e7db      	b.n	800a072 <_scanf_float+0x8e>
 800a0ba:	290e      	cmp	r1, #14
 800a0bc:	d8c2      	bhi.n	800a044 <_scanf_float+0x60>
 800a0be:	a001      	add	r0, pc, #4	; (adr r0, 800a0c4 <_scanf_float+0xe0>)
 800a0c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a0c4:	0800a173 	.word	0x0800a173
 800a0c8:	0800a045 	.word	0x0800a045
 800a0cc:	0800a173 	.word	0x0800a173
 800a0d0:	0800a207 	.word	0x0800a207
 800a0d4:	0800a045 	.word	0x0800a045
 800a0d8:	0800a121 	.word	0x0800a121
 800a0dc:	0800a15d 	.word	0x0800a15d
 800a0e0:	0800a15d 	.word	0x0800a15d
 800a0e4:	0800a15d 	.word	0x0800a15d
 800a0e8:	0800a15d 	.word	0x0800a15d
 800a0ec:	0800a15d 	.word	0x0800a15d
 800a0f0:	0800a15d 	.word	0x0800a15d
 800a0f4:	0800a15d 	.word	0x0800a15d
 800a0f8:	0800a15d 	.word	0x0800a15d
 800a0fc:	0800a15d 	.word	0x0800a15d
 800a100:	2b6e      	cmp	r3, #110	; 0x6e
 800a102:	d809      	bhi.n	800a118 <_scanf_float+0x134>
 800a104:	2b60      	cmp	r3, #96	; 0x60
 800a106:	d8b2      	bhi.n	800a06e <_scanf_float+0x8a>
 800a108:	2b54      	cmp	r3, #84	; 0x54
 800a10a:	d077      	beq.n	800a1fc <_scanf_float+0x218>
 800a10c:	2b59      	cmp	r3, #89	; 0x59
 800a10e:	d199      	bne.n	800a044 <_scanf_float+0x60>
 800a110:	2d07      	cmp	r5, #7
 800a112:	d197      	bne.n	800a044 <_scanf_float+0x60>
 800a114:	2508      	movs	r5, #8
 800a116:	e029      	b.n	800a16c <_scanf_float+0x188>
 800a118:	2b74      	cmp	r3, #116	; 0x74
 800a11a:	d06f      	beq.n	800a1fc <_scanf_float+0x218>
 800a11c:	2b79      	cmp	r3, #121	; 0x79
 800a11e:	e7f6      	b.n	800a10e <_scanf_float+0x12a>
 800a120:	6821      	ldr	r1, [r4, #0]
 800a122:	05c8      	lsls	r0, r1, #23
 800a124:	d51a      	bpl.n	800a15c <_scanf_float+0x178>
 800a126:	9b02      	ldr	r3, [sp, #8]
 800a128:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a12c:	6021      	str	r1, [r4, #0]
 800a12e:	f109 0901 	add.w	r9, r9, #1
 800a132:	b11b      	cbz	r3, 800a13c <_scanf_float+0x158>
 800a134:	3b01      	subs	r3, #1
 800a136:	3201      	adds	r2, #1
 800a138:	9302      	str	r3, [sp, #8]
 800a13a:	60a2      	str	r2, [r4, #8]
 800a13c:	68a3      	ldr	r3, [r4, #8]
 800a13e:	3b01      	subs	r3, #1
 800a140:	60a3      	str	r3, [r4, #8]
 800a142:	6923      	ldr	r3, [r4, #16]
 800a144:	3301      	adds	r3, #1
 800a146:	6123      	str	r3, [r4, #16]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3b01      	subs	r3, #1
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	607b      	str	r3, [r7, #4]
 800a150:	f340 8084 	ble.w	800a25c <_scanf_float+0x278>
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	3301      	adds	r3, #1
 800a158:	603b      	str	r3, [r7, #0]
 800a15a:	e766      	b.n	800a02a <_scanf_float+0x46>
 800a15c:	eb1a 0f05 	cmn.w	sl, r5
 800a160:	f47f af70 	bne.w	800a044 <_scanf_float+0x60>
 800a164:	6822      	ldr	r2, [r4, #0]
 800a166:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a16a:	6022      	str	r2, [r4, #0]
 800a16c:	f806 3b01 	strb.w	r3, [r6], #1
 800a170:	e7e4      	b.n	800a13c <_scanf_float+0x158>
 800a172:	6822      	ldr	r2, [r4, #0]
 800a174:	0610      	lsls	r0, r2, #24
 800a176:	f57f af65 	bpl.w	800a044 <_scanf_float+0x60>
 800a17a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a17e:	e7f4      	b.n	800a16a <_scanf_float+0x186>
 800a180:	f1ba 0f00 	cmp.w	sl, #0
 800a184:	d10e      	bne.n	800a1a4 <_scanf_float+0x1c0>
 800a186:	f1b9 0f00 	cmp.w	r9, #0
 800a18a:	d10e      	bne.n	800a1aa <_scanf_float+0x1c6>
 800a18c:	6822      	ldr	r2, [r4, #0]
 800a18e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a192:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a196:	d108      	bne.n	800a1aa <_scanf_float+0x1c6>
 800a198:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a19c:	6022      	str	r2, [r4, #0]
 800a19e:	f04f 0a01 	mov.w	sl, #1
 800a1a2:	e7e3      	b.n	800a16c <_scanf_float+0x188>
 800a1a4:	f1ba 0f02 	cmp.w	sl, #2
 800a1a8:	d055      	beq.n	800a256 <_scanf_float+0x272>
 800a1aa:	2d01      	cmp	r5, #1
 800a1ac:	d002      	beq.n	800a1b4 <_scanf_float+0x1d0>
 800a1ae:	2d04      	cmp	r5, #4
 800a1b0:	f47f af48 	bne.w	800a044 <_scanf_float+0x60>
 800a1b4:	3501      	adds	r5, #1
 800a1b6:	b2ed      	uxtb	r5, r5
 800a1b8:	e7d8      	b.n	800a16c <_scanf_float+0x188>
 800a1ba:	f1ba 0f01 	cmp.w	sl, #1
 800a1be:	f47f af41 	bne.w	800a044 <_scanf_float+0x60>
 800a1c2:	f04f 0a02 	mov.w	sl, #2
 800a1c6:	e7d1      	b.n	800a16c <_scanf_float+0x188>
 800a1c8:	b97d      	cbnz	r5, 800a1ea <_scanf_float+0x206>
 800a1ca:	f1b9 0f00 	cmp.w	r9, #0
 800a1ce:	f47f af3c 	bne.w	800a04a <_scanf_float+0x66>
 800a1d2:	6822      	ldr	r2, [r4, #0]
 800a1d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a1d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a1dc:	f47f af39 	bne.w	800a052 <_scanf_float+0x6e>
 800a1e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a1e4:	6022      	str	r2, [r4, #0]
 800a1e6:	2501      	movs	r5, #1
 800a1e8:	e7c0      	b.n	800a16c <_scanf_float+0x188>
 800a1ea:	2d03      	cmp	r5, #3
 800a1ec:	d0e2      	beq.n	800a1b4 <_scanf_float+0x1d0>
 800a1ee:	2d05      	cmp	r5, #5
 800a1f0:	e7de      	b.n	800a1b0 <_scanf_float+0x1cc>
 800a1f2:	2d02      	cmp	r5, #2
 800a1f4:	f47f af26 	bne.w	800a044 <_scanf_float+0x60>
 800a1f8:	2503      	movs	r5, #3
 800a1fa:	e7b7      	b.n	800a16c <_scanf_float+0x188>
 800a1fc:	2d06      	cmp	r5, #6
 800a1fe:	f47f af21 	bne.w	800a044 <_scanf_float+0x60>
 800a202:	2507      	movs	r5, #7
 800a204:	e7b2      	b.n	800a16c <_scanf_float+0x188>
 800a206:	6822      	ldr	r2, [r4, #0]
 800a208:	0591      	lsls	r1, r2, #22
 800a20a:	f57f af1b 	bpl.w	800a044 <_scanf_float+0x60>
 800a20e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a212:	6022      	str	r2, [r4, #0]
 800a214:	f8cd 9004 	str.w	r9, [sp, #4]
 800a218:	e7a8      	b.n	800a16c <_scanf_float+0x188>
 800a21a:	6822      	ldr	r2, [r4, #0]
 800a21c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a220:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a224:	d006      	beq.n	800a234 <_scanf_float+0x250>
 800a226:	0550      	lsls	r0, r2, #21
 800a228:	f57f af0c 	bpl.w	800a044 <_scanf_float+0x60>
 800a22c:	f1b9 0f00 	cmp.w	r9, #0
 800a230:	f43f af0f 	beq.w	800a052 <_scanf_float+0x6e>
 800a234:	0591      	lsls	r1, r2, #22
 800a236:	bf58      	it	pl
 800a238:	9901      	ldrpl	r1, [sp, #4]
 800a23a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a23e:	bf58      	it	pl
 800a240:	eba9 0101 	subpl.w	r1, r9, r1
 800a244:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a248:	bf58      	it	pl
 800a24a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a24e:	6022      	str	r2, [r4, #0]
 800a250:	f04f 0900 	mov.w	r9, #0
 800a254:	e78a      	b.n	800a16c <_scanf_float+0x188>
 800a256:	f04f 0a03 	mov.w	sl, #3
 800a25a:	e787      	b.n	800a16c <_scanf_float+0x188>
 800a25c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a260:	4639      	mov	r1, r7
 800a262:	4640      	mov	r0, r8
 800a264:	4798      	blx	r3
 800a266:	2800      	cmp	r0, #0
 800a268:	f43f aedf 	beq.w	800a02a <_scanf_float+0x46>
 800a26c:	e6ea      	b.n	800a044 <_scanf_float+0x60>
 800a26e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a272:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a276:	463a      	mov	r2, r7
 800a278:	4640      	mov	r0, r8
 800a27a:	4798      	blx	r3
 800a27c:	6923      	ldr	r3, [r4, #16]
 800a27e:	3b01      	subs	r3, #1
 800a280:	6123      	str	r3, [r4, #16]
 800a282:	e6ec      	b.n	800a05e <_scanf_float+0x7a>
 800a284:	1e6b      	subs	r3, r5, #1
 800a286:	2b06      	cmp	r3, #6
 800a288:	d825      	bhi.n	800a2d6 <_scanf_float+0x2f2>
 800a28a:	2d02      	cmp	r5, #2
 800a28c:	d836      	bhi.n	800a2fc <_scanf_float+0x318>
 800a28e:	455e      	cmp	r6, fp
 800a290:	f67f aee8 	bls.w	800a064 <_scanf_float+0x80>
 800a294:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a298:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a29c:	463a      	mov	r2, r7
 800a29e:	4640      	mov	r0, r8
 800a2a0:	4798      	blx	r3
 800a2a2:	6923      	ldr	r3, [r4, #16]
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	6123      	str	r3, [r4, #16]
 800a2a8:	e7f1      	b.n	800a28e <_scanf_float+0x2aa>
 800a2aa:	9802      	ldr	r0, [sp, #8]
 800a2ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a2b4:	9002      	str	r0, [sp, #8]
 800a2b6:	463a      	mov	r2, r7
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	4798      	blx	r3
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	6123      	str	r3, [r4, #16]
 800a2c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2c6:	fa5f fa8a 	uxtb.w	sl, sl
 800a2ca:	f1ba 0f02 	cmp.w	sl, #2
 800a2ce:	d1ec      	bne.n	800a2aa <_scanf_float+0x2c6>
 800a2d0:	3d03      	subs	r5, #3
 800a2d2:	b2ed      	uxtb	r5, r5
 800a2d4:	1b76      	subs	r6, r6, r5
 800a2d6:	6823      	ldr	r3, [r4, #0]
 800a2d8:	05da      	lsls	r2, r3, #23
 800a2da:	d52f      	bpl.n	800a33c <_scanf_float+0x358>
 800a2dc:	055b      	lsls	r3, r3, #21
 800a2de:	d510      	bpl.n	800a302 <_scanf_float+0x31e>
 800a2e0:	455e      	cmp	r6, fp
 800a2e2:	f67f aebf 	bls.w	800a064 <_scanf_float+0x80>
 800a2e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2ee:	463a      	mov	r2, r7
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	4798      	blx	r3
 800a2f4:	6923      	ldr	r3, [r4, #16]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	6123      	str	r3, [r4, #16]
 800a2fa:	e7f1      	b.n	800a2e0 <_scanf_float+0x2fc>
 800a2fc:	46aa      	mov	sl, r5
 800a2fe:	9602      	str	r6, [sp, #8]
 800a300:	e7df      	b.n	800a2c2 <_scanf_float+0x2de>
 800a302:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a306:	6923      	ldr	r3, [r4, #16]
 800a308:	2965      	cmp	r1, #101	; 0x65
 800a30a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a30e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a312:	6123      	str	r3, [r4, #16]
 800a314:	d00c      	beq.n	800a330 <_scanf_float+0x34c>
 800a316:	2945      	cmp	r1, #69	; 0x45
 800a318:	d00a      	beq.n	800a330 <_scanf_float+0x34c>
 800a31a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a31e:	463a      	mov	r2, r7
 800a320:	4640      	mov	r0, r8
 800a322:	4798      	blx	r3
 800a324:	6923      	ldr	r3, [r4, #16]
 800a326:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	1eb5      	subs	r5, r6, #2
 800a32e:	6123      	str	r3, [r4, #16]
 800a330:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a334:	463a      	mov	r2, r7
 800a336:	4640      	mov	r0, r8
 800a338:	4798      	blx	r3
 800a33a:	462e      	mov	r6, r5
 800a33c:	6825      	ldr	r5, [r4, #0]
 800a33e:	f015 0510 	ands.w	r5, r5, #16
 800a342:	d158      	bne.n	800a3f6 <_scanf_float+0x412>
 800a344:	7035      	strb	r5, [r6, #0]
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a34c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a350:	d11c      	bne.n	800a38c <_scanf_float+0x3a8>
 800a352:	9b01      	ldr	r3, [sp, #4]
 800a354:	454b      	cmp	r3, r9
 800a356:	eba3 0209 	sub.w	r2, r3, r9
 800a35a:	d124      	bne.n	800a3a6 <_scanf_float+0x3c2>
 800a35c:	2200      	movs	r2, #0
 800a35e:	4659      	mov	r1, fp
 800a360:	4640      	mov	r0, r8
 800a362:	f002 fbbd 	bl	800cae0 <_strtod_r>
 800a366:	9b03      	ldr	r3, [sp, #12]
 800a368:	6821      	ldr	r1, [r4, #0]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f011 0f02 	tst.w	r1, #2
 800a370:	ec57 6b10 	vmov	r6, r7, d0
 800a374:	f103 0204 	add.w	r2, r3, #4
 800a378:	d020      	beq.n	800a3bc <_scanf_float+0x3d8>
 800a37a:	9903      	ldr	r1, [sp, #12]
 800a37c:	600a      	str	r2, [r1, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	e9c3 6700 	strd	r6, r7, [r3]
 800a384:	68e3      	ldr	r3, [r4, #12]
 800a386:	3301      	adds	r3, #1
 800a388:	60e3      	str	r3, [r4, #12]
 800a38a:	e66c      	b.n	800a066 <_scanf_float+0x82>
 800a38c:	9b04      	ldr	r3, [sp, #16]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d0e4      	beq.n	800a35c <_scanf_float+0x378>
 800a392:	9905      	ldr	r1, [sp, #20]
 800a394:	230a      	movs	r3, #10
 800a396:	462a      	mov	r2, r5
 800a398:	3101      	adds	r1, #1
 800a39a:	4640      	mov	r0, r8
 800a39c:	f002 fc28 	bl	800cbf0 <_strtol_r>
 800a3a0:	9b04      	ldr	r3, [sp, #16]
 800a3a2:	9e05      	ldr	r6, [sp, #20]
 800a3a4:	1ac2      	subs	r2, r0, r3
 800a3a6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a3aa:	429e      	cmp	r6, r3
 800a3ac:	bf28      	it	cs
 800a3ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a3b2:	4912      	ldr	r1, [pc, #72]	; (800a3fc <_scanf_float+0x418>)
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	f000 f8e7 	bl	800a588 <siprintf>
 800a3ba:	e7cf      	b.n	800a35c <_scanf_float+0x378>
 800a3bc:	f011 0f04 	tst.w	r1, #4
 800a3c0:	9903      	ldr	r1, [sp, #12]
 800a3c2:	600a      	str	r2, [r1, #0]
 800a3c4:	d1db      	bne.n	800a37e <_scanf_float+0x39a>
 800a3c6:	f8d3 8000 	ldr.w	r8, [r3]
 800a3ca:	ee10 2a10 	vmov	r2, s0
 800a3ce:	ee10 0a10 	vmov	r0, s0
 800a3d2:	463b      	mov	r3, r7
 800a3d4:	4639      	mov	r1, r7
 800a3d6:	f7f6 fbb1 	bl	8000b3c <__aeabi_dcmpun>
 800a3da:	b128      	cbz	r0, 800a3e8 <_scanf_float+0x404>
 800a3dc:	4808      	ldr	r0, [pc, #32]	; (800a400 <_scanf_float+0x41c>)
 800a3de:	f000 f9ef 	bl	800a7c0 <nanf>
 800a3e2:	ed88 0a00 	vstr	s0, [r8]
 800a3e6:	e7cd      	b.n	800a384 <_scanf_float+0x3a0>
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	f7f6 fc04 	bl	8000bf8 <__aeabi_d2f>
 800a3f0:	f8c8 0000 	str.w	r0, [r8]
 800a3f4:	e7c6      	b.n	800a384 <_scanf_float+0x3a0>
 800a3f6:	2500      	movs	r5, #0
 800a3f8:	e635      	b.n	800a066 <_scanf_float+0x82>
 800a3fa:	bf00      	nop
 800a3fc:	08016cd4 	.word	0x08016cd4
 800a400:	08017065 	.word	0x08017065

0800a404 <std>:
 800a404:	2300      	movs	r3, #0
 800a406:	b510      	push	{r4, lr}
 800a408:	4604      	mov	r4, r0
 800a40a:	e9c0 3300 	strd	r3, r3, [r0]
 800a40e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a412:	6083      	str	r3, [r0, #8]
 800a414:	8181      	strh	r1, [r0, #12]
 800a416:	6643      	str	r3, [r0, #100]	; 0x64
 800a418:	81c2      	strh	r2, [r0, #14]
 800a41a:	6183      	str	r3, [r0, #24]
 800a41c:	4619      	mov	r1, r3
 800a41e:	2208      	movs	r2, #8
 800a420:	305c      	adds	r0, #92	; 0x5c
 800a422:	f000 f92e 	bl	800a682 <memset>
 800a426:	4b0d      	ldr	r3, [pc, #52]	; (800a45c <std+0x58>)
 800a428:	6263      	str	r3, [r4, #36]	; 0x24
 800a42a:	4b0d      	ldr	r3, [pc, #52]	; (800a460 <std+0x5c>)
 800a42c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a42e:	4b0d      	ldr	r3, [pc, #52]	; (800a464 <std+0x60>)
 800a430:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a432:	4b0d      	ldr	r3, [pc, #52]	; (800a468 <std+0x64>)
 800a434:	6323      	str	r3, [r4, #48]	; 0x30
 800a436:	4b0d      	ldr	r3, [pc, #52]	; (800a46c <std+0x68>)
 800a438:	6224      	str	r4, [r4, #32]
 800a43a:	429c      	cmp	r4, r3
 800a43c:	d006      	beq.n	800a44c <std+0x48>
 800a43e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a442:	4294      	cmp	r4, r2
 800a444:	d002      	beq.n	800a44c <std+0x48>
 800a446:	33d0      	adds	r3, #208	; 0xd0
 800a448:	429c      	cmp	r4, r3
 800a44a:	d105      	bne.n	800a458 <std+0x54>
 800a44c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a454:	f000 b9a2 	b.w	800a79c <__retarget_lock_init_recursive>
 800a458:	bd10      	pop	{r4, pc}
 800a45a:	bf00      	nop
 800a45c:	0800a5c9 	.word	0x0800a5c9
 800a460:	0800a5eb 	.word	0x0800a5eb
 800a464:	0800a623 	.word	0x0800a623
 800a468:	0800a647 	.word	0x0800a647
 800a46c:	20013968 	.word	0x20013968

0800a470 <stdio_exit_handler>:
 800a470:	4a02      	ldr	r2, [pc, #8]	; (800a47c <stdio_exit_handler+0xc>)
 800a472:	4903      	ldr	r1, [pc, #12]	; (800a480 <stdio_exit_handler+0x10>)
 800a474:	4803      	ldr	r0, [pc, #12]	; (800a484 <stdio_exit_handler+0x14>)
 800a476:	f000 b869 	b.w	800a54c <_fwalk_sglue>
 800a47a:	bf00      	nop
 800a47c:	20000bd0 	.word	0x20000bd0
 800a480:	0800cfb1 	.word	0x0800cfb1
 800a484:	20000bdc 	.word	0x20000bdc

0800a488 <cleanup_stdio>:
 800a488:	6841      	ldr	r1, [r0, #4]
 800a48a:	4b0c      	ldr	r3, [pc, #48]	; (800a4bc <cleanup_stdio+0x34>)
 800a48c:	4299      	cmp	r1, r3
 800a48e:	b510      	push	{r4, lr}
 800a490:	4604      	mov	r4, r0
 800a492:	d001      	beq.n	800a498 <cleanup_stdio+0x10>
 800a494:	f002 fd8c 	bl	800cfb0 <_fflush_r>
 800a498:	68a1      	ldr	r1, [r4, #8]
 800a49a:	4b09      	ldr	r3, [pc, #36]	; (800a4c0 <cleanup_stdio+0x38>)
 800a49c:	4299      	cmp	r1, r3
 800a49e:	d002      	beq.n	800a4a6 <cleanup_stdio+0x1e>
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f002 fd85 	bl	800cfb0 <_fflush_r>
 800a4a6:	68e1      	ldr	r1, [r4, #12]
 800a4a8:	4b06      	ldr	r3, [pc, #24]	; (800a4c4 <cleanup_stdio+0x3c>)
 800a4aa:	4299      	cmp	r1, r3
 800a4ac:	d004      	beq.n	800a4b8 <cleanup_stdio+0x30>
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4b4:	f002 bd7c 	b.w	800cfb0 <_fflush_r>
 800a4b8:	bd10      	pop	{r4, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20013968 	.word	0x20013968
 800a4c0:	200139d0 	.word	0x200139d0
 800a4c4:	20013a38 	.word	0x20013a38

0800a4c8 <global_stdio_init.part.0>:
 800a4c8:	b510      	push	{r4, lr}
 800a4ca:	4b0b      	ldr	r3, [pc, #44]	; (800a4f8 <global_stdio_init.part.0+0x30>)
 800a4cc:	4c0b      	ldr	r4, [pc, #44]	; (800a4fc <global_stdio_init.part.0+0x34>)
 800a4ce:	4a0c      	ldr	r2, [pc, #48]	; (800a500 <global_stdio_init.part.0+0x38>)
 800a4d0:	601a      	str	r2, [r3, #0]
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	2104      	movs	r1, #4
 800a4d8:	f7ff ff94 	bl	800a404 <std>
 800a4dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	2109      	movs	r1, #9
 800a4e4:	f7ff ff8e 	bl	800a404 <std>
 800a4e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a4ec:	2202      	movs	r2, #2
 800a4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4f2:	2112      	movs	r1, #18
 800a4f4:	f7ff bf86 	b.w	800a404 <std>
 800a4f8:	20013aa0 	.word	0x20013aa0
 800a4fc:	20013968 	.word	0x20013968
 800a500:	0800a471 	.word	0x0800a471

0800a504 <__sfp_lock_acquire>:
 800a504:	4801      	ldr	r0, [pc, #4]	; (800a50c <__sfp_lock_acquire+0x8>)
 800a506:	f000 b94a 	b.w	800a79e <__retarget_lock_acquire_recursive>
 800a50a:	bf00      	nop
 800a50c:	20013aa9 	.word	0x20013aa9

0800a510 <__sfp_lock_release>:
 800a510:	4801      	ldr	r0, [pc, #4]	; (800a518 <__sfp_lock_release+0x8>)
 800a512:	f000 b945 	b.w	800a7a0 <__retarget_lock_release_recursive>
 800a516:	bf00      	nop
 800a518:	20013aa9 	.word	0x20013aa9

0800a51c <__sinit>:
 800a51c:	b510      	push	{r4, lr}
 800a51e:	4604      	mov	r4, r0
 800a520:	f7ff fff0 	bl	800a504 <__sfp_lock_acquire>
 800a524:	6a23      	ldr	r3, [r4, #32]
 800a526:	b11b      	cbz	r3, 800a530 <__sinit+0x14>
 800a528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a52c:	f7ff bff0 	b.w	800a510 <__sfp_lock_release>
 800a530:	4b04      	ldr	r3, [pc, #16]	; (800a544 <__sinit+0x28>)
 800a532:	6223      	str	r3, [r4, #32]
 800a534:	4b04      	ldr	r3, [pc, #16]	; (800a548 <__sinit+0x2c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1f5      	bne.n	800a528 <__sinit+0xc>
 800a53c:	f7ff ffc4 	bl	800a4c8 <global_stdio_init.part.0>
 800a540:	e7f2      	b.n	800a528 <__sinit+0xc>
 800a542:	bf00      	nop
 800a544:	0800a489 	.word	0x0800a489
 800a548:	20013aa0 	.word	0x20013aa0

0800a54c <_fwalk_sglue>:
 800a54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a550:	4607      	mov	r7, r0
 800a552:	4688      	mov	r8, r1
 800a554:	4614      	mov	r4, r2
 800a556:	2600      	movs	r6, #0
 800a558:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a55c:	f1b9 0901 	subs.w	r9, r9, #1
 800a560:	d505      	bpl.n	800a56e <_fwalk_sglue+0x22>
 800a562:	6824      	ldr	r4, [r4, #0]
 800a564:	2c00      	cmp	r4, #0
 800a566:	d1f7      	bne.n	800a558 <_fwalk_sglue+0xc>
 800a568:	4630      	mov	r0, r6
 800a56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a56e:	89ab      	ldrh	r3, [r5, #12]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d907      	bls.n	800a584 <_fwalk_sglue+0x38>
 800a574:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a578:	3301      	adds	r3, #1
 800a57a:	d003      	beq.n	800a584 <_fwalk_sglue+0x38>
 800a57c:	4629      	mov	r1, r5
 800a57e:	4638      	mov	r0, r7
 800a580:	47c0      	blx	r8
 800a582:	4306      	orrs	r6, r0
 800a584:	3568      	adds	r5, #104	; 0x68
 800a586:	e7e9      	b.n	800a55c <_fwalk_sglue+0x10>

0800a588 <siprintf>:
 800a588:	b40e      	push	{r1, r2, r3}
 800a58a:	b500      	push	{lr}
 800a58c:	b09c      	sub	sp, #112	; 0x70
 800a58e:	ab1d      	add	r3, sp, #116	; 0x74
 800a590:	9002      	str	r0, [sp, #8]
 800a592:	9006      	str	r0, [sp, #24]
 800a594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a598:	4809      	ldr	r0, [pc, #36]	; (800a5c0 <siprintf+0x38>)
 800a59a:	9107      	str	r1, [sp, #28]
 800a59c:	9104      	str	r1, [sp, #16]
 800a59e:	4909      	ldr	r1, [pc, #36]	; (800a5c4 <siprintf+0x3c>)
 800a5a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5a4:	9105      	str	r1, [sp, #20]
 800a5a6:	6800      	ldr	r0, [r0, #0]
 800a5a8:	9301      	str	r3, [sp, #4]
 800a5aa:	a902      	add	r1, sp, #8
 800a5ac:	f002 fb7c 	bl	800cca8 <_svfiprintf_r>
 800a5b0:	9b02      	ldr	r3, [sp, #8]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	701a      	strb	r2, [r3, #0]
 800a5b6:	b01c      	add	sp, #112	; 0x70
 800a5b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5bc:	b003      	add	sp, #12
 800a5be:	4770      	bx	lr
 800a5c0:	20000c28 	.word	0x20000c28
 800a5c4:	ffff0208 	.word	0xffff0208

0800a5c8 <__sread>:
 800a5c8:	b510      	push	{r4, lr}
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d0:	f000 f886 	bl	800a6e0 <_read_r>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	bfab      	itete	ge
 800a5d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5da:	89a3      	ldrhlt	r3, [r4, #12]
 800a5dc:	181b      	addge	r3, r3, r0
 800a5de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5e2:	bfac      	ite	ge
 800a5e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5e6:	81a3      	strhlt	r3, [r4, #12]
 800a5e8:	bd10      	pop	{r4, pc}

0800a5ea <__swrite>:
 800a5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ee:	461f      	mov	r7, r3
 800a5f0:	898b      	ldrh	r3, [r1, #12]
 800a5f2:	05db      	lsls	r3, r3, #23
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	4616      	mov	r6, r2
 800a5fa:	d505      	bpl.n	800a608 <__swrite+0x1e>
 800a5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a600:	2302      	movs	r3, #2
 800a602:	2200      	movs	r2, #0
 800a604:	f000 f85a 	bl	800a6bc <_lseek_r>
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a60e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a612:	81a3      	strh	r3, [r4, #12]
 800a614:	4632      	mov	r2, r6
 800a616:	463b      	mov	r3, r7
 800a618:	4628      	mov	r0, r5
 800a61a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a61e:	f000 b881 	b.w	800a724 <_write_r>

0800a622 <__sseek>:
 800a622:	b510      	push	{r4, lr}
 800a624:	460c      	mov	r4, r1
 800a626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62a:	f000 f847 	bl	800a6bc <_lseek_r>
 800a62e:	1c43      	adds	r3, r0, #1
 800a630:	89a3      	ldrh	r3, [r4, #12]
 800a632:	bf15      	itete	ne
 800a634:	6560      	strne	r0, [r4, #84]	; 0x54
 800a636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a63a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a63e:	81a3      	strheq	r3, [r4, #12]
 800a640:	bf18      	it	ne
 800a642:	81a3      	strhne	r3, [r4, #12]
 800a644:	bd10      	pop	{r4, pc}

0800a646 <__sclose>:
 800a646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a64a:	f000 b827 	b.w	800a69c <_close_r>

0800a64e <memmove>:
 800a64e:	4288      	cmp	r0, r1
 800a650:	b510      	push	{r4, lr}
 800a652:	eb01 0402 	add.w	r4, r1, r2
 800a656:	d902      	bls.n	800a65e <memmove+0x10>
 800a658:	4284      	cmp	r4, r0
 800a65a:	4623      	mov	r3, r4
 800a65c:	d807      	bhi.n	800a66e <memmove+0x20>
 800a65e:	1e43      	subs	r3, r0, #1
 800a660:	42a1      	cmp	r1, r4
 800a662:	d008      	beq.n	800a676 <memmove+0x28>
 800a664:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a668:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a66c:	e7f8      	b.n	800a660 <memmove+0x12>
 800a66e:	4402      	add	r2, r0
 800a670:	4601      	mov	r1, r0
 800a672:	428a      	cmp	r2, r1
 800a674:	d100      	bne.n	800a678 <memmove+0x2a>
 800a676:	bd10      	pop	{r4, pc}
 800a678:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a67c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a680:	e7f7      	b.n	800a672 <memmove+0x24>

0800a682 <memset>:
 800a682:	4402      	add	r2, r0
 800a684:	4603      	mov	r3, r0
 800a686:	4293      	cmp	r3, r2
 800a688:	d100      	bne.n	800a68c <memset+0xa>
 800a68a:	4770      	bx	lr
 800a68c:	f803 1b01 	strb.w	r1, [r3], #1
 800a690:	e7f9      	b.n	800a686 <memset+0x4>
	...

0800a694 <_localeconv_r>:
 800a694:	4800      	ldr	r0, [pc, #0]	; (800a698 <_localeconv_r+0x4>)
 800a696:	4770      	bx	lr
 800a698:	20000d1c 	.word	0x20000d1c

0800a69c <_close_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	4d06      	ldr	r5, [pc, #24]	; (800a6b8 <_close_r+0x1c>)
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	4608      	mov	r0, r1
 800a6a6:	602b      	str	r3, [r5, #0]
 800a6a8:	f7f7 f9ad 	bl	8001a06 <_close>
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	d102      	bne.n	800a6b6 <_close_r+0x1a>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	b103      	cbz	r3, 800a6b6 <_close_r+0x1a>
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	bd38      	pop	{r3, r4, r5, pc}
 800a6b8:	20013aa4 	.word	0x20013aa4

0800a6bc <_lseek_r>:
 800a6bc:	b538      	push	{r3, r4, r5, lr}
 800a6be:	4d07      	ldr	r5, [pc, #28]	; (800a6dc <_lseek_r+0x20>)
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	4608      	mov	r0, r1
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	602a      	str	r2, [r5, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f7f7 f9c2 	bl	8001a54 <_lseek>
 800a6d0:	1c43      	adds	r3, r0, #1
 800a6d2:	d102      	bne.n	800a6da <_lseek_r+0x1e>
 800a6d4:	682b      	ldr	r3, [r5, #0]
 800a6d6:	b103      	cbz	r3, 800a6da <_lseek_r+0x1e>
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	20013aa4 	.word	0x20013aa4

0800a6e0 <_read_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	4d07      	ldr	r5, [pc, #28]	; (800a700 <_read_r+0x20>)
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	4608      	mov	r0, r1
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	602a      	str	r2, [r5, #0]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	f7f7 f950 	bl	8001994 <_read>
 800a6f4:	1c43      	adds	r3, r0, #1
 800a6f6:	d102      	bne.n	800a6fe <_read_r+0x1e>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	b103      	cbz	r3, 800a6fe <_read_r+0x1e>
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}
 800a700:	20013aa4 	.word	0x20013aa4

0800a704 <_sbrk_r>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	4d06      	ldr	r5, [pc, #24]	; (800a720 <_sbrk_r+0x1c>)
 800a708:	2300      	movs	r3, #0
 800a70a:	4604      	mov	r4, r0
 800a70c:	4608      	mov	r0, r1
 800a70e:	602b      	str	r3, [r5, #0]
 800a710:	f7f7 f9ae 	bl	8001a70 <_sbrk>
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	d102      	bne.n	800a71e <_sbrk_r+0x1a>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	b103      	cbz	r3, 800a71e <_sbrk_r+0x1a>
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	20013aa4 	.word	0x20013aa4

0800a724 <_write_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	4d07      	ldr	r5, [pc, #28]	; (800a744 <_write_r+0x20>)
 800a728:	4604      	mov	r4, r0
 800a72a:	4608      	mov	r0, r1
 800a72c:	4611      	mov	r1, r2
 800a72e:	2200      	movs	r2, #0
 800a730:	602a      	str	r2, [r5, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	f7f7 f94b 	bl	80019ce <_write>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d102      	bne.n	800a742 <_write_r+0x1e>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	b103      	cbz	r3, 800a742 <_write_r+0x1e>
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	20013aa4 	.word	0x20013aa4

0800a748 <__errno>:
 800a748:	4b01      	ldr	r3, [pc, #4]	; (800a750 <__errno+0x8>)
 800a74a:	6818      	ldr	r0, [r3, #0]
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	20000c28 	.word	0x20000c28

0800a754 <__libc_init_array>:
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	4d0d      	ldr	r5, [pc, #52]	; (800a78c <__libc_init_array+0x38>)
 800a758:	4c0d      	ldr	r4, [pc, #52]	; (800a790 <__libc_init_array+0x3c>)
 800a75a:	1b64      	subs	r4, r4, r5
 800a75c:	10a4      	asrs	r4, r4, #2
 800a75e:	2600      	movs	r6, #0
 800a760:	42a6      	cmp	r6, r4
 800a762:	d109      	bne.n	800a778 <__libc_init_array+0x24>
 800a764:	4d0b      	ldr	r5, [pc, #44]	; (800a794 <__libc_init_array+0x40>)
 800a766:	4c0c      	ldr	r4, [pc, #48]	; (800a798 <__libc_init_array+0x44>)
 800a768:	f003 fc44 	bl	800dff4 <_init>
 800a76c:	1b64      	subs	r4, r4, r5
 800a76e:	10a4      	asrs	r4, r4, #2
 800a770:	2600      	movs	r6, #0
 800a772:	42a6      	cmp	r6, r4
 800a774:	d105      	bne.n	800a782 <__libc_init_array+0x2e>
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	f855 3b04 	ldr.w	r3, [r5], #4
 800a77c:	4798      	blx	r3
 800a77e:	3601      	adds	r6, #1
 800a780:	e7ee      	b.n	800a760 <__libc_init_array+0xc>
 800a782:	f855 3b04 	ldr.w	r3, [r5], #4
 800a786:	4798      	blx	r3
 800a788:	3601      	adds	r6, #1
 800a78a:	e7f2      	b.n	800a772 <__libc_init_array+0x1e>
 800a78c:	080170e8 	.word	0x080170e8
 800a790:	080170e8 	.word	0x080170e8
 800a794:	080170e8 	.word	0x080170e8
 800a798:	080170ec 	.word	0x080170ec

0800a79c <__retarget_lock_init_recursive>:
 800a79c:	4770      	bx	lr

0800a79e <__retarget_lock_acquire_recursive>:
 800a79e:	4770      	bx	lr

0800a7a0 <__retarget_lock_release_recursive>:
 800a7a0:	4770      	bx	lr

0800a7a2 <memcpy>:
 800a7a2:	440a      	add	r2, r1
 800a7a4:	4291      	cmp	r1, r2
 800a7a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7aa:	d100      	bne.n	800a7ae <memcpy+0xc>
 800a7ac:	4770      	bx	lr
 800a7ae:	b510      	push	{r4, lr}
 800a7b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7b8:	4291      	cmp	r1, r2
 800a7ba:	d1f9      	bne.n	800a7b0 <memcpy+0xe>
 800a7bc:	bd10      	pop	{r4, pc}
	...

0800a7c0 <nanf>:
 800a7c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a7c8 <nanf+0x8>
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	7fc00000 	.word	0x7fc00000

0800a7cc <quorem>:
 800a7cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d0:	6903      	ldr	r3, [r0, #16]
 800a7d2:	690c      	ldr	r4, [r1, #16]
 800a7d4:	42a3      	cmp	r3, r4
 800a7d6:	4607      	mov	r7, r0
 800a7d8:	db7e      	blt.n	800a8d8 <quorem+0x10c>
 800a7da:	3c01      	subs	r4, #1
 800a7dc:	f101 0814 	add.w	r8, r1, #20
 800a7e0:	f100 0514 	add.w	r5, r0, #20
 800a7e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7e8:	9301      	str	r3, [sp, #4]
 800a7ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7fe:	fbb2 f6f3 	udiv	r6, r2, r3
 800a802:	d331      	bcc.n	800a868 <quorem+0x9c>
 800a804:	f04f 0e00 	mov.w	lr, #0
 800a808:	4640      	mov	r0, r8
 800a80a:	46ac      	mov	ip, r5
 800a80c:	46f2      	mov	sl, lr
 800a80e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a812:	b293      	uxth	r3, r2
 800a814:	fb06 e303 	mla	r3, r6, r3, lr
 800a818:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a81c:	0c1a      	lsrs	r2, r3, #16
 800a81e:	b29b      	uxth	r3, r3
 800a820:	ebaa 0303 	sub.w	r3, sl, r3
 800a824:	f8dc a000 	ldr.w	sl, [ip]
 800a828:	fa13 f38a 	uxtah	r3, r3, sl
 800a82c:	fb06 220e 	mla	r2, r6, lr, r2
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	9b00      	ldr	r3, [sp, #0]
 800a834:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a838:	b292      	uxth	r2, r2
 800a83a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a83e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a842:	f8bd 3000 	ldrh.w	r3, [sp]
 800a846:	4581      	cmp	r9, r0
 800a848:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a84c:	f84c 3b04 	str.w	r3, [ip], #4
 800a850:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a854:	d2db      	bcs.n	800a80e <quorem+0x42>
 800a856:	f855 300b 	ldr.w	r3, [r5, fp]
 800a85a:	b92b      	cbnz	r3, 800a868 <quorem+0x9c>
 800a85c:	9b01      	ldr	r3, [sp, #4]
 800a85e:	3b04      	subs	r3, #4
 800a860:	429d      	cmp	r5, r3
 800a862:	461a      	mov	r2, r3
 800a864:	d32c      	bcc.n	800a8c0 <quorem+0xf4>
 800a866:	613c      	str	r4, [r7, #16]
 800a868:	4638      	mov	r0, r7
 800a86a:	f001 f93d 	bl	800bae8 <__mcmp>
 800a86e:	2800      	cmp	r0, #0
 800a870:	db22      	blt.n	800a8b8 <quorem+0xec>
 800a872:	3601      	adds	r6, #1
 800a874:	4629      	mov	r1, r5
 800a876:	2000      	movs	r0, #0
 800a878:	f858 2b04 	ldr.w	r2, [r8], #4
 800a87c:	f8d1 c000 	ldr.w	ip, [r1]
 800a880:	b293      	uxth	r3, r2
 800a882:	1ac3      	subs	r3, r0, r3
 800a884:	0c12      	lsrs	r2, r2, #16
 800a886:	fa13 f38c 	uxtah	r3, r3, ip
 800a88a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a88e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a892:	b29b      	uxth	r3, r3
 800a894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a898:	45c1      	cmp	r9, r8
 800a89a:	f841 3b04 	str.w	r3, [r1], #4
 800a89e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a8a2:	d2e9      	bcs.n	800a878 <quorem+0xac>
 800a8a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8ac:	b922      	cbnz	r2, 800a8b8 <quorem+0xec>
 800a8ae:	3b04      	subs	r3, #4
 800a8b0:	429d      	cmp	r5, r3
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	d30a      	bcc.n	800a8cc <quorem+0x100>
 800a8b6:	613c      	str	r4, [r7, #16]
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	b003      	add	sp, #12
 800a8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c0:	6812      	ldr	r2, [r2, #0]
 800a8c2:	3b04      	subs	r3, #4
 800a8c4:	2a00      	cmp	r2, #0
 800a8c6:	d1ce      	bne.n	800a866 <quorem+0x9a>
 800a8c8:	3c01      	subs	r4, #1
 800a8ca:	e7c9      	b.n	800a860 <quorem+0x94>
 800a8cc:	6812      	ldr	r2, [r2, #0]
 800a8ce:	3b04      	subs	r3, #4
 800a8d0:	2a00      	cmp	r2, #0
 800a8d2:	d1f0      	bne.n	800a8b6 <quorem+0xea>
 800a8d4:	3c01      	subs	r4, #1
 800a8d6:	e7eb      	b.n	800a8b0 <quorem+0xe4>
 800a8d8:	2000      	movs	r0, #0
 800a8da:	e7ee      	b.n	800a8ba <quorem+0xee>
 800a8dc:	0000      	movs	r0, r0
	...

0800a8e0 <_dtoa_r>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	ed2d 8b04 	vpush	{d8-d9}
 800a8e8:	69c5      	ldr	r5, [r0, #28]
 800a8ea:	b093      	sub	sp, #76	; 0x4c
 800a8ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a8f0:	ec57 6b10 	vmov	r6, r7, d0
 800a8f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8f8:	9107      	str	r1, [sp, #28]
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	920a      	str	r2, [sp, #40]	; 0x28
 800a8fe:	930d      	str	r3, [sp, #52]	; 0x34
 800a900:	b975      	cbnz	r5, 800a920 <_dtoa_r+0x40>
 800a902:	2010      	movs	r0, #16
 800a904:	f7fe fe24 	bl	8009550 <malloc>
 800a908:	4602      	mov	r2, r0
 800a90a:	61e0      	str	r0, [r4, #28]
 800a90c:	b920      	cbnz	r0, 800a918 <_dtoa_r+0x38>
 800a90e:	4bae      	ldr	r3, [pc, #696]	; (800abc8 <_dtoa_r+0x2e8>)
 800a910:	21ef      	movs	r1, #239	; 0xef
 800a912:	48ae      	ldr	r0, [pc, #696]	; (800abcc <_dtoa_r+0x2ec>)
 800a914:	f002 fb90 	bl	800d038 <__assert_func>
 800a918:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a91c:	6005      	str	r5, [r0, #0]
 800a91e:	60c5      	str	r5, [r0, #12]
 800a920:	69e3      	ldr	r3, [r4, #28]
 800a922:	6819      	ldr	r1, [r3, #0]
 800a924:	b151      	cbz	r1, 800a93c <_dtoa_r+0x5c>
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	604a      	str	r2, [r1, #4]
 800a92a:	2301      	movs	r3, #1
 800a92c:	4093      	lsls	r3, r2
 800a92e:	608b      	str	r3, [r1, #8]
 800a930:	4620      	mov	r0, r4
 800a932:	f000 fe53 	bl	800b5dc <_Bfree>
 800a936:	69e3      	ldr	r3, [r4, #28]
 800a938:	2200      	movs	r2, #0
 800a93a:	601a      	str	r2, [r3, #0]
 800a93c:	1e3b      	subs	r3, r7, #0
 800a93e:	bfbb      	ittet	lt
 800a940:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a944:	9303      	strlt	r3, [sp, #12]
 800a946:	2300      	movge	r3, #0
 800a948:	2201      	movlt	r2, #1
 800a94a:	bfac      	ite	ge
 800a94c:	f8c8 3000 	strge.w	r3, [r8]
 800a950:	f8c8 2000 	strlt.w	r2, [r8]
 800a954:	4b9e      	ldr	r3, [pc, #632]	; (800abd0 <_dtoa_r+0x2f0>)
 800a956:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a95a:	ea33 0308 	bics.w	r3, r3, r8
 800a95e:	d11b      	bne.n	800a998 <_dtoa_r+0xb8>
 800a960:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a962:	f242 730f 	movw	r3, #9999	; 0x270f
 800a966:	6013      	str	r3, [r2, #0]
 800a968:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a96c:	4333      	orrs	r3, r6
 800a96e:	f000 8593 	beq.w	800b498 <_dtoa_r+0xbb8>
 800a972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a974:	b963      	cbnz	r3, 800a990 <_dtoa_r+0xb0>
 800a976:	4b97      	ldr	r3, [pc, #604]	; (800abd4 <_dtoa_r+0x2f4>)
 800a978:	e027      	b.n	800a9ca <_dtoa_r+0xea>
 800a97a:	4b97      	ldr	r3, [pc, #604]	; (800abd8 <_dtoa_r+0x2f8>)
 800a97c:	9300      	str	r3, [sp, #0]
 800a97e:	3308      	adds	r3, #8
 800a980:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a982:	6013      	str	r3, [r2, #0]
 800a984:	9800      	ldr	r0, [sp, #0]
 800a986:	b013      	add	sp, #76	; 0x4c
 800a988:	ecbd 8b04 	vpop	{d8-d9}
 800a98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a990:	4b90      	ldr	r3, [pc, #576]	; (800abd4 <_dtoa_r+0x2f4>)
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	3303      	adds	r3, #3
 800a996:	e7f3      	b.n	800a980 <_dtoa_r+0xa0>
 800a998:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a99c:	2200      	movs	r2, #0
 800a99e:	ec51 0b17 	vmov	r0, r1, d7
 800a9a2:	eeb0 8a47 	vmov.f32	s16, s14
 800a9a6:	eef0 8a67 	vmov.f32	s17, s15
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	f7f6 f894 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9b0:	4681      	mov	r9, r0
 800a9b2:	b160      	cbz	r0, 800a9ce <_dtoa_r+0xee>
 800a9b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	6013      	str	r3, [r2, #0]
 800a9ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 8568 	beq.w	800b492 <_dtoa_r+0xbb2>
 800a9c2:	4b86      	ldr	r3, [pc, #536]	; (800abdc <_dtoa_r+0x2fc>)
 800a9c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a9c6:	6013      	str	r3, [r2, #0]
 800a9c8:	3b01      	subs	r3, #1
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	e7da      	b.n	800a984 <_dtoa_r+0xa4>
 800a9ce:	aa10      	add	r2, sp, #64	; 0x40
 800a9d0:	a911      	add	r1, sp, #68	; 0x44
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	eeb0 0a48 	vmov.f32	s0, s16
 800a9d8:	eef0 0a68 	vmov.f32	s1, s17
 800a9dc:	f001 f99a 	bl	800bd14 <__d2b>
 800a9e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a9e4:	4682      	mov	sl, r0
 800a9e6:	2d00      	cmp	r5, #0
 800a9e8:	d07f      	beq.n	800aaea <_dtoa_r+0x20a>
 800a9ea:	ee18 3a90 	vmov	r3, s17
 800a9ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a9f6:	ec51 0b18 	vmov	r0, r1, d8
 800a9fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a9fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aa02:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800aa06:	4619      	mov	r1, r3
 800aa08:	2200      	movs	r2, #0
 800aa0a:	4b75      	ldr	r3, [pc, #468]	; (800abe0 <_dtoa_r+0x300>)
 800aa0c:	f7f5 fc44 	bl	8000298 <__aeabi_dsub>
 800aa10:	a367      	add	r3, pc, #412	; (adr r3, 800abb0 <_dtoa_r+0x2d0>)
 800aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa16:	f7f5 fdf7 	bl	8000608 <__aeabi_dmul>
 800aa1a:	a367      	add	r3, pc, #412	; (adr r3, 800abb8 <_dtoa_r+0x2d8>)
 800aa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa20:	f7f5 fc3c 	bl	800029c <__adddf3>
 800aa24:	4606      	mov	r6, r0
 800aa26:	4628      	mov	r0, r5
 800aa28:	460f      	mov	r7, r1
 800aa2a:	f7f5 fd83 	bl	8000534 <__aeabi_i2d>
 800aa2e:	a364      	add	r3, pc, #400	; (adr r3, 800abc0 <_dtoa_r+0x2e0>)
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	f7f5 fde8 	bl	8000608 <__aeabi_dmul>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	4639      	mov	r1, r7
 800aa40:	f7f5 fc2c 	bl	800029c <__adddf3>
 800aa44:	4606      	mov	r6, r0
 800aa46:	460f      	mov	r7, r1
 800aa48:	f7f6 f88e 	bl	8000b68 <__aeabi_d2iz>
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	4683      	mov	fp, r0
 800aa50:	2300      	movs	r3, #0
 800aa52:	4630      	mov	r0, r6
 800aa54:	4639      	mov	r1, r7
 800aa56:	f7f6 f849 	bl	8000aec <__aeabi_dcmplt>
 800aa5a:	b148      	cbz	r0, 800aa70 <_dtoa_r+0x190>
 800aa5c:	4658      	mov	r0, fp
 800aa5e:	f7f5 fd69 	bl	8000534 <__aeabi_i2d>
 800aa62:	4632      	mov	r2, r6
 800aa64:	463b      	mov	r3, r7
 800aa66:	f7f6 f837 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa6a:	b908      	cbnz	r0, 800aa70 <_dtoa_r+0x190>
 800aa6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa70:	f1bb 0f16 	cmp.w	fp, #22
 800aa74:	d857      	bhi.n	800ab26 <_dtoa_r+0x246>
 800aa76:	4b5b      	ldr	r3, [pc, #364]	; (800abe4 <_dtoa_r+0x304>)
 800aa78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	ec51 0b18 	vmov	r0, r1, d8
 800aa84:	f7f6 f832 	bl	8000aec <__aeabi_dcmplt>
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d04e      	beq.n	800ab2a <_dtoa_r+0x24a>
 800aa8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa90:	2300      	movs	r3, #0
 800aa92:	930c      	str	r3, [sp, #48]	; 0x30
 800aa94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa96:	1b5b      	subs	r3, r3, r5
 800aa98:	1e5a      	subs	r2, r3, #1
 800aa9a:	bf45      	ittet	mi
 800aa9c:	f1c3 0301 	rsbmi	r3, r3, #1
 800aaa0:	9305      	strmi	r3, [sp, #20]
 800aaa2:	2300      	movpl	r3, #0
 800aaa4:	2300      	movmi	r3, #0
 800aaa6:	9206      	str	r2, [sp, #24]
 800aaa8:	bf54      	ite	pl
 800aaaa:	9305      	strpl	r3, [sp, #20]
 800aaac:	9306      	strmi	r3, [sp, #24]
 800aaae:	f1bb 0f00 	cmp.w	fp, #0
 800aab2:	db3c      	blt.n	800ab2e <_dtoa_r+0x24e>
 800aab4:	9b06      	ldr	r3, [sp, #24]
 800aab6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aaba:	445b      	add	r3, fp
 800aabc:	9306      	str	r3, [sp, #24]
 800aabe:	2300      	movs	r3, #0
 800aac0:	9308      	str	r3, [sp, #32]
 800aac2:	9b07      	ldr	r3, [sp, #28]
 800aac4:	2b09      	cmp	r3, #9
 800aac6:	d868      	bhi.n	800ab9a <_dtoa_r+0x2ba>
 800aac8:	2b05      	cmp	r3, #5
 800aaca:	bfc4      	itt	gt
 800aacc:	3b04      	subgt	r3, #4
 800aace:	9307      	strgt	r3, [sp, #28]
 800aad0:	9b07      	ldr	r3, [sp, #28]
 800aad2:	f1a3 0302 	sub.w	r3, r3, #2
 800aad6:	bfcc      	ite	gt
 800aad8:	2500      	movgt	r5, #0
 800aada:	2501      	movle	r5, #1
 800aadc:	2b03      	cmp	r3, #3
 800aade:	f200 8085 	bhi.w	800abec <_dtoa_r+0x30c>
 800aae2:	e8df f003 	tbb	[pc, r3]
 800aae6:	3b2e      	.short	0x3b2e
 800aae8:	5839      	.short	0x5839
 800aaea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aaee:	441d      	add	r5, r3
 800aaf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aaf4:	2b20      	cmp	r3, #32
 800aaf6:	bfc1      	itttt	gt
 800aaf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aafc:	fa08 f803 	lslgt.w	r8, r8, r3
 800ab00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ab04:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ab08:	bfd6      	itet	le
 800ab0a:	f1c3 0320 	rsble	r3, r3, #32
 800ab0e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ab12:	fa06 f003 	lslle.w	r0, r6, r3
 800ab16:	f7f5 fcfd 	bl	8000514 <__aeabi_ui2d>
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ab20:	3d01      	subs	r5, #1
 800ab22:	920e      	str	r2, [sp, #56]	; 0x38
 800ab24:	e76f      	b.n	800aa06 <_dtoa_r+0x126>
 800ab26:	2301      	movs	r3, #1
 800ab28:	e7b3      	b.n	800aa92 <_dtoa_r+0x1b2>
 800ab2a:	900c      	str	r0, [sp, #48]	; 0x30
 800ab2c:	e7b2      	b.n	800aa94 <_dtoa_r+0x1b4>
 800ab2e:	9b05      	ldr	r3, [sp, #20]
 800ab30:	eba3 030b 	sub.w	r3, r3, fp
 800ab34:	9305      	str	r3, [sp, #20]
 800ab36:	f1cb 0300 	rsb	r3, fp, #0
 800ab3a:	9308      	str	r3, [sp, #32]
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab40:	e7bf      	b.n	800aac2 <_dtoa_r+0x1e2>
 800ab42:	2300      	movs	r3, #0
 800ab44:	9309      	str	r3, [sp, #36]	; 0x24
 800ab46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	dc52      	bgt.n	800abf2 <_dtoa_r+0x312>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	9301      	str	r3, [sp, #4]
 800ab50:	9304      	str	r3, [sp, #16]
 800ab52:	461a      	mov	r2, r3
 800ab54:	920a      	str	r2, [sp, #40]	; 0x28
 800ab56:	e00b      	b.n	800ab70 <_dtoa_r+0x290>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e7f3      	b.n	800ab44 <_dtoa_r+0x264>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab62:	445b      	add	r3, fp
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	3301      	adds	r3, #1
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	9304      	str	r3, [sp, #16]
 800ab6c:	bfb8      	it	lt
 800ab6e:	2301      	movlt	r3, #1
 800ab70:	69e0      	ldr	r0, [r4, #28]
 800ab72:	2100      	movs	r1, #0
 800ab74:	2204      	movs	r2, #4
 800ab76:	f102 0614 	add.w	r6, r2, #20
 800ab7a:	429e      	cmp	r6, r3
 800ab7c:	d93d      	bls.n	800abfa <_dtoa_r+0x31a>
 800ab7e:	6041      	str	r1, [r0, #4]
 800ab80:	4620      	mov	r0, r4
 800ab82:	f000 fceb 	bl	800b55c <_Balloc>
 800ab86:	9000      	str	r0, [sp, #0]
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d139      	bne.n	800ac00 <_dtoa_r+0x320>
 800ab8c:	4b16      	ldr	r3, [pc, #88]	; (800abe8 <_dtoa_r+0x308>)
 800ab8e:	4602      	mov	r2, r0
 800ab90:	f240 11af 	movw	r1, #431	; 0x1af
 800ab94:	e6bd      	b.n	800a912 <_dtoa_r+0x32>
 800ab96:	2301      	movs	r3, #1
 800ab98:	e7e1      	b.n	800ab5e <_dtoa_r+0x27e>
 800ab9a:	2501      	movs	r5, #1
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	9307      	str	r3, [sp, #28]
 800aba0:	9509      	str	r5, [sp, #36]	; 0x24
 800aba2:	f04f 33ff 	mov.w	r3, #4294967295
 800aba6:	9301      	str	r3, [sp, #4]
 800aba8:	9304      	str	r3, [sp, #16]
 800abaa:	2200      	movs	r2, #0
 800abac:	2312      	movs	r3, #18
 800abae:	e7d1      	b.n	800ab54 <_dtoa_r+0x274>
 800abb0:	636f4361 	.word	0x636f4361
 800abb4:	3fd287a7 	.word	0x3fd287a7
 800abb8:	8b60c8b3 	.word	0x8b60c8b3
 800abbc:	3fc68a28 	.word	0x3fc68a28
 800abc0:	509f79fb 	.word	0x509f79fb
 800abc4:	3fd34413 	.word	0x3fd34413
 800abc8:	08016ce6 	.word	0x08016ce6
 800abcc:	08016cfd 	.word	0x08016cfd
 800abd0:	7ff00000 	.word	0x7ff00000
 800abd4:	08016ce2 	.word	0x08016ce2
 800abd8:	08016cd9 	.word	0x08016cd9
 800abdc:	08016cb1 	.word	0x08016cb1
 800abe0:	3ff80000 	.word	0x3ff80000
 800abe4:	08016de8 	.word	0x08016de8
 800abe8:	08016d55 	.word	0x08016d55
 800abec:	2301      	movs	r3, #1
 800abee:	9309      	str	r3, [sp, #36]	; 0x24
 800abf0:	e7d7      	b.n	800aba2 <_dtoa_r+0x2c2>
 800abf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abf4:	9301      	str	r3, [sp, #4]
 800abf6:	9304      	str	r3, [sp, #16]
 800abf8:	e7ba      	b.n	800ab70 <_dtoa_r+0x290>
 800abfa:	3101      	adds	r1, #1
 800abfc:	0052      	lsls	r2, r2, #1
 800abfe:	e7ba      	b.n	800ab76 <_dtoa_r+0x296>
 800ac00:	69e3      	ldr	r3, [r4, #28]
 800ac02:	9a00      	ldr	r2, [sp, #0]
 800ac04:	601a      	str	r2, [r3, #0]
 800ac06:	9b04      	ldr	r3, [sp, #16]
 800ac08:	2b0e      	cmp	r3, #14
 800ac0a:	f200 80a8 	bhi.w	800ad5e <_dtoa_r+0x47e>
 800ac0e:	2d00      	cmp	r5, #0
 800ac10:	f000 80a5 	beq.w	800ad5e <_dtoa_r+0x47e>
 800ac14:	f1bb 0f00 	cmp.w	fp, #0
 800ac18:	dd38      	ble.n	800ac8c <_dtoa_r+0x3ac>
 800ac1a:	4bc0      	ldr	r3, [pc, #768]	; (800af1c <_dtoa_r+0x63c>)
 800ac1c:	f00b 020f 	and.w	r2, fp, #15
 800ac20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ac28:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ac2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ac30:	d019      	beq.n	800ac66 <_dtoa_r+0x386>
 800ac32:	4bbb      	ldr	r3, [pc, #748]	; (800af20 <_dtoa_r+0x640>)
 800ac34:	ec51 0b18 	vmov	r0, r1, d8
 800ac38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac3c:	f7f5 fe0e 	bl	800085c <__aeabi_ddiv>
 800ac40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac44:	f008 080f 	and.w	r8, r8, #15
 800ac48:	2503      	movs	r5, #3
 800ac4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800af20 <_dtoa_r+0x640>
 800ac4e:	f1b8 0f00 	cmp.w	r8, #0
 800ac52:	d10a      	bne.n	800ac6a <_dtoa_r+0x38a>
 800ac54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac58:	4632      	mov	r2, r6
 800ac5a:	463b      	mov	r3, r7
 800ac5c:	f7f5 fdfe 	bl	800085c <__aeabi_ddiv>
 800ac60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac64:	e02b      	b.n	800acbe <_dtoa_r+0x3de>
 800ac66:	2502      	movs	r5, #2
 800ac68:	e7ef      	b.n	800ac4a <_dtoa_r+0x36a>
 800ac6a:	f018 0f01 	tst.w	r8, #1
 800ac6e:	d008      	beq.n	800ac82 <_dtoa_r+0x3a2>
 800ac70:	4630      	mov	r0, r6
 800ac72:	4639      	mov	r1, r7
 800ac74:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac78:	f7f5 fcc6 	bl	8000608 <__aeabi_dmul>
 800ac7c:	3501      	adds	r5, #1
 800ac7e:	4606      	mov	r6, r0
 800ac80:	460f      	mov	r7, r1
 800ac82:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac86:	f109 0908 	add.w	r9, r9, #8
 800ac8a:	e7e0      	b.n	800ac4e <_dtoa_r+0x36e>
 800ac8c:	f000 809f 	beq.w	800adce <_dtoa_r+0x4ee>
 800ac90:	f1cb 0600 	rsb	r6, fp, #0
 800ac94:	4ba1      	ldr	r3, [pc, #644]	; (800af1c <_dtoa_r+0x63c>)
 800ac96:	4fa2      	ldr	r7, [pc, #648]	; (800af20 <_dtoa_r+0x640>)
 800ac98:	f006 020f 	and.w	r2, r6, #15
 800ac9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca4:	ec51 0b18 	vmov	r0, r1, d8
 800aca8:	f7f5 fcae 	bl	8000608 <__aeabi_dmul>
 800acac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acb0:	1136      	asrs	r6, r6, #4
 800acb2:	2300      	movs	r3, #0
 800acb4:	2502      	movs	r5, #2
 800acb6:	2e00      	cmp	r6, #0
 800acb8:	d17e      	bne.n	800adb8 <_dtoa_r+0x4d8>
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1d0      	bne.n	800ac60 <_dtoa_r+0x380>
 800acbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f000 8084 	beq.w	800add2 <_dtoa_r+0x4f2>
 800acca:	4b96      	ldr	r3, [pc, #600]	; (800af24 <_dtoa_r+0x644>)
 800accc:	2200      	movs	r2, #0
 800acce:	4640      	mov	r0, r8
 800acd0:	4649      	mov	r1, r9
 800acd2:	f7f5 ff0b 	bl	8000aec <__aeabi_dcmplt>
 800acd6:	2800      	cmp	r0, #0
 800acd8:	d07b      	beq.n	800add2 <_dtoa_r+0x4f2>
 800acda:	9b04      	ldr	r3, [sp, #16]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d078      	beq.n	800add2 <_dtoa_r+0x4f2>
 800ace0:	9b01      	ldr	r3, [sp, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	dd39      	ble.n	800ad5a <_dtoa_r+0x47a>
 800ace6:	4b90      	ldr	r3, [pc, #576]	; (800af28 <_dtoa_r+0x648>)
 800ace8:	2200      	movs	r2, #0
 800acea:	4640      	mov	r0, r8
 800acec:	4649      	mov	r1, r9
 800acee:	f7f5 fc8b 	bl	8000608 <__aeabi_dmul>
 800acf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acf6:	9e01      	ldr	r6, [sp, #4]
 800acf8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800acfc:	3501      	adds	r5, #1
 800acfe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ad02:	4628      	mov	r0, r5
 800ad04:	f7f5 fc16 	bl	8000534 <__aeabi_i2d>
 800ad08:	4642      	mov	r2, r8
 800ad0a:	464b      	mov	r3, r9
 800ad0c:	f7f5 fc7c 	bl	8000608 <__aeabi_dmul>
 800ad10:	4b86      	ldr	r3, [pc, #536]	; (800af2c <_dtoa_r+0x64c>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	f7f5 fac2 	bl	800029c <__adddf3>
 800ad18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ad1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad20:	9303      	str	r3, [sp, #12]
 800ad22:	2e00      	cmp	r6, #0
 800ad24:	d158      	bne.n	800add8 <_dtoa_r+0x4f8>
 800ad26:	4b82      	ldr	r3, [pc, #520]	; (800af30 <_dtoa_r+0x650>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	4640      	mov	r0, r8
 800ad2c:	4649      	mov	r1, r9
 800ad2e:	f7f5 fab3 	bl	8000298 <__aeabi_dsub>
 800ad32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad36:	4680      	mov	r8, r0
 800ad38:	4689      	mov	r9, r1
 800ad3a:	f7f5 fef5 	bl	8000b28 <__aeabi_dcmpgt>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	f040 8296 	bne.w	800b270 <_dtoa_r+0x990>
 800ad44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ad48:	4640      	mov	r0, r8
 800ad4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad4e:	4649      	mov	r1, r9
 800ad50:	f7f5 fecc 	bl	8000aec <__aeabi_dcmplt>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	f040 8289 	bne.w	800b26c <_dtoa_r+0x98c>
 800ad5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ad5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f2c0 814e 	blt.w	800b002 <_dtoa_r+0x722>
 800ad66:	f1bb 0f0e 	cmp.w	fp, #14
 800ad6a:	f300 814a 	bgt.w	800b002 <_dtoa_r+0x722>
 800ad6e:	4b6b      	ldr	r3, [pc, #428]	; (800af1c <_dtoa_r+0x63c>)
 800ad70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f280 80dc 	bge.w	800af38 <_dtoa_r+0x658>
 800ad80:	9b04      	ldr	r3, [sp, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f300 80d8 	bgt.w	800af38 <_dtoa_r+0x658>
 800ad88:	f040 826f 	bne.w	800b26a <_dtoa_r+0x98a>
 800ad8c:	4b68      	ldr	r3, [pc, #416]	; (800af30 <_dtoa_r+0x650>)
 800ad8e:	2200      	movs	r2, #0
 800ad90:	4640      	mov	r0, r8
 800ad92:	4649      	mov	r1, r9
 800ad94:	f7f5 fc38 	bl	8000608 <__aeabi_dmul>
 800ad98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad9c:	f7f5 feba 	bl	8000b14 <__aeabi_dcmpge>
 800ada0:	9e04      	ldr	r6, [sp, #16]
 800ada2:	4637      	mov	r7, r6
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f040 8245 	bne.w	800b234 <_dtoa_r+0x954>
 800adaa:	9d00      	ldr	r5, [sp, #0]
 800adac:	2331      	movs	r3, #49	; 0x31
 800adae:	f805 3b01 	strb.w	r3, [r5], #1
 800adb2:	f10b 0b01 	add.w	fp, fp, #1
 800adb6:	e241      	b.n	800b23c <_dtoa_r+0x95c>
 800adb8:	07f2      	lsls	r2, r6, #31
 800adba:	d505      	bpl.n	800adc8 <_dtoa_r+0x4e8>
 800adbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adc0:	f7f5 fc22 	bl	8000608 <__aeabi_dmul>
 800adc4:	3501      	adds	r5, #1
 800adc6:	2301      	movs	r3, #1
 800adc8:	1076      	asrs	r6, r6, #1
 800adca:	3708      	adds	r7, #8
 800adcc:	e773      	b.n	800acb6 <_dtoa_r+0x3d6>
 800adce:	2502      	movs	r5, #2
 800add0:	e775      	b.n	800acbe <_dtoa_r+0x3de>
 800add2:	9e04      	ldr	r6, [sp, #16]
 800add4:	465f      	mov	r7, fp
 800add6:	e792      	b.n	800acfe <_dtoa_r+0x41e>
 800add8:	9900      	ldr	r1, [sp, #0]
 800adda:	4b50      	ldr	r3, [pc, #320]	; (800af1c <_dtoa_r+0x63c>)
 800addc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ade0:	4431      	add	r1, r6
 800ade2:	9102      	str	r1, [sp, #8]
 800ade4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ade6:	eeb0 9a47 	vmov.f32	s18, s14
 800adea:	eef0 9a67 	vmov.f32	s19, s15
 800adee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800adf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adf6:	2900      	cmp	r1, #0
 800adf8:	d044      	beq.n	800ae84 <_dtoa_r+0x5a4>
 800adfa:	494e      	ldr	r1, [pc, #312]	; (800af34 <_dtoa_r+0x654>)
 800adfc:	2000      	movs	r0, #0
 800adfe:	f7f5 fd2d 	bl	800085c <__aeabi_ddiv>
 800ae02:	ec53 2b19 	vmov	r2, r3, d9
 800ae06:	f7f5 fa47 	bl	8000298 <__aeabi_dsub>
 800ae0a:	9d00      	ldr	r5, [sp, #0]
 800ae0c:	ec41 0b19 	vmov	d9, r0, r1
 800ae10:	4649      	mov	r1, r9
 800ae12:	4640      	mov	r0, r8
 800ae14:	f7f5 fea8 	bl	8000b68 <__aeabi_d2iz>
 800ae18:	4606      	mov	r6, r0
 800ae1a:	f7f5 fb8b 	bl	8000534 <__aeabi_i2d>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	4640      	mov	r0, r8
 800ae24:	4649      	mov	r1, r9
 800ae26:	f7f5 fa37 	bl	8000298 <__aeabi_dsub>
 800ae2a:	3630      	adds	r6, #48	; 0x30
 800ae2c:	f805 6b01 	strb.w	r6, [r5], #1
 800ae30:	ec53 2b19 	vmov	r2, r3, d9
 800ae34:	4680      	mov	r8, r0
 800ae36:	4689      	mov	r9, r1
 800ae38:	f7f5 fe58 	bl	8000aec <__aeabi_dcmplt>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d164      	bne.n	800af0a <_dtoa_r+0x62a>
 800ae40:	4642      	mov	r2, r8
 800ae42:	464b      	mov	r3, r9
 800ae44:	4937      	ldr	r1, [pc, #220]	; (800af24 <_dtoa_r+0x644>)
 800ae46:	2000      	movs	r0, #0
 800ae48:	f7f5 fa26 	bl	8000298 <__aeabi_dsub>
 800ae4c:	ec53 2b19 	vmov	r2, r3, d9
 800ae50:	f7f5 fe4c 	bl	8000aec <__aeabi_dcmplt>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	f040 80b6 	bne.w	800afc6 <_dtoa_r+0x6e6>
 800ae5a:	9b02      	ldr	r3, [sp, #8]
 800ae5c:	429d      	cmp	r5, r3
 800ae5e:	f43f af7c 	beq.w	800ad5a <_dtoa_r+0x47a>
 800ae62:	4b31      	ldr	r3, [pc, #196]	; (800af28 <_dtoa_r+0x648>)
 800ae64:	ec51 0b19 	vmov	r0, r1, d9
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f7f5 fbcd 	bl	8000608 <__aeabi_dmul>
 800ae6e:	4b2e      	ldr	r3, [pc, #184]	; (800af28 <_dtoa_r+0x648>)
 800ae70:	ec41 0b19 	vmov	d9, r0, r1
 800ae74:	2200      	movs	r2, #0
 800ae76:	4640      	mov	r0, r8
 800ae78:	4649      	mov	r1, r9
 800ae7a:	f7f5 fbc5 	bl	8000608 <__aeabi_dmul>
 800ae7e:	4680      	mov	r8, r0
 800ae80:	4689      	mov	r9, r1
 800ae82:	e7c5      	b.n	800ae10 <_dtoa_r+0x530>
 800ae84:	ec51 0b17 	vmov	r0, r1, d7
 800ae88:	f7f5 fbbe 	bl	8000608 <__aeabi_dmul>
 800ae8c:	9b02      	ldr	r3, [sp, #8]
 800ae8e:	9d00      	ldr	r5, [sp, #0]
 800ae90:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae92:	ec41 0b19 	vmov	d9, r0, r1
 800ae96:	4649      	mov	r1, r9
 800ae98:	4640      	mov	r0, r8
 800ae9a:	f7f5 fe65 	bl	8000b68 <__aeabi_d2iz>
 800ae9e:	4606      	mov	r6, r0
 800aea0:	f7f5 fb48 	bl	8000534 <__aeabi_i2d>
 800aea4:	3630      	adds	r6, #48	; 0x30
 800aea6:	4602      	mov	r2, r0
 800aea8:	460b      	mov	r3, r1
 800aeaa:	4640      	mov	r0, r8
 800aeac:	4649      	mov	r1, r9
 800aeae:	f7f5 f9f3 	bl	8000298 <__aeabi_dsub>
 800aeb2:	f805 6b01 	strb.w	r6, [r5], #1
 800aeb6:	9b02      	ldr	r3, [sp, #8]
 800aeb8:	429d      	cmp	r5, r3
 800aeba:	4680      	mov	r8, r0
 800aebc:	4689      	mov	r9, r1
 800aebe:	f04f 0200 	mov.w	r2, #0
 800aec2:	d124      	bne.n	800af0e <_dtoa_r+0x62e>
 800aec4:	4b1b      	ldr	r3, [pc, #108]	; (800af34 <_dtoa_r+0x654>)
 800aec6:	ec51 0b19 	vmov	r0, r1, d9
 800aeca:	f7f5 f9e7 	bl	800029c <__adddf3>
 800aece:	4602      	mov	r2, r0
 800aed0:	460b      	mov	r3, r1
 800aed2:	4640      	mov	r0, r8
 800aed4:	4649      	mov	r1, r9
 800aed6:	f7f5 fe27 	bl	8000b28 <__aeabi_dcmpgt>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d173      	bne.n	800afc6 <_dtoa_r+0x6e6>
 800aede:	ec53 2b19 	vmov	r2, r3, d9
 800aee2:	4914      	ldr	r1, [pc, #80]	; (800af34 <_dtoa_r+0x654>)
 800aee4:	2000      	movs	r0, #0
 800aee6:	f7f5 f9d7 	bl	8000298 <__aeabi_dsub>
 800aeea:	4602      	mov	r2, r0
 800aeec:	460b      	mov	r3, r1
 800aeee:	4640      	mov	r0, r8
 800aef0:	4649      	mov	r1, r9
 800aef2:	f7f5 fdfb 	bl	8000aec <__aeabi_dcmplt>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	f43f af2f 	beq.w	800ad5a <_dtoa_r+0x47a>
 800aefc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aefe:	1e6b      	subs	r3, r5, #1
 800af00:	930f      	str	r3, [sp, #60]	; 0x3c
 800af02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af06:	2b30      	cmp	r3, #48	; 0x30
 800af08:	d0f8      	beq.n	800aefc <_dtoa_r+0x61c>
 800af0a:	46bb      	mov	fp, r7
 800af0c:	e04a      	b.n	800afa4 <_dtoa_r+0x6c4>
 800af0e:	4b06      	ldr	r3, [pc, #24]	; (800af28 <_dtoa_r+0x648>)
 800af10:	f7f5 fb7a 	bl	8000608 <__aeabi_dmul>
 800af14:	4680      	mov	r8, r0
 800af16:	4689      	mov	r9, r1
 800af18:	e7bd      	b.n	800ae96 <_dtoa_r+0x5b6>
 800af1a:	bf00      	nop
 800af1c:	08016de8 	.word	0x08016de8
 800af20:	08016dc0 	.word	0x08016dc0
 800af24:	3ff00000 	.word	0x3ff00000
 800af28:	40240000 	.word	0x40240000
 800af2c:	401c0000 	.word	0x401c0000
 800af30:	40140000 	.word	0x40140000
 800af34:	3fe00000 	.word	0x3fe00000
 800af38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af3c:	9d00      	ldr	r5, [sp, #0]
 800af3e:	4642      	mov	r2, r8
 800af40:	464b      	mov	r3, r9
 800af42:	4630      	mov	r0, r6
 800af44:	4639      	mov	r1, r7
 800af46:	f7f5 fc89 	bl	800085c <__aeabi_ddiv>
 800af4a:	f7f5 fe0d 	bl	8000b68 <__aeabi_d2iz>
 800af4e:	9001      	str	r0, [sp, #4]
 800af50:	f7f5 faf0 	bl	8000534 <__aeabi_i2d>
 800af54:	4642      	mov	r2, r8
 800af56:	464b      	mov	r3, r9
 800af58:	f7f5 fb56 	bl	8000608 <__aeabi_dmul>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	4630      	mov	r0, r6
 800af62:	4639      	mov	r1, r7
 800af64:	f7f5 f998 	bl	8000298 <__aeabi_dsub>
 800af68:	9e01      	ldr	r6, [sp, #4]
 800af6a:	9f04      	ldr	r7, [sp, #16]
 800af6c:	3630      	adds	r6, #48	; 0x30
 800af6e:	f805 6b01 	strb.w	r6, [r5], #1
 800af72:	9e00      	ldr	r6, [sp, #0]
 800af74:	1bae      	subs	r6, r5, r6
 800af76:	42b7      	cmp	r7, r6
 800af78:	4602      	mov	r2, r0
 800af7a:	460b      	mov	r3, r1
 800af7c:	d134      	bne.n	800afe8 <_dtoa_r+0x708>
 800af7e:	f7f5 f98d 	bl	800029c <__adddf3>
 800af82:	4642      	mov	r2, r8
 800af84:	464b      	mov	r3, r9
 800af86:	4606      	mov	r6, r0
 800af88:	460f      	mov	r7, r1
 800af8a:	f7f5 fdcd 	bl	8000b28 <__aeabi_dcmpgt>
 800af8e:	b9c8      	cbnz	r0, 800afc4 <_dtoa_r+0x6e4>
 800af90:	4642      	mov	r2, r8
 800af92:	464b      	mov	r3, r9
 800af94:	4630      	mov	r0, r6
 800af96:	4639      	mov	r1, r7
 800af98:	f7f5 fd9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800af9c:	b110      	cbz	r0, 800afa4 <_dtoa_r+0x6c4>
 800af9e:	9b01      	ldr	r3, [sp, #4]
 800afa0:	07db      	lsls	r3, r3, #31
 800afa2:	d40f      	bmi.n	800afc4 <_dtoa_r+0x6e4>
 800afa4:	4651      	mov	r1, sl
 800afa6:	4620      	mov	r0, r4
 800afa8:	f000 fb18 	bl	800b5dc <_Bfree>
 800afac:	2300      	movs	r3, #0
 800afae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afb0:	702b      	strb	r3, [r5, #0]
 800afb2:	f10b 0301 	add.w	r3, fp, #1
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f43f ace2 	beq.w	800a984 <_dtoa_r+0xa4>
 800afc0:	601d      	str	r5, [r3, #0]
 800afc2:	e4df      	b.n	800a984 <_dtoa_r+0xa4>
 800afc4:	465f      	mov	r7, fp
 800afc6:	462b      	mov	r3, r5
 800afc8:	461d      	mov	r5, r3
 800afca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afce:	2a39      	cmp	r2, #57	; 0x39
 800afd0:	d106      	bne.n	800afe0 <_dtoa_r+0x700>
 800afd2:	9a00      	ldr	r2, [sp, #0]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d1f7      	bne.n	800afc8 <_dtoa_r+0x6e8>
 800afd8:	9900      	ldr	r1, [sp, #0]
 800afda:	2230      	movs	r2, #48	; 0x30
 800afdc:	3701      	adds	r7, #1
 800afde:	700a      	strb	r2, [r1, #0]
 800afe0:	781a      	ldrb	r2, [r3, #0]
 800afe2:	3201      	adds	r2, #1
 800afe4:	701a      	strb	r2, [r3, #0]
 800afe6:	e790      	b.n	800af0a <_dtoa_r+0x62a>
 800afe8:	4ba3      	ldr	r3, [pc, #652]	; (800b278 <_dtoa_r+0x998>)
 800afea:	2200      	movs	r2, #0
 800afec:	f7f5 fb0c 	bl	8000608 <__aeabi_dmul>
 800aff0:	2200      	movs	r2, #0
 800aff2:	2300      	movs	r3, #0
 800aff4:	4606      	mov	r6, r0
 800aff6:	460f      	mov	r7, r1
 800aff8:	f7f5 fd6e 	bl	8000ad8 <__aeabi_dcmpeq>
 800affc:	2800      	cmp	r0, #0
 800affe:	d09e      	beq.n	800af3e <_dtoa_r+0x65e>
 800b000:	e7d0      	b.n	800afa4 <_dtoa_r+0x6c4>
 800b002:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b004:	2a00      	cmp	r2, #0
 800b006:	f000 80ca 	beq.w	800b19e <_dtoa_r+0x8be>
 800b00a:	9a07      	ldr	r2, [sp, #28]
 800b00c:	2a01      	cmp	r2, #1
 800b00e:	f300 80ad 	bgt.w	800b16c <_dtoa_r+0x88c>
 800b012:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b014:	2a00      	cmp	r2, #0
 800b016:	f000 80a5 	beq.w	800b164 <_dtoa_r+0x884>
 800b01a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b01e:	9e08      	ldr	r6, [sp, #32]
 800b020:	9d05      	ldr	r5, [sp, #20]
 800b022:	9a05      	ldr	r2, [sp, #20]
 800b024:	441a      	add	r2, r3
 800b026:	9205      	str	r2, [sp, #20]
 800b028:	9a06      	ldr	r2, [sp, #24]
 800b02a:	2101      	movs	r1, #1
 800b02c:	441a      	add	r2, r3
 800b02e:	4620      	mov	r0, r4
 800b030:	9206      	str	r2, [sp, #24]
 800b032:	f000 fbd3 	bl	800b7dc <__i2b>
 800b036:	4607      	mov	r7, r0
 800b038:	b165      	cbz	r5, 800b054 <_dtoa_r+0x774>
 800b03a:	9b06      	ldr	r3, [sp, #24]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	dd09      	ble.n	800b054 <_dtoa_r+0x774>
 800b040:	42ab      	cmp	r3, r5
 800b042:	9a05      	ldr	r2, [sp, #20]
 800b044:	bfa8      	it	ge
 800b046:	462b      	movge	r3, r5
 800b048:	1ad2      	subs	r2, r2, r3
 800b04a:	9205      	str	r2, [sp, #20]
 800b04c:	9a06      	ldr	r2, [sp, #24]
 800b04e:	1aed      	subs	r5, r5, r3
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	9306      	str	r3, [sp, #24]
 800b054:	9b08      	ldr	r3, [sp, #32]
 800b056:	b1f3      	cbz	r3, 800b096 <_dtoa_r+0x7b6>
 800b058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f000 80a3 	beq.w	800b1a6 <_dtoa_r+0x8c6>
 800b060:	2e00      	cmp	r6, #0
 800b062:	dd10      	ble.n	800b086 <_dtoa_r+0x7a6>
 800b064:	4639      	mov	r1, r7
 800b066:	4632      	mov	r2, r6
 800b068:	4620      	mov	r0, r4
 800b06a:	f000 fc77 	bl	800b95c <__pow5mult>
 800b06e:	4652      	mov	r2, sl
 800b070:	4601      	mov	r1, r0
 800b072:	4607      	mov	r7, r0
 800b074:	4620      	mov	r0, r4
 800b076:	f000 fbc7 	bl	800b808 <__multiply>
 800b07a:	4651      	mov	r1, sl
 800b07c:	4680      	mov	r8, r0
 800b07e:	4620      	mov	r0, r4
 800b080:	f000 faac 	bl	800b5dc <_Bfree>
 800b084:	46c2      	mov	sl, r8
 800b086:	9b08      	ldr	r3, [sp, #32]
 800b088:	1b9a      	subs	r2, r3, r6
 800b08a:	d004      	beq.n	800b096 <_dtoa_r+0x7b6>
 800b08c:	4651      	mov	r1, sl
 800b08e:	4620      	mov	r0, r4
 800b090:	f000 fc64 	bl	800b95c <__pow5mult>
 800b094:	4682      	mov	sl, r0
 800b096:	2101      	movs	r1, #1
 800b098:	4620      	mov	r0, r4
 800b09a:	f000 fb9f 	bl	800b7dc <__i2b>
 800b09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	f340 8081 	ble.w	800b1aa <_dtoa_r+0x8ca>
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	4601      	mov	r1, r0
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f000 fc55 	bl	800b95c <__pow5mult>
 800b0b2:	9b07      	ldr	r3, [sp, #28]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	dd7a      	ble.n	800b1b0 <_dtoa_r+0x8d0>
 800b0ba:	f04f 0800 	mov.w	r8, #0
 800b0be:	6933      	ldr	r3, [r6, #16]
 800b0c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b0c4:	6918      	ldr	r0, [r3, #16]
 800b0c6:	f000 fb3b 	bl	800b740 <__hi0bits>
 800b0ca:	f1c0 0020 	rsb	r0, r0, #32
 800b0ce:	9b06      	ldr	r3, [sp, #24]
 800b0d0:	4418      	add	r0, r3
 800b0d2:	f010 001f 	ands.w	r0, r0, #31
 800b0d6:	f000 8094 	beq.w	800b202 <_dtoa_r+0x922>
 800b0da:	f1c0 0320 	rsb	r3, r0, #32
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	f340 8085 	ble.w	800b1ee <_dtoa_r+0x90e>
 800b0e4:	9b05      	ldr	r3, [sp, #20]
 800b0e6:	f1c0 001c 	rsb	r0, r0, #28
 800b0ea:	4403      	add	r3, r0
 800b0ec:	9305      	str	r3, [sp, #20]
 800b0ee:	9b06      	ldr	r3, [sp, #24]
 800b0f0:	4403      	add	r3, r0
 800b0f2:	4405      	add	r5, r0
 800b0f4:	9306      	str	r3, [sp, #24]
 800b0f6:	9b05      	ldr	r3, [sp, #20]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	dd05      	ble.n	800b108 <_dtoa_r+0x828>
 800b0fc:	4651      	mov	r1, sl
 800b0fe:	461a      	mov	r2, r3
 800b100:	4620      	mov	r0, r4
 800b102:	f000 fc85 	bl	800ba10 <__lshift>
 800b106:	4682      	mov	sl, r0
 800b108:	9b06      	ldr	r3, [sp, #24]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	dd05      	ble.n	800b11a <_dtoa_r+0x83a>
 800b10e:	4631      	mov	r1, r6
 800b110:	461a      	mov	r2, r3
 800b112:	4620      	mov	r0, r4
 800b114:	f000 fc7c 	bl	800ba10 <__lshift>
 800b118:	4606      	mov	r6, r0
 800b11a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d072      	beq.n	800b206 <_dtoa_r+0x926>
 800b120:	4631      	mov	r1, r6
 800b122:	4650      	mov	r0, sl
 800b124:	f000 fce0 	bl	800bae8 <__mcmp>
 800b128:	2800      	cmp	r0, #0
 800b12a:	da6c      	bge.n	800b206 <_dtoa_r+0x926>
 800b12c:	2300      	movs	r3, #0
 800b12e:	4651      	mov	r1, sl
 800b130:	220a      	movs	r2, #10
 800b132:	4620      	mov	r0, r4
 800b134:	f000 fa74 	bl	800b620 <__multadd>
 800b138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b13a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b13e:	4682      	mov	sl, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 81b0 	beq.w	800b4a6 <_dtoa_r+0xbc6>
 800b146:	2300      	movs	r3, #0
 800b148:	4639      	mov	r1, r7
 800b14a:	220a      	movs	r2, #10
 800b14c:	4620      	mov	r0, r4
 800b14e:	f000 fa67 	bl	800b620 <__multadd>
 800b152:	9b01      	ldr	r3, [sp, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	4607      	mov	r7, r0
 800b158:	f300 8096 	bgt.w	800b288 <_dtoa_r+0x9a8>
 800b15c:	9b07      	ldr	r3, [sp, #28]
 800b15e:	2b02      	cmp	r3, #2
 800b160:	dc59      	bgt.n	800b216 <_dtoa_r+0x936>
 800b162:	e091      	b.n	800b288 <_dtoa_r+0x9a8>
 800b164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b166:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b16a:	e758      	b.n	800b01e <_dtoa_r+0x73e>
 800b16c:	9b04      	ldr	r3, [sp, #16]
 800b16e:	1e5e      	subs	r6, r3, #1
 800b170:	9b08      	ldr	r3, [sp, #32]
 800b172:	42b3      	cmp	r3, r6
 800b174:	bfbf      	itttt	lt
 800b176:	9b08      	ldrlt	r3, [sp, #32]
 800b178:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b17a:	9608      	strlt	r6, [sp, #32]
 800b17c:	1af3      	sublt	r3, r6, r3
 800b17e:	bfb4      	ite	lt
 800b180:	18d2      	addlt	r2, r2, r3
 800b182:	1b9e      	subge	r6, r3, r6
 800b184:	9b04      	ldr	r3, [sp, #16]
 800b186:	bfbc      	itt	lt
 800b188:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b18a:	2600      	movlt	r6, #0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	bfb7      	itett	lt
 800b190:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b194:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b198:	1a9d      	sublt	r5, r3, r2
 800b19a:	2300      	movlt	r3, #0
 800b19c:	e741      	b.n	800b022 <_dtoa_r+0x742>
 800b19e:	9e08      	ldr	r6, [sp, #32]
 800b1a0:	9d05      	ldr	r5, [sp, #20]
 800b1a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b1a4:	e748      	b.n	800b038 <_dtoa_r+0x758>
 800b1a6:	9a08      	ldr	r2, [sp, #32]
 800b1a8:	e770      	b.n	800b08c <_dtoa_r+0x7ac>
 800b1aa:	9b07      	ldr	r3, [sp, #28]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	dc19      	bgt.n	800b1e4 <_dtoa_r+0x904>
 800b1b0:	9b02      	ldr	r3, [sp, #8]
 800b1b2:	b9bb      	cbnz	r3, 800b1e4 <_dtoa_r+0x904>
 800b1b4:	9b03      	ldr	r3, [sp, #12]
 800b1b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1ba:	b99b      	cbnz	r3, 800b1e4 <_dtoa_r+0x904>
 800b1bc:	9b03      	ldr	r3, [sp, #12]
 800b1be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1c2:	0d1b      	lsrs	r3, r3, #20
 800b1c4:	051b      	lsls	r3, r3, #20
 800b1c6:	b183      	cbz	r3, 800b1ea <_dtoa_r+0x90a>
 800b1c8:	9b05      	ldr	r3, [sp, #20]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	9305      	str	r3, [sp, #20]
 800b1ce:	9b06      	ldr	r3, [sp, #24]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	9306      	str	r3, [sp, #24]
 800b1d4:	f04f 0801 	mov.w	r8, #1
 800b1d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f47f af6f 	bne.w	800b0be <_dtoa_r+0x7de>
 800b1e0:	2001      	movs	r0, #1
 800b1e2:	e774      	b.n	800b0ce <_dtoa_r+0x7ee>
 800b1e4:	f04f 0800 	mov.w	r8, #0
 800b1e8:	e7f6      	b.n	800b1d8 <_dtoa_r+0x8f8>
 800b1ea:	4698      	mov	r8, r3
 800b1ec:	e7f4      	b.n	800b1d8 <_dtoa_r+0x8f8>
 800b1ee:	d082      	beq.n	800b0f6 <_dtoa_r+0x816>
 800b1f0:	9a05      	ldr	r2, [sp, #20]
 800b1f2:	331c      	adds	r3, #28
 800b1f4:	441a      	add	r2, r3
 800b1f6:	9205      	str	r2, [sp, #20]
 800b1f8:	9a06      	ldr	r2, [sp, #24]
 800b1fa:	441a      	add	r2, r3
 800b1fc:	441d      	add	r5, r3
 800b1fe:	9206      	str	r2, [sp, #24]
 800b200:	e779      	b.n	800b0f6 <_dtoa_r+0x816>
 800b202:	4603      	mov	r3, r0
 800b204:	e7f4      	b.n	800b1f0 <_dtoa_r+0x910>
 800b206:	9b04      	ldr	r3, [sp, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	dc37      	bgt.n	800b27c <_dtoa_r+0x99c>
 800b20c:	9b07      	ldr	r3, [sp, #28]
 800b20e:	2b02      	cmp	r3, #2
 800b210:	dd34      	ble.n	800b27c <_dtoa_r+0x99c>
 800b212:	9b04      	ldr	r3, [sp, #16]
 800b214:	9301      	str	r3, [sp, #4]
 800b216:	9b01      	ldr	r3, [sp, #4]
 800b218:	b963      	cbnz	r3, 800b234 <_dtoa_r+0x954>
 800b21a:	4631      	mov	r1, r6
 800b21c:	2205      	movs	r2, #5
 800b21e:	4620      	mov	r0, r4
 800b220:	f000 f9fe 	bl	800b620 <__multadd>
 800b224:	4601      	mov	r1, r0
 800b226:	4606      	mov	r6, r0
 800b228:	4650      	mov	r0, sl
 800b22a:	f000 fc5d 	bl	800bae8 <__mcmp>
 800b22e:	2800      	cmp	r0, #0
 800b230:	f73f adbb 	bgt.w	800adaa <_dtoa_r+0x4ca>
 800b234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b236:	9d00      	ldr	r5, [sp, #0]
 800b238:	ea6f 0b03 	mvn.w	fp, r3
 800b23c:	f04f 0800 	mov.w	r8, #0
 800b240:	4631      	mov	r1, r6
 800b242:	4620      	mov	r0, r4
 800b244:	f000 f9ca 	bl	800b5dc <_Bfree>
 800b248:	2f00      	cmp	r7, #0
 800b24a:	f43f aeab 	beq.w	800afa4 <_dtoa_r+0x6c4>
 800b24e:	f1b8 0f00 	cmp.w	r8, #0
 800b252:	d005      	beq.n	800b260 <_dtoa_r+0x980>
 800b254:	45b8      	cmp	r8, r7
 800b256:	d003      	beq.n	800b260 <_dtoa_r+0x980>
 800b258:	4641      	mov	r1, r8
 800b25a:	4620      	mov	r0, r4
 800b25c:	f000 f9be 	bl	800b5dc <_Bfree>
 800b260:	4639      	mov	r1, r7
 800b262:	4620      	mov	r0, r4
 800b264:	f000 f9ba 	bl	800b5dc <_Bfree>
 800b268:	e69c      	b.n	800afa4 <_dtoa_r+0x6c4>
 800b26a:	2600      	movs	r6, #0
 800b26c:	4637      	mov	r7, r6
 800b26e:	e7e1      	b.n	800b234 <_dtoa_r+0x954>
 800b270:	46bb      	mov	fp, r7
 800b272:	4637      	mov	r7, r6
 800b274:	e599      	b.n	800adaa <_dtoa_r+0x4ca>
 800b276:	bf00      	nop
 800b278:	40240000 	.word	0x40240000
 800b27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 80c8 	beq.w	800b414 <_dtoa_r+0xb34>
 800b284:	9b04      	ldr	r3, [sp, #16]
 800b286:	9301      	str	r3, [sp, #4]
 800b288:	2d00      	cmp	r5, #0
 800b28a:	dd05      	ble.n	800b298 <_dtoa_r+0x9b8>
 800b28c:	4639      	mov	r1, r7
 800b28e:	462a      	mov	r2, r5
 800b290:	4620      	mov	r0, r4
 800b292:	f000 fbbd 	bl	800ba10 <__lshift>
 800b296:	4607      	mov	r7, r0
 800b298:	f1b8 0f00 	cmp.w	r8, #0
 800b29c:	d05b      	beq.n	800b356 <_dtoa_r+0xa76>
 800b29e:	6879      	ldr	r1, [r7, #4]
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f000 f95b 	bl	800b55c <_Balloc>
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	b928      	cbnz	r0, 800b2b6 <_dtoa_r+0x9d6>
 800b2aa:	4b83      	ldr	r3, [pc, #524]	; (800b4b8 <_dtoa_r+0xbd8>)
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b2b2:	f7ff bb2e 	b.w	800a912 <_dtoa_r+0x32>
 800b2b6:	693a      	ldr	r2, [r7, #16]
 800b2b8:	3202      	adds	r2, #2
 800b2ba:	0092      	lsls	r2, r2, #2
 800b2bc:	f107 010c 	add.w	r1, r7, #12
 800b2c0:	300c      	adds	r0, #12
 800b2c2:	f7ff fa6e 	bl	800a7a2 <memcpy>
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f000 fba0 	bl	800ba10 <__lshift>
 800b2d0:	9b00      	ldr	r3, [sp, #0]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	9304      	str	r3, [sp, #16]
 800b2d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2da:	4413      	add	r3, r2
 800b2dc:	9308      	str	r3, [sp, #32]
 800b2de:	9b02      	ldr	r3, [sp, #8]
 800b2e0:	f003 0301 	and.w	r3, r3, #1
 800b2e4:	46b8      	mov	r8, r7
 800b2e6:	9306      	str	r3, [sp, #24]
 800b2e8:	4607      	mov	r7, r0
 800b2ea:	9b04      	ldr	r3, [sp, #16]
 800b2ec:	4631      	mov	r1, r6
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	4650      	mov	r0, sl
 800b2f2:	9301      	str	r3, [sp, #4]
 800b2f4:	f7ff fa6a 	bl	800a7cc <quorem>
 800b2f8:	4641      	mov	r1, r8
 800b2fa:	9002      	str	r0, [sp, #8]
 800b2fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b300:	4650      	mov	r0, sl
 800b302:	f000 fbf1 	bl	800bae8 <__mcmp>
 800b306:	463a      	mov	r2, r7
 800b308:	9005      	str	r0, [sp, #20]
 800b30a:	4631      	mov	r1, r6
 800b30c:	4620      	mov	r0, r4
 800b30e:	f000 fc07 	bl	800bb20 <__mdiff>
 800b312:	68c2      	ldr	r2, [r0, #12]
 800b314:	4605      	mov	r5, r0
 800b316:	bb02      	cbnz	r2, 800b35a <_dtoa_r+0xa7a>
 800b318:	4601      	mov	r1, r0
 800b31a:	4650      	mov	r0, sl
 800b31c:	f000 fbe4 	bl	800bae8 <__mcmp>
 800b320:	4602      	mov	r2, r0
 800b322:	4629      	mov	r1, r5
 800b324:	4620      	mov	r0, r4
 800b326:	9209      	str	r2, [sp, #36]	; 0x24
 800b328:	f000 f958 	bl	800b5dc <_Bfree>
 800b32c:	9b07      	ldr	r3, [sp, #28]
 800b32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b330:	9d04      	ldr	r5, [sp, #16]
 800b332:	ea43 0102 	orr.w	r1, r3, r2
 800b336:	9b06      	ldr	r3, [sp, #24]
 800b338:	4319      	orrs	r1, r3
 800b33a:	d110      	bne.n	800b35e <_dtoa_r+0xa7e>
 800b33c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b340:	d029      	beq.n	800b396 <_dtoa_r+0xab6>
 800b342:	9b05      	ldr	r3, [sp, #20]
 800b344:	2b00      	cmp	r3, #0
 800b346:	dd02      	ble.n	800b34e <_dtoa_r+0xa6e>
 800b348:	9b02      	ldr	r3, [sp, #8]
 800b34a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b34e:	9b01      	ldr	r3, [sp, #4]
 800b350:	f883 9000 	strb.w	r9, [r3]
 800b354:	e774      	b.n	800b240 <_dtoa_r+0x960>
 800b356:	4638      	mov	r0, r7
 800b358:	e7ba      	b.n	800b2d0 <_dtoa_r+0x9f0>
 800b35a:	2201      	movs	r2, #1
 800b35c:	e7e1      	b.n	800b322 <_dtoa_r+0xa42>
 800b35e:	9b05      	ldr	r3, [sp, #20]
 800b360:	2b00      	cmp	r3, #0
 800b362:	db04      	blt.n	800b36e <_dtoa_r+0xa8e>
 800b364:	9907      	ldr	r1, [sp, #28]
 800b366:	430b      	orrs	r3, r1
 800b368:	9906      	ldr	r1, [sp, #24]
 800b36a:	430b      	orrs	r3, r1
 800b36c:	d120      	bne.n	800b3b0 <_dtoa_r+0xad0>
 800b36e:	2a00      	cmp	r2, #0
 800b370:	dded      	ble.n	800b34e <_dtoa_r+0xa6e>
 800b372:	4651      	mov	r1, sl
 800b374:	2201      	movs	r2, #1
 800b376:	4620      	mov	r0, r4
 800b378:	f000 fb4a 	bl	800ba10 <__lshift>
 800b37c:	4631      	mov	r1, r6
 800b37e:	4682      	mov	sl, r0
 800b380:	f000 fbb2 	bl	800bae8 <__mcmp>
 800b384:	2800      	cmp	r0, #0
 800b386:	dc03      	bgt.n	800b390 <_dtoa_r+0xab0>
 800b388:	d1e1      	bne.n	800b34e <_dtoa_r+0xa6e>
 800b38a:	f019 0f01 	tst.w	r9, #1
 800b38e:	d0de      	beq.n	800b34e <_dtoa_r+0xa6e>
 800b390:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b394:	d1d8      	bne.n	800b348 <_dtoa_r+0xa68>
 800b396:	9a01      	ldr	r2, [sp, #4]
 800b398:	2339      	movs	r3, #57	; 0x39
 800b39a:	7013      	strb	r3, [r2, #0]
 800b39c:	462b      	mov	r3, r5
 800b39e:	461d      	mov	r5, r3
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b3a6:	2a39      	cmp	r2, #57	; 0x39
 800b3a8:	d06c      	beq.n	800b484 <_dtoa_r+0xba4>
 800b3aa:	3201      	adds	r2, #1
 800b3ac:	701a      	strb	r2, [r3, #0]
 800b3ae:	e747      	b.n	800b240 <_dtoa_r+0x960>
 800b3b0:	2a00      	cmp	r2, #0
 800b3b2:	dd07      	ble.n	800b3c4 <_dtoa_r+0xae4>
 800b3b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b3b8:	d0ed      	beq.n	800b396 <_dtoa_r+0xab6>
 800b3ba:	9a01      	ldr	r2, [sp, #4]
 800b3bc:	f109 0301 	add.w	r3, r9, #1
 800b3c0:	7013      	strb	r3, [r2, #0]
 800b3c2:	e73d      	b.n	800b240 <_dtoa_r+0x960>
 800b3c4:	9b04      	ldr	r3, [sp, #16]
 800b3c6:	9a08      	ldr	r2, [sp, #32]
 800b3c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d043      	beq.n	800b458 <_dtoa_r+0xb78>
 800b3d0:	4651      	mov	r1, sl
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	220a      	movs	r2, #10
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f000 f922 	bl	800b620 <__multadd>
 800b3dc:	45b8      	cmp	r8, r7
 800b3de:	4682      	mov	sl, r0
 800b3e0:	f04f 0300 	mov.w	r3, #0
 800b3e4:	f04f 020a 	mov.w	r2, #10
 800b3e8:	4641      	mov	r1, r8
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	d107      	bne.n	800b3fe <_dtoa_r+0xb1e>
 800b3ee:	f000 f917 	bl	800b620 <__multadd>
 800b3f2:	4680      	mov	r8, r0
 800b3f4:	4607      	mov	r7, r0
 800b3f6:	9b04      	ldr	r3, [sp, #16]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	9304      	str	r3, [sp, #16]
 800b3fc:	e775      	b.n	800b2ea <_dtoa_r+0xa0a>
 800b3fe:	f000 f90f 	bl	800b620 <__multadd>
 800b402:	4639      	mov	r1, r7
 800b404:	4680      	mov	r8, r0
 800b406:	2300      	movs	r3, #0
 800b408:	220a      	movs	r2, #10
 800b40a:	4620      	mov	r0, r4
 800b40c:	f000 f908 	bl	800b620 <__multadd>
 800b410:	4607      	mov	r7, r0
 800b412:	e7f0      	b.n	800b3f6 <_dtoa_r+0xb16>
 800b414:	9b04      	ldr	r3, [sp, #16]
 800b416:	9301      	str	r3, [sp, #4]
 800b418:	9d00      	ldr	r5, [sp, #0]
 800b41a:	4631      	mov	r1, r6
 800b41c:	4650      	mov	r0, sl
 800b41e:	f7ff f9d5 	bl	800a7cc <quorem>
 800b422:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b426:	9b00      	ldr	r3, [sp, #0]
 800b428:	f805 9b01 	strb.w	r9, [r5], #1
 800b42c:	1aea      	subs	r2, r5, r3
 800b42e:	9b01      	ldr	r3, [sp, #4]
 800b430:	4293      	cmp	r3, r2
 800b432:	dd07      	ble.n	800b444 <_dtoa_r+0xb64>
 800b434:	4651      	mov	r1, sl
 800b436:	2300      	movs	r3, #0
 800b438:	220a      	movs	r2, #10
 800b43a:	4620      	mov	r0, r4
 800b43c:	f000 f8f0 	bl	800b620 <__multadd>
 800b440:	4682      	mov	sl, r0
 800b442:	e7ea      	b.n	800b41a <_dtoa_r+0xb3a>
 800b444:	9b01      	ldr	r3, [sp, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	bfc8      	it	gt
 800b44a:	461d      	movgt	r5, r3
 800b44c:	9b00      	ldr	r3, [sp, #0]
 800b44e:	bfd8      	it	le
 800b450:	2501      	movle	r5, #1
 800b452:	441d      	add	r5, r3
 800b454:	f04f 0800 	mov.w	r8, #0
 800b458:	4651      	mov	r1, sl
 800b45a:	2201      	movs	r2, #1
 800b45c:	4620      	mov	r0, r4
 800b45e:	f000 fad7 	bl	800ba10 <__lshift>
 800b462:	4631      	mov	r1, r6
 800b464:	4682      	mov	sl, r0
 800b466:	f000 fb3f 	bl	800bae8 <__mcmp>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	dc96      	bgt.n	800b39c <_dtoa_r+0xabc>
 800b46e:	d102      	bne.n	800b476 <_dtoa_r+0xb96>
 800b470:	f019 0f01 	tst.w	r9, #1
 800b474:	d192      	bne.n	800b39c <_dtoa_r+0xabc>
 800b476:	462b      	mov	r3, r5
 800b478:	461d      	mov	r5, r3
 800b47a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b47e:	2a30      	cmp	r2, #48	; 0x30
 800b480:	d0fa      	beq.n	800b478 <_dtoa_r+0xb98>
 800b482:	e6dd      	b.n	800b240 <_dtoa_r+0x960>
 800b484:	9a00      	ldr	r2, [sp, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d189      	bne.n	800b39e <_dtoa_r+0xabe>
 800b48a:	f10b 0b01 	add.w	fp, fp, #1
 800b48e:	2331      	movs	r3, #49	; 0x31
 800b490:	e796      	b.n	800b3c0 <_dtoa_r+0xae0>
 800b492:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <_dtoa_r+0xbdc>)
 800b494:	f7ff ba99 	b.w	800a9ca <_dtoa_r+0xea>
 800b498:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f47f aa6d 	bne.w	800a97a <_dtoa_r+0x9a>
 800b4a0:	4b07      	ldr	r3, [pc, #28]	; (800b4c0 <_dtoa_r+0xbe0>)
 800b4a2:	f7ff ba92 	b.w	800a9ca <_dtoa_r+0xea>
 800b4a6:	9b01      	ldr	r3, [sp, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	dcb5      	bgt.n	800b418 <_dtoa_r+0xb38>
 800b4ac:	9b07      	ldr	r3, [sp, #28]
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	f73f aeb1 	bgt.w	800b216 <_dtoa_r+0x936>
 800b4b4:	e7b0      	b.n	800b418 <_dtoa_r+0xb38>
 800b4b6:	bf00      	nop
 800b4b8:	08016d55 	.word	0x08016d55
 800b4bc:	08016cb0 	.word	0x08016cb0
 800b4c0:	08016cd9 	.word	0x08016cd9

0800b4c4 <_free_r>:
 800b4c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4c6:	2900      	cmp	r1, #0
 800b4c8:	d044      	beq.n	800b554 <_free_r+0x90>
 800b4ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4ce:	9001      	str	r0, [sp, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f1a1 0404 	sub.w	r4, r1, #4
 800b4d6:	bfb8      	it	lt
 800b4d8:	18e4      	addlt	r4, r4, r3
 800b4da:	f7fe f8e1 	bl	80096a0 <__malloc_lock>
 800b4de:	4a1e      	ldr	r2, [pc, #120]	; (800b558 <_free_r+0x94>)
 800b4e0:	9801      	ldr	r0, [sp, #4]
 800b4e2:	6813      	ldr	r3, [r2, #0]
 800b4e4:	b933      	cbnz	r3, 800b4f4 <_free_r+0x30>
 800b4e6:	6063      	str	r3, [r4, #4]
 800b4e8:	6014      	str	r4, [r2, #0]
 800b4ea:	b003      	add	sp, #12
 800b4ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4f0:	f7fe b8dc 	b.w	80096ac <__malloc_unlock>
 800b4f4:	42a3      	cmp	r3, r4
 800b4f6:	d908      	bls.n	800b50a <_free_r+0x46>
 800b4f8:	6825      	ldr	r5, [r4, #0]
 800b4fa:	1961      	adds	r1, r4, r5
 800b4fc:	428b      	cmp	r3, r1
 800b4fe:	bf01      	itttt	eq
 800b500:	6819      	ldreq	r1, [r3, #0]
 800b502:	685b      	ldreq	r3, [r3, #4]
 800b504:	1949      	addeq	r1, r1, r5
 800b506:	6021      	streq	r1, [r4, #0]
 800b508:	e7ed      	b.n	800b4e6 <_free_r+0x22>
 800b50a:	461a      	mov	r2, r3
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	b10b      	cbz	r3, 800b514 <_free_r+0x50>
 800b510:	42a3      	cmp	r3, r4
 800b512:	d9fa      	bls.n	800b50a <_free_r+0x46>
 800b514:	6811      	ldr	r1, [r2, #0]
 800b516:	1855      	adds	r5, r2, r1
 800b518:	42a5      	cmp	r5, r4
 800b51a:	d10b      	bne.n	800b534 <_free_r+0x70>
 800b51c:	6824      	ldr	r4, [r4, #0]
 800b51e:	4421      	add	r1, r4
 800b520:	1854      	adds	r4, r2, r1
 800b522:	42a3      	cmp	r3, r4
 800b524:	6011      	str	r1, [r2, #0]
 800b526:	d1e0      	bne.n	800b4ea <_free_r+0x26>
 800b528:	681c      	ldr	r4, [r3, #0]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	6053      	str	r3, [r2, #4]
 800b52e:	440c      	add	r4, r1
 800b530:	6014      	str	r4, [r2, #0]
 800b532:	e7da      	b.n	800b4ea <_free_r+0x26>
 800b534:	d902      	bls.n	800b53c <_free_r+0x78>
 800b536:	230c      	movs	r3, #12
 800b538:	6003      	str	r3, [r0, #0]
 800b53a:	e7d6      	b.n	800b4ea <_free_r+0x26>
 800b53c:	6825      	ldr	r5, [r4, #0]
 800b53e:	1961      	adds	r1, r4, r5
 800b540:	428b      	cmp	r3, r1
 800b542:	bf04      	itt	eq
 800b544:	6819      	ldreq	r1, [r3, #0]
 800b546:	685b      	ldreq	r3, [r3, #4]
 800b548:	6063      	str	r3, [r4, #4]
 800b54a:	bf04      	itt	eq
 800b54c:	1949      	addeq	r1, r1, r5
 800b54e:	6021      	streq	r1, [r4, #0]
 800b550:	6054      	str	r4, [r2, #4]
 800b552:	e7ca      	b.n	800b4ea <_free_r+0x26>
 800b554:	b003      	add	sp, #12
 800b556:	bd30      	pop	{r4, r5, pc}
 800b558:	20013960 	.word	0x20013960

0800b55c <_Balloc>:
 800b55c:	b570      	push	{r4, r5, r6, lr}
 800b55e:	69c6      	ldr	r6, [r0, #28]
 800b560:	4604      	mov	r4, r0
 800b562:	460d      	mov	r5, r1
 800b564:	b976      	cbnz	r6, 800b584 <_Balloc+0x28>
 800b566:	2010      	movs	r0, #16
 800b568:	f7fd fff2 	bl	8009550 <malloc>
 800b56c:	4602      	mov	r2, r0
 800b56e:	61e0      	str	r0, [r4, #28]
 800b570:	b920      	cbnz	r0, 800b57c <_Balloc+0x20>
 800b572:	4b18      	ldr	r3, [pc, #96]	; (800b5d4 <_Balloc+0x78>)
 800b574:	4818      	ldr	r0, [pc, #96]	; (800b5d8 <_Balloc+0x7c>)
 800b576:	216b      	movs	r1, #107	; 0x6b
 800b578:	f001 fd5e 	bl	800d038 <__assert_func>
 800b57c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b580:	6006      	str	r6, [r0, #0]
 800b582:	60c6      	str	r6, [r0, #12]
 800b584:	69e6      	ldr	r6, [r4, #28]
 800b586:	68f3      	ldr	r3, [r6, #12]
 800b588:	b183      	cbz	r3, 800b5ac <_Balloc+0x50>
 800b58a:	69e3      	ldr	r3, [r4, #28]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b592:	b9b8      	cbnz	r0, 800b5c4 <_Balloc+0x68>
 800b594:	2101      	movs	r1, #1
 800b596:	fa01 f605 	lsl.w	r6, r1, r5
 800b59a:	1d72      	adds	r2, r6, #5
 800b59c:	0092      	lsls	r2, r2, #2
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f001 fd68 	bl	800d074 <_calloc_r>
 800b5a4:	b160      	cbz	r0, 800b5c0 <_Balloc+0x64>
 800b5a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5aa:	e00e      	b.n	800b5ca <_Balloc+0x6e>
 800b5ac:	2221      	movs	r2, #33	; 0x21
 800b5ae:	2104      	movs	r1, #4
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f001 fd5f 	bl	800d074 <_calloc_r>
 800b5b6:	69e3      	ldr	r3, [r4, #28]
 800b5b8:	60f0      	str	r0, [r6, #12]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1e4      	bne.n	800b58a <_Balloc+0x2e>
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	bd70      	pop	{r4, r5, r6, pc}
 800b5c4:	6802      	ldr	r2, [r0, #0]
 800b5c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5d0:	e7f7      	b.n	800b5c2 <_Balloc+0x66>
 800b5d2:	bf00      	nop
 800b5d4:	08016ce6 	.word	0x08016ce6
 800b5d8:	08016d66 	.word	0x08016d66

0800b5dc <_Bfree>:
 800b5dc:	b570      	push	{r4, r5, r6, lr}
 800b5de:	69c6      	ldr	r6, [r0, #28]
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	b976      	cbnz	r6, 800b604 <_Bfree+0x28>
 800b5e6:	2010      	movs	r0, #16
 800b5e8:	f7fd ffb2 	bl	8009550 <malloc>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	61e8      	str	r0, [r5, #28]
 800b5f0:	b920      	cbnz	r0, 800b5fc <_Bfree+0x20>
 800b5f2:	4b09      	ldr	r3, [pc, #36]	; (800b618 <_Bfree+0x3c>)
 800b5f4:	4809      	ldr	r0, [pc, #36]	; (800b61c <_Bfree+0x40>)
 800b5f6:	218f      	movs	r1, #143	; 0x8f
 800b5f8:	f001 fd1e 	bl	800d038 <__assert_func>
 800b5fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b600:	6006      	str	r6, [r0, #0]
 800b602:	60c6      	str	r6, [r0, #12]
 800b604:	b13c      	cbz	r4, 800b616 <_Bfree+0x3a>
 800b606:	69eb      	ldr	r3, [r5, #28]
 800b608:	6862      	ldr	r2, [r4, #4]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b610:	6021      	str	r1, [r4, #0]
 800b612:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b616:	bd70      	pop	{r4, r5, r6, pc}
 800b618:	08016ce6 	.word	0x08016ce6
 800b61c:	08016d66 	.word	0x08016d66

0800b620 <__multadd>:
 800b620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b624:	690d      	ldr	r5, [r1, #16]
 800b626:	4607      	mov	r7, r0
 800b628:	460c      	mov	r4, r1
 800b62a:	461e      	mov	r6, r3
 800b62c:	f101 0c14 	add.w	ip, r1, #20
 800b630:	2000      	movs	r0, #0
 800b632:	f8dc 3000 	ldr.w	r3, [ip]
 800b636:	b299      	uxth	r1, r3
 800b638:	fb02 6101 	mla	r1, r2, r1, r6
 800b63c:	0c1e      	lsrs	r6, r3, #16
 800b63e:	0c0b      	lsrs	r3, r1, #16
 800b640:	fb02 3306 	mla	r3, r2, r6, r3
 800b644:	b289      	uxth	r1, r1
 800b646:	3001      	adds	r0, #1
 800b648:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b64c:	4285      	cmp	r5, r0
 800b64e:	f84c 1b04 	str.w	r1, [ip], #4
 800b652:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b656:	dcec      	bgt.n	800b632 <__multadd+0x12>
 800b658:	b30e      	cbz	r6, 800b69e <__multadd+0x7e>
 800b65a:	68a3      	ldr	r3, [r4, #8]
 800b65c:	42ab      	cmp	r3, r5
 800b65e:	dc19      	bgt.n	800b694 <__multadd+0x74>
 800b660:	6861      	ldr	r1, [r4, #4]
 800b662:	4638      	mov	r0, r7
 800b664:	3101      	adds	r1, #1
 800b666:	f7ff ff79 	bl	800b55c <_Balloc>
 800b66a:	4680      	mov	r8, r0
 800b66c:	b928      	cbnz	r0, 800b67a <__multadd+0x5a>
 800b66e:	4602      	mov	r2, r0
 800b670:	4b0c      	ldr	r3, [pc, #48]	; (800b6a4 <__multadd+0x84>)
 800b672:	480d      	ldr	r0, [pc, #52]	; (800b6a8 <__multadd+0x88>)
 800b674:	21ba      	movs	r1, #186	; 0xba
 800b676:	f001 fcdf 	bl	800d038 <__assert_func>
 800b67a:	6922      	ldr	r2, [r4, #16]
 800b67c:	3202      	adds	r2, #2
 800b67e:	f104 010c 	add.w	r1, r4, #12
 800b682:	0092      	lsls	r2, r2, #2
 800b684:	300c      	adds	r0, #12
 800b686:	f7ff f88c 	bl	800a7a2 <memcpy>
 800b68a:	4621      	mov	r1, r4
 800b68c:	4638      	mov	r0, r7
 800b68e:	f7ff ffa5 	bl	800b5dc <_Bfree>
 800b692:	4644      	mov	r4, r8
 800b694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b698:	3501      	adds	r5, #1
 800b69a:	615e      	str	r6, [r3, #20]
 800b69c:	6125      	str	r5, [r4, #16]
 800b69e:	4620      	mov	r0, r4
 800b6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a4:	08016d55 	.word	0x08016d55
 800b6a8:	08016d66 	.word	0x08016d66

0800b6ac <__s2b>:
 800b6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6b0:	460c      	mov	r4, r1
 800b6b2:	4615      	mov	r5, r2
 800b6b4:	461f      	mov	r7, r3
 800b6b6:	2209      	movs	r2, #9
 800b6b8:	3308      	adds	r3, #8
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	db09      	blt.n	800b6dc <__s2b+0x30>
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f7ff ff47 	bl	800b55c <_Balloc>
 800b6ce:	b940      	cbnz	r0, 800b6e2 <__s2b+0x36>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	4b19      	ldr	r3, [pc, #100]	; (800b738 <__s2b+0x8c>)
 800b6d4:	4819      	ldr	r0, [pc, #100]	; (800b73c <__s2b+0x90>)
 800b6d6:	21d3      	movs	r1, #211	; 0xd3
 800b6d8:	f001 fcae 	bl	800d038 <__assert_func>
 800b6dc:	0052      	lsls	r2, r2, #1
 800b6de:	3101      	adds	r1, #1
 800b6e0:	e7f0      	b.n	800b6c4 <__s2b+0x18>
 800b6e2:	9b08      	ldr	r3, [sp, #32]
 800b6e4:	6143      	str	r3, [r0, #20]
 800b6e6:	2d09      	cmp	r5, #9
 800b6e8:	f04f 0301 	mov.w	r3, #1
 800b6ec:	6103      	str	r3, [r0, #16]
 800b6ee:	dd16      	ble.n	800b71e <__s2b+0x72>
 800b6f0:	f104 0909 	add.w	r9, r4, #9
 800b6f4:	46c8      	mov	r8, r9
 800b6f6:	442c      	add	r4, r5
 800b6f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b6fc:	4601      	mov	r1, r0
 800b6fe:	3b30      	subs	r3, #48	; 0x30
 800b700:	220a      	movs	r2, #10
 800b702:	4630      	mov	r0, r6
 800b704:	f7ff ff8c 	bl	800b620 <__multadd>
 800b708:	45a0      	cmp	r8, r4
 800b70a:	d1f5      	bne.n	800b6f8 <__s2b+0x4c>
 800b70c:	f1a5 0408 	sub.w	r4, r5, #8
 800b710:	444c      	add	r4, r9
 800b712:	1b2d      	subs	r5, r5, r4
 800b714:	1963      	adds	r3, r4, r5
 800b716:	42bb      	cmp	r3, r7
 800b718:	db04      	blt.n	800b724 <__s2b+0x78>
 800b71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b71e:	340a      	adds	r4, #10
 800b720:	2509      	movs	r5, #9
 800b722:	e7f6      	b.n	800b712 <__s2b+0x66>
 800b724:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b728:	4601      	mov	r1, r0
 800b72a:	3b30      	subs	r3, #48	; 0x30
 800b72c:	220a      	movs	r2, #10
 800b72e:	4630      	mov	r0, r6
 800b730:	f7ff ff76 	bl	800b620 <__multadd>
 800b734:	e7ee      	b.n	800b714 <__s2b+0x68>
 800b736:	bf00      	nop
 800b738:	08016d55 	.word	0x08016d55
 800b73c:	08016d66 	.word	0x08016d66

0800b740 <__hi0bits>:
 800b740:	0c03      	lsrs	r3, r0, #16
 800b742:	041b      	lsls	r3, r3, #16
 800b744:	b9d3      	cbnz	r3, 800b77c <__hi0bits+0x3c>
 800b746:	0400      	lsls	r0, r0, #16
 800b748:	2310      	movs	r3, #16
 800b74a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b74e:	bf04      	itt	eq
 800b750:	0200      	lsleq	r0, r0, #8
 800b752:	3308      	addeq	r3, #8
 800b754:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b758:	bf04      	itt	eq
 800b75a:	0100      	lsleq	r0, r0, #4
 800b75c:	3304      	addeq	r3, #4
 800b75e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b762:	bf04      	itt	eq
 800b764:	0080      	lsleq	r0, r0, #2
 800b766:	3302      	addeq	r3, #2
 800b768:	2800      	cmp	r0, #0
 800b76a:	db05      	blt.n	800b778 <__hi0bits+0x38>
 800b76c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b770:	f103 0301 	add.w	r3, r3, #1
 800b774:	bf08      	it	eq
 800b776:	2320      	moveq	r3, #32
 800b778:	4618      	mov	r0, r3
 800b77a:	4770      	bx	lr
 800b77c:	2300      	movs	r3, #0
 800b77e:	e7e4      	b.n	800b74a <__hi0bits+0xa>

0800b780 <__lo0bits>:
 800b780:	6803      	ldr	r3, [r0, #0]
 800b782:	f013 0207 	ands.w	r2, r3, #7
 800b786:	d00c      	beq.n	800b7a2 <__lo0bits+0x22>
 800b788:	07d9      	lsls	r1, r3, #31
 800b78a:	d422      	bmi.n	800b7d2 <__lo0bits+0x52>
 800b78c:	079a      	lsls	r2, r3, #30
 800b78e:	bf49      	itett	mi
 800b790:	085b      	lsrmi	r3, r3, #1
 800b792:	089b      	lsrpl	r3, r3, #2
 800b794:	6003      	strmi	r3, [r0, #0]
 800b796:	2201      	movmi	r2, #1
 800b798:	bf5c      	itt	pl
 800b79a:	6003      	strpl	r3, [r0, #0]
 800b79c:	2202      	movpl	r2, #2
 800b79e:	4610      	mov	r0, r2
 800b7a0:	4770      	bx	lr
 800b7a2:	b299      	uxth	r1, r3
 800b7a4:	b909      	cbnz	r1, 800b7aa <__lo0bits+0x2a>
 800b7a6:	0c1b      	lsrs	r3, r3, #16
 800b7a8:	2210      	movs	r2, #16
 800b7aa:	b2d9      	uxtb	r1, r3
 800b7ac:	b909      	cbnz	r1, 800b7b2 <__lo0bits+0x32>
 800b7ae:	3208      	adds	r2, #8
 800b7b0:	0a1b      	lsrs	r3, r3, #8
 800b7b2:	0719      	lsls	r1, r3, #28
 800b7b4:	bf04      	itt	eq
 800b7b6:	091b      	lsreq	r3, r3, #4
 800b7b8:	3204      	addeq	r2, #4
 800b7ba:	0799      	lsls	r1, r3, #30
 800b7bc:	bf04      	itt	eq
 800b7be:	089b      	lsreq	r3, r3, #2
 800b7c0:	3202      	addeq	r2, #2
 800b7c2:	07d9      	lsls	r1, r3, #31
 800b7c4:	d403      	bmi.n	800b7ce <__lo0bits+0x4e>
 800b7c6:	085b      	lsrs	r3, r3, #1
 800b7c8:	f102 0201 	add.w	r2, r2, #1
 800b7cc:	d003      	beq.n	800b7d6 <__lo0bits+0x56>
 800b7ce:	6003      	str	r3, [r0, #0]
 800b7d0:	e7e5      	b.n	800b79e <__lo0bits+0x1e>
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	e7e3      	b.n	800b79e <__lo0bits+0x1e>
 800b7d6:	2220      	movs	r2, #32
 800b7d8:	e7e1      	b.n	800b79e <__lo0bits+0x1e>
	...

0800b7dc <__i2b>:
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	460c      	mov	r4, r1
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	f7ff febb 	bl	800b55c <_Balloc>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	b928      	cbnz	r0, 800b7f6 <__i2b+0x1a>
 800b7ea:	4b05      	ldr	r3, [pc, #20]	; (800b800 <__i2b+0x24>)
 800b7ec:	4805      	ldr	r0, [pc, #20]	; (800b804 <__i2b+0x28>)
 800b7ee:	f240 1145 	movw	r1, #325	; 0x145
 800b7f2:	f001 fc21 	bl	800d038 <__assert_func>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	6144      	str	r4, [r0, #20]
 800b7fa:	6103      	str	r3, [r0, #16]
 800b7fc:	bd10      	pop	{r4, pc}
 800b7fe:	bf00      	nop
 800b800:	08016d55 	.word	0x08016d55
 800b804:	08016d66 	.word	0x08016d66

0800b808 <__multiply>:
 800b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80c:	4691      	mov	r9, r2
 800b80e:	690a      	ldr	r2, [r1, #16]
 800b810:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b814:	429a      	cmp	r2, r3
 800b816:	bfb8      	it	lt
 800b818:	460b      	movlt	r3, r1
 800b81a:	460c      	mov	r4, r1
 800b81c:	bfbc      	itt	lt
 800b81e:	464c      	movlt	r4, r9
 800b820:	4699      	movlt	r9, r3
 800b822:	6927      	ldr	r7, [r4, #16]
 800b824:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b828:	68a3      	ldr	r3, [r4, #8]
 800b82a:	6861      	ldr	r1, [r4, #4]
 800b82c:	eb07 060a 	add.w	r6, r7, sl
 800b830:	42b3      	cmp	r3, r6
 800b832:	b085      	sub	sp, #20
 800b834:	bfb8      	it	lt
 800b836:	3101      	addlt	r1, #1
 800b838:	f7ff fe90 	bl	800b55c <_Balloc>
 800b83c:	b930      	cbnz	r0, 800b84c <__multiply+0x44>
 800b83e:	4602      	mov	r2, r0
 800b840:	4b44      	ldr	r3, [pc, #272]	; (800b954 <__multiply+0x14c>)
 800b842:	4845      	ldr	r0, [pc, #276]	; (800b958 <__multiply+0x150>)
 800b844:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b848:	f001 fbf6 	bl	800d038 <__assert_func>
 800b84c:	f100 0514 	add.w	r5, r0, #20
 800b850:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b854:	462b      	mov	r3, r5
 800b856:	2200      	movs	r2, #0
 800b858:	4543      	cmp	r3, r8
 800b85a:	d321      	bcc.n	800b8a0 <__multiply+0x98>
 800b85c:	f104 0314 	add.w	r3, r4, #20
 800b860:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b864:	f109 0314 	add.w	r3, r9, #20
 800b868:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b86c:	9202      	str	r2, [sp, #8]
 800b86e:	1b3a      	subs	r2, r7, r4
 800b870:	3a15      	subs	r2, #21
 800b872:	f022 0203 	bic.w	r2, r2, #3
 800b876:	3204      	adds	r2, #4
 800b878:	f104 0115 	add.w	r1, r4, #21
 800b87c:	428f      	cmp	r7, r1
 800b87e:	bf38      	it	cc
 800b880:	2204      	movcc	r2, #4
 800b882:	9201      	str	r2, [sp, #4]
 800b884:	9a02      	ldr	r2, [sp, #8]
 800b886:	9303      	str	r3, [sp, #12]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d80c      	bhi.n	800b8a6 <__multiply+0x9e>
 800b88c:	2e00      	cmp	r6, #0
 800b88e:	dd03      	ble.n	800b898 <__multiply+0x90>
 800b890:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b894:	2b00      	cmp	r3, #0
 800b896:	d05b      	beq.n	800b950 <__multiply+0x148>
 800b898:	6106      	str	r6, [r0, #16]
 800b89a:	b005      	add	sp, #20
 800b89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a0:	f843 2b04 	str.w	r2, [r3], #4
 800b8a4:	e7d8      	b.n	800b858 <__multiply+0x50>
 800b8a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8aa:	f1ba 0f00 	cmp.w	sl, #0
 800b8ae:	d024      	beq.n	800b8fa <__multiply+0xf2>
 800b8b0:	f104 0e14 	add.w	lr, r4, #20
 800b8b4:	46a9      	mov	r9, r5
 800b8b6:	f04f 0c00 	mov.w	ip, #0
 800b8ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b8be:	f8d9 1000 	ldr.w	r1, [r9]
 800b8c2:	fa1f fb82 	uxth.w	fp, r2
 800b8c6:	b289      	uxth	r1, r1
 800b8c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b8cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b8d0:	f8d9 2000 	ldr.w	r2, [r9]
 800b8d4:	4461      	add	r1, ip
 800b8d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8da:	fb0a c20b 	mla	r2, sl, fp, ip
 800b8de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b8e2:	b289      	uxth	r1, r1
 800b8e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8e8:	4577      	cmp	r7, lr
 800b8ea:	f849 1b04 	str.w	r1, [r9], #4
 800b8ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8f2:	d8e2      	bhi.n	800b8ba <__multiply+0xb2>
 800b8f4:	9a01      	ldr	r2, [sp, #4]
 800b8f6:	f845 c002 	str.w	ip, [r5, r2]
 800b8fa:	9a03      	ldr	r2, [sp, #12]
 800b8fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b900:	3304      	adds	r3, #4
 800b902:	f1b9 0f00 	cmp.w	r9, #0
 800b906:	d021      	beq.n	800b94c <__multiply+0x144>
 800b908:	6829      	ldr	r1, [r5, #0]
 800b90a:	f104 0c14 	add.w	ip, r4, #20
 800b90e:	46ae      	mov	lr, r5
 800b910:	f04f 0a00 	mov.w	sl, #0
 800b914:	f8bc b000 	ldrh.w	fp, [ip]
 800b918:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b91c:	fb09 220b 	mla	r2, r9, fp, r2
 800b920:	4452      	add	r2, sl
 800b922:	b289      	uxth	r1, r1
 800b924:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b928:	f84e 1b04 	str.w	r1, [lr], #4
 800b92c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b930:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b934:	f8be 1000 	ldrh.w	r1, [lr]
 800b938:	fb09 110a 	mla	r1, r9, sl, r1
 800b93c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b940:	4567      	cmp	r7, ip
 800b942:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b946:	d8e5      	bhi.n	800b914 <__multiply+0x10c>
 800b948:	9a01      	ldr	r2, [sp, #4]
 800b94a:	50a9      	str	r1, [r5, r2]
 800b94c:	3504      	adds	r5, #4
 800b94e:	e799      	b.n	800b884 <__multiply+0x7c>
 800b950:	3e01      	subs	r6, #1
 800b952:	e79b      	b.n	800b88c <__multiply+0x84>
 800b954:	08016d55 	.word	0x08016d55
 800b958:	08016d66 	.word	0x08016d66

0800b95c <__pow5mult>:
 800b95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b960:	4615      	mov	r5, r2
 800b962:	f012 0203 	ands.w	r2, r2, #3
 800b966:	4606      	mov	r6, r0
 800b968:	460f      	mov	r7, r1
 800b96a:	d007      	beq.n	800b97c <__pow5mult+0x20>
 800b96c:	4c25      	ldr	r4, [pc, #148]	; (800ba04 <__pow5mult+0xa8>)
 800b96e:	3a01      	subs	r2, #1
 800b970:	2300      	movs	r3, #0
 800b972:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b976:	f7ff fe53 	bl	800b620 <__multadd>
 800b97a:	4607      	mov	r7, r0
 800b97c:	10ad      	asrs	r5, r5, #2
 800b97e:	d03d      	beq.n	800b9fc <__pow5mult+0xa0>
 800b980:	69f4      	ldr	r4, [r6, #28]
 800b982:	b97c      	cbnz	r4, 800b9a4 <__pow5mult+0x48>
 800b984:	2010      	movs	r0, #16
 800b986:	f7fd fde3 	bl	8009550 <malloc>
 800b98a:	4602      	mov	r2, r0
 800b98c:	61f0      	str	r0, [r6, #28]
 800b98e:	b928      	cbnz	r0, 800b99c <__pow5mult+0x40>
 800b990:	4b1d      	ldr	r3, [pc, #116]	; (800ba08 <__pow5mult+0xac>)
 800b992:	481e      	ldr	r0, [pc, #120]	; (800ba0c <__pow5mult+0xb0>)
 800b994:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b998:	f001 fb4e 	bl	800d038 <__assert_func>
 800b99c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9a0:	6004      	str	r4, [r0, #0]
 800b9a2:	60c4      	str	r4, [r0, #12]
 800b9a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b9a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9ac:	b94c      	cbnz	r4, 800b9c2 <__pow5mult+0x66>
 800b9ae:	f240 2171 	movw	r1, #625	; 0x271
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f7ff ff12 	bl	800b7dc <__i2b>
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9be:	4604      	mov	r4, r0
 800b9c0:	6003      	str	r3, [r0, #0]
 800b9c2:	f04f 0900 	mov.w	r9, #0
 800b9c6:	07eb      	lsls	r3, r5, #31
 800b9c8:	d50a      	bpl.n	800b9e0 <__pow5mult+0x84>
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	4622      	mov	r2, r4
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f7ff ff1a 	bl	800b808 <__multiply>
 800b9d4:	4639      	mov	r1, r7
 800b9d6:	4680      	mov	r8, r0
 800b9d8:	4630      	mov	r0, r6
 800b9da:	f7ff fdff 	bl	800b5dc <_Bfree>
 800b9de:	4647      	mov	r7, r8
 800b9e0:	106d      	asrs	r5, r5, #1
 800b9e2:	d00b      	beq.n	800b9fc <__pow5mult+0xa0>
 800b9e4:	6820      	ldr	r0, [r4, #0]
 800b9e6:	b938      	cbnz	r0, 800b9f8 <__pow5mult+0x9c>
 800b9e8:	4622      	mov	r2, r4
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	f7ff ff0b 	bl	800b808 <__multiply>
 800b9f2:	6020      	str	r0, [r4, #0]
 800b9f4:	f8c0 9000 	str.w	r9, [r0]
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	e7e4      	b.n	800b9c6 <__pow5mult+0x6a>
 800b9fc:	4638      	mov	r0, r7
 800b9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba02:	bf00      	nop
 800ba04:	08016eb0 	.word	0x08016eb0
 800ba08:	08016ce6 	.word	0x08016ce6
 800ba0c:	08016d66 	.word	0x08016d66

0800ba10 <__lshift>:
 800ba10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba14:	460c      	mov	r4, r1
 800ba16:	6849      	ldr	r1, [r1, #4]
 800ba18:	6923      	ldr	r3, [r4, #16]
 800ba1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba1e:	68a3      	ldr	r3, [r4, #8]
 800ba20:	4607      	mov	r7, r0
 800ba22:	4691      	mov	r9, r2
 800ba24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba28:	f108 0601 	add.w	r6, r8, #1
 800ba2c:	42b3      	cmp	r3, r6
 800ba2e:	db0b      	blt.n	800ba48 <__lshift+0x38>
 800ba30:	4638      	mov	r0, r7
 800ba32:	f7ff fd93 	bl	800b55c <_Balloc>
 800ba36:	4605      	mov	r5, r0
 800ba38:	b948      	cbnz	r0, 800ba4e <__lshift+0x3e>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	4b28      	ldr	r3, [pc, #160]	; (800bae0 <__lshift+0xd0>)
 800ba3e:	4829      	ldr	r0, [pc, #164]	; (800bae4 <__lshift+0xd4>)
 800ba40:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ba44:	f001 faf8 	bl	800d038 <__assert_func>
 800ba48:	3101      	adds	r1, #1
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	e7ee      	b.n	800ba2c <__lshift+0x1c>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	f100 0114 	add.w	r1, r0, #20
 800ba54:	f100 0210 	add.w	r2, r0, #16
 800ba58:	4618      	mov	r0, r3
 800ba5a:	4553      	cmp	r3, sl
 800ba5c:	db33      	blt.n	800bac6 <__lshift+0xb6>
 800ba5e:	6920      	ldr	r0, [r4, #16]
 800ba60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba64:	f104 0314 	add.w	r3, r4, #20
 800ba68:	f019 091f 	ands.w	r9, r9, #31
 800ba6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba74:	d02b      	beq.n	800bace <__lshift+0xbe>
 800ba76:	f1c9 0e20 	rsb	lr, r9, #32
 800ba7a:	468a      	mov	sl, r1
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	6818      	ldr	r0, [r3, #0]
 800ba80:	fa00 f009 	lsl.w	r0, r0, r9
 800ba84:	4310      	orrs	r0, r2
 800ba86:	f84a 0b04 	str.w	r0, [sl], #4
 800ba8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba8e:	459c      	cmp	ip, r3
 800ba90:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba94:	d8f3      	bhi.n	800ba7e <__lshift+0x6e>
 800ba96:	ebac 0304 	sub.w	r3, ip, r4
 800ba9a:	3b15      	subs	r3, #21
 800ba9c:	f023 0303 	bic.w	r3, r3, #3
 800baa0:	3304      	adds	r3, #4
 800baa2:	f104 0015 	add.w	r0, r4, #21
 800baa6:	4584      	cmp	ip, r0
 800baa8:	bf38      	it	cc
 800baaa:	2304      	movcc	r3, #4
 800baac:	50ca      	str	r2, [r1, r3]
 800baae:	b10a      	cbz	r2, 800bab4 <__lshift+0xa4>
 800bab0:	f108 0602 	add.w	r6, r8, #2
 800bab4:	3e01      	subs	r6, #1
 800bab6:	4638      	mov	r0, r7
 800bab8:	612e      	str	r6, [r5, #16]
 800baba:	4621      	mov	r1, r4
 800babc:	f7ff fd8e 	bl	800b5dc <_Bfree>
 800bac0:	4628      	mov	r0, r5
 800bac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac6:	f842 0f04 	str.w	r0, [r2, #4]!
 800baca:	3301      	adds	r3, #1
 800bacc:	e7c5      	b.n	800ba5a <__lshift+0x4a>
 800bace:	3904      	subs	r1, #4
 800bad0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bad4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bad8:	459c      	cmp	ip, r3
 800bada:	d8f9      	bhi.n	800bad0 <__lshift+0xc0>
 800badc:	e7ea      	b.n	800bab4 <__lshift+0xa4>
 800bade:	bf00      	nop
 800bae0:	08016d55 	.word	0x08016d55
 800bae4:	08016d66 	.word	0x08016d66

0800bae8 <__mcmp>:
 800bae8:	b530      	push	{r4, r5, lr}
 800baea:	6902      	ldr	r2, [r0, #16]
 800baec:	690c      	ldr	r4, [r1, #16]
 800baee:	1b12      	subs	r2, r2, r4
 800baf0:	d10e      	bne.n	800bb10 <__mcmp+0x28>
 800baf2:	f100 0314 	add.w	r3, r0, #20
 800baf6:	3114      	adds	r1, #20
 800baf8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bafc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb08:	42a5      	cmp	r5, r4
 800bb0a:	d003      	beq.n	800bb14 <__mcmp+0x2c>
 800bb0c:	d305      	bcc.n	800bb1a <__mcmp+0x32>
 800bb0e:	2201      	movs	r2, #1
 800bb10:	4610      	mov	r0, r2
 800bb12:	bd30      	pop	{r4, r5, pc}
 800bb14:	4283      	cmp	r3, r0
 800bb16:	d3f3      	bcc.n	800bb00 <__mcmp+0x18>
 800bb18:	e7fa      	b.n	800bb10 <__mcmp+0x28>
 800bb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb1e:	e7f7      	b.n	800bb10 <__mcmp+0x28>

0800bb20 <__mdiff>:
 800bb20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	460c      	mov	r4, r1
 800bb26:	4606      	mov	r6, r0
 800bb28:	4611      	mov	r1, r2
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	4690      	mov	r8, r2
 800bb2e:	f7ff ffdb 	bl	800bae8 <__mcmp>
 800bb32:	1e05      	subs	r5, r0, #0
 800bb34:	d110      	bne.n	800bb58 <__mdiff+0x38>
 800bb36:	4629      	mov	r1, r5
 800bb38:	4630      	mov	r0, r6
 800bb3a:	f7ff fd0f 	bl	800b55c <_Balloc>
 800bb3e:	b930      	cbnz	r0, 800bb4e <__mdiff+0x2e>
 800bb40:	4b3a      	ldr	r3, [pc, #232]	; (800bc2c <__mdiff+0x10c>)
 800bb42:	4602      	mov	r2, r0
 800bb44:	f240 2137 	movw	r1, #567	; 0x237
 800bb48:	4839      	ldr	r0, [pc, #228]	; (800bc30 <__mdiff+0x110>)
 800bb4a:	f001 fa75 	bl	800d038 <__assert_func>
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb58:	bfa4      	itt	ge
 800bb5a:	4643      	movge	r3, r8
 800bb5c:	46a0      	movge	r8, r4
 800bb5e:	4630      	mov	r0, r6
 800bb60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb64:	bfa6      	itte	ge
 800bb66:	461c      	movge	r4, r3
 800bb68:	2500      	movge	r5, #0
 800bb6a:	2501      	movlt	r5, #1
 800bb6c:	f7ff fcf6 	bl	800b55c <_Balloc>
 800bb70:	b920      	cbnz	r0, 800bb7c <__mdiff+0x5c>
 800bb72:	4b2e      	ldr	r3, [pc, #184]	; (800bc2c <__mdiff+0x10c>)
 800bb74:	4602      	mov	r2, r0
 800bb76:	f240 2145 	movw	r1, #581	; 0x245
 800bb7a:	e7e5      	b.n	800bb48 <__mdiff+0x28>
 800bb7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb80:	6926      	ldr	r6, [r4, #16]
 800bb82:	60c5      	str	r5, [r0, #12]
 800bb84:	f104 0914 	add.w	r9, r4, #20
 800bb88:	f108 0514 	add.w	r5, r8, #20
 800bb8c:	f100 0e14 	add.w	lr, r0, #20
 800bb90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb98:	f108 0210 	add.w	r2, r8, #16
 800bb9c:	46f2      	mov	sl, lr
 800bb9e:	2100      	movs	r1, #0
 800bba0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bba4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bba8:	fa11 f88b 	uxtah	r8, r1, fp
 800bbac:	b299      	uxth	r1, r3
 800bbae:	0c1b      	lsrs	r3, r3, #16
 800bbb0:	eba8 0801 	sub.w	r8, r8, r1
 800bbb4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bbb8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bbbc:	fa1f f888 	uxth.w	r8, r8
 800bbc0:	1419      	asrs	r1, r3, #16
 800bbc2:	454e      	cmp	r6, r9
 800bbc4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bbc8:	f84a 3b04 	str.w	r3, [sl], #4
 800bbcc:	d8e8      	bhi.n	800bba0 <__mdiff+0x80>
 800bbce:	1b33      	subs	r3, r6, r4
 800bbd0:	3b15      	subs	r3, #21
 800bbd2:	f023 0303 	bic.w	r3, r3, #3
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	3415      	adds	r4, #21
 800bbda:	42a6      	cmp	r6, r4
 800bbdc:	bf38      	it	cc
 800bbde:	2304      	movcc	r3, #4
 800bbe0:	441d      	add	r5, r3
 800bbe2:	4473      	add	r3, lr
 800bbe4:	469e      	mov	lr, r3
 800bbe6:	462e      	mov	r6, r5
 800bbe8:	4566      	cmp	r6, ip
 800bbea:	d30e      	bcc.n	800bc0a <__mdiff+0xea>
 800bbec:	f10c 0203 	add.w	r2, ip, #3
 800bbf0:	1b52      	subs	r2, r2, r5
 800bbf2:	f022 0203 	bic.w	r2, r2, #3
 800bbf6:	3d03      	subs	r5, #3
 800bbf8:	45ac      	cmp	ip, r5
 800bbfa:	bf38      	it	cc
 800bbfc:	2200      	movcc	r2, #0
 800bbfe:	4413      	add	r3, r2
 800bc00:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bc04:	b17a      	cbz	r2, 800bc26 <__mdiff+0x106>
 800bc06:	6107      	str	r7, [r0, #16]
 800bc08:	e7a4      	b.n	800bb54 <__mdiff+0x34>
 800bc0a:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc0e:	fa11 f288 	uxtah	r2, r1, r8
 800bc12:	1414      	asrs	r4, r2, #16
 800bc14:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc18:	b292      	uxth	r2, r2
 800bc1a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc1e:	f84e 2b04 	str.w	r2, [lr], #4
 800bc22:	1421      	asrs	r1, r4, #16
 800bc24:	e7e0      	b.n	800bbe8 <__mdiff+0xc8>
 800bc26:	3f01      	subs	r7, #1
 800bc28:	e7ea      	b.n	800bc00 <__mdiff+0xe0>
 800bc2a:	bf00      	nop
 800bc2c:	08016d55 	.word	0x08016d55
 800bc30:	08016d66 	.word	0x08016d66

0800bc34 <__ulp>:
 800bc34:	b082      	sub	sp, #8
 800bc36:	ed8d 0b00 	vstr	d0, [sp]
 800bc3a:	9a01      	ldr	r2, [sp, #4]
 800bc3c:	4b0f      	ldr	r3, [pc, #60]	; (800bc7c <__ulp+0x48>)
 800bc3e:	4013      	ands	r3, r2
 800bc40:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	dc08      	bgt.n	800bc5a <__ulp+0x26>
 800bc48:	425b      	negs	r3, r3
 800bc4a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bc4e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bc52:	da04      	bge.n	800bc5e <__ulp+0x2a>
 800bc54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc58:	4113      	asrs	r3, r2
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	e008      	b.n	800bc70 <__ulp+0x3c>
 800bc5e:	f1a2 0314 	sub.w	r3, r2, #20
 800bc62:	2b1e      	cmp	r3, #30
 800bc64:	bfda      	itte	le
 800bc66:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bc6a:	40da      	lsrle	r2, r3
 800bc6c:	2201      	movgt	r2, #1
 800bc6e:	2300      	movs	r3, #0
 800bc70:	4619      	mov	r1, r3
 800bc72:	4610      	mov	r0, r2
 800bc74:	ec41 0b10 	vmov	d0, r0, r1
 800bc78:	b002      	add	sp, #8
 800bc7a:	4770      	bx	lr
 800bc7c:	7ff00000 	.word	0x7ff00000

0800bc80 <__b2d>:
 800bc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc84:	6906      	ldr	r6, [r0, #16]
 800bc86:	f100 0814 	add.w	r8, r0, #20
 800bc8a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bc8e:	1f37      	subs	r7, r6, #4
 800bc90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bc94:	4610      	mov	r0, r2
 800bc96:	f7ff fd53 	bl	800b740 <__hi0bits>
 800bc9a:	f1c0 0320 	rsb	r3, r0, #32
 800bc9e:	280a      	cmp	r0, #10
 800bca0:	600b      	str	r3, [r1, #0]
 800bca2:	491b      	ldr	r1, [pc, #108]	; (800bd10 <__b2d+0x90>)
 800bca4:	dc15      	bgt.n	800bcd2 <__b2d+0x52>
 800bca6:	f1c0 0c0b 	rsb	ip, r0, #11
 800bcaa:	fa22 f30c 	lsr.w	r3, r2, ip
 800bcae:	45b8      	cmp	r8, r7
 800bcb0:	ea43 0501 	orr.w	r5, r3, r1
 800bcb4:	bf34      	ite	cc
 800bcb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bcba:	2300      	movcs	r3, #0
 800bcbc:	3015      	adds	r0, #21
 800bcbe:	fa02 f000 	lsl.w	r0, r2, r0
 800bcc2:	fa23 f30c 	lsr.w	r3, r3, ip
 800bcc6:	4303      	orrs	r3, r0
 800bcc8:	461c      	mov	r4, r3
 800bcca:	ec45 4b10 	vmov	d0, r4, r5
 800bcce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd2:	45b8      	cmp	r8, r7
 800bcd4:	bf3a      	itte	cc
 800bcd6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bcda:	f1a6 0708 	subcc.w	r7, r6, #8
 800bcde:	2300      	movcs	r3, #0
 800bce0:	380b      	subs	r0, #11
 800bce2:	d012      	beq.n	800bd0a <__b2d+0x8a>
 800bce4:	f1c0 0120 	rsb	r1, r0, #32
 800bce8:	fa23 f401 	lsr.w	r4, r3, r1
 800bcec:	4082      	lsls	r2, r0
 800bcee:	4322      	orrs	r2, r4
 800bcf0:	4547      	cmp	r7, r8
 800bcf2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bcf6:	bf8c      	ite	hi
 800bcf8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bcfc:	2200      	movls	r2, #0
 800bcfe:	4083      	lsls	r3, r0
 800bd00:	40ca      	lsrs	r2, r1
 800bd02:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bd06:	4313      	orrs	r3, r2
 800bd08:	e7de      	b.n	800bcc8 <__b2d+0x48>
 800bd0a:	ea42 0501 	orr.w	r5, r2, r1
 800bd0e:	e7db      	b.n	800bcc8 <__b2d+0x48>
 800bd10:	3ff00000 	.word	0x3ff00000

0800bd14 <__d2b>:
 800bd14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd18:	460f      	mov	r7, r1
 800bd1a:	2101      	movs	r1, #1
 800bd1c:	ec59 8b10 	vmov	r8, r9, d0
 800bd20:	4616      	mov	r6, r2
 800bd22:	f7ff fc1b 	bl	800b55c <_Balloc>
 800bd26:	4604      	mov	r4, r0
 800bd28:	b930      	cbnz	r0, 800bd38 <__d2b+0x24>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	4b24      	ldr	r3, [pc, #144]	; (800bdc0 <__d2b+0xac>)
 800bd2e:	4825      	ldr	r0, [pc, #148]	; (800bdc4 <__d2b+0xb0>)
 800bd30:	f240 310f 	movw	r1, #783	; 0x30f
 800bd34:	f001 f980 	bl	800d038 <__assert_func>
 800bd38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd40:	bb2d      	cbnz	r5, 800bd8e <__d2b+0x7a>
 800bd42:	9301      	str	r3, [sp, #4]
 800bd44:	f1b8 0300 	subs.w	r3, r8, #0
 800bd48:	d026      	beq.n	800bd98 <__d2b+0x84>
 800bd4a:	4668      	mov	r0, sp
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	f7ff fd17 	bl	800b780 <__lo0bits>
 800bd52:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd56:	b1e8      	cbz	r0, 800bd94 <__d2b+0x80>
 800bd58:	f1c0 0320 	rsb	r3, r0, #32
 800bd5c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd60:	430b      	orrs	r3, r1
 800bd62:	40c2      	lsrs	r2, r0
 800bd64:	6163      	str	r3, [r4, #20]
 800bd66:	9201      	str	r2, [sp, #4]
 800bd68:	9b01      	ldr	r3, [sp, #4]
 800bd6a:	61a3      	str	r3, [r4, #24]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	bf14      	ite	ne
 800bd70:	2202      	movne	r2, #2
 800bd72:	2201      	moveq	r2, #1
 800bd74:	6122      	str	r2, [r4, #16]
 800bd76:	b1bd      	cbz	r5, 800bda8 <__d2b+0x94>
 800bd78:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd7c:	4405      	add	r5, r0
 800bd7e:	603d      	str	r5, [r7, #0]
 800bd80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd84:	6030      	str	r0, [r6, #0]
 800bd86:	4620      	mov	r0, r4
 800bd88:	b003      	add	sp, #12
 800bd8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd92:	e7d6      	b.n	800bd42 <__d2b+0x2e>
 800bd94:	6161      	str	r1, [r4, #20]
 800bd96:	e7e7      	b.n	800bd68 <__d2b+0x54>
 800bd98:	a801      	add	r0, sp, #4
 800bd9a:	f7ff fcf1 	bl	800b780 <__lo0bits>
 800bd9e:	9b01      	ldr	r3, [sp, #4]
 800bda0:	6163      	str	r3, [r4, #20]
 800bda2:	3020      	adds	r0, #32
 800bda4:	2201      	movs	r2, #1
 800bda6:	e7e5      	b.n	800bd74 <__d2b+0x60>
 800bda8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bdac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bdb0:	6038      	str	r0, [r7, #0]
 800bdb2:	6918      	ldr	r0, [r3, #16]
 800bdb4:	f7ff fcc4 	bl	800b740 <__hi0bits>
 800bdb8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bdbc:	e7e2      	b.n	800bd84 <__d2b+0x70>
 800bdbe:	bf00      	nop
 800bdc0:	08016d55 	.word	0x08016d55
 800bdc4:	08016d66 	.word	0x08016d66

0800bdc8 <__ratio>:
 800bdc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	4688      	mov	r8, r1
 800bdce:	4669      	mov	r1, sp
 800bdd0:	4681      	mov	r9, r0
 800bdd2:	f7ff ff55 	bl	800bc80 <__b2d>
 800bdd6:	a901      	add	r1, sp, #4
 800bdd8:	4640      	mov	r0, r8
 800bdda:	ec55 4b10 	vmov	r4, r5, d0
 800bdde:	f7ff ff4f 	bl	800bc80 <__b2d>
 800bde2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bde6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bdea:	eba3 0c02 	sub.w	ip, r3, r2
 800bdee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bdf2:	1a9b      	subs	r3, r3, r2
 800bdf4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bdf8:	ec51 0b10 	vmov	r0, r1, d0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	bfd6      	itet	le
 800be00:	460a      	movle	r2, r1
 800be02:	462a      	movgt	r2, r5
 800be04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be08:	468b      	mov	fp, r1
 800be0a:	462f      	mov	r7, r5
 800be0c:	bfd4      	ite	le
 800be0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be16:	4620      	mov	r0, r4
 800be18:	ee10 2a10 	vmov	r2, s0
 800be1c:	465b      	mov	r3, fp
 800be1e:	4639      	mov	r1, r7
 800be20:	f7f4 fd1c 	bl	800085c <__aeabi_ddiv>
 800be24:	ec41 0b10 	vmov	d0, r0, r1
 800be28:	b003      	add	sp, #12
 800be2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be2e <__copybits>:
 800be2e:	3901      	subs	r1, #1
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	1149      	asrs	r1, r1, #5
 800be34:	6914      	ldr	r4, [r2, #16]
 800be36:	3101      	adds	r1, #1
 800be38:	f102 0314 	add.w	r3, r2, #20
 800be3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be44:	1f05      	subs	r5, r0, #4
 800be46:	42a3      	cmp	r3, r4
 800be48:	d30c      	bcc.n	800be64 <__copybits+0x36>
 800be4a:	1aa3      	subs	r3, r4, r2
 800be4c:	3b11      	subs	r3, #17
 800be4e:	f023 0303 	bic.w	r3, r3, #3
 800be52:	3211      	adds	r2, #17
 800be54:	42a2      	cmp	r2, r4
 800be56:	bf88      	it	hi
 800be58:	2300      	movhi	r3, #0
 800be5a:	4418      	add	r0, r3
 800be5c:	2300      	movs	r3, #0
 800be5e:	4288      	cmp	r0, r1
 800be60:	d305      	bcc.n	800be6e <__copybits+0x40>
 800be62:	bd70      	pop	{r4, r5, r6, pc}
 800be64:	f853 6b04 	ldr.w	r6, [r3], #4
 800be68:	f845 6f04 	str.w	r6, [r5, #4]!
 800be6c:	e7eb      	b.n	800be46 <__copybits+0x18>
 800be6e:	f840 3b04 	str.w	r3, [r0], #4
 800be72:	e7f4      	b.n	800be5e <__copybits+0x30>

0800be74 <__any_on>:
 800be74:	f100 0214 	add.w	r2, r0, #20
 800be78:	6900      	ldr	r0, [r0, #16]
 800be7a:	114b      	asrs	r3, r1, #5
 800be7c:	4298      	cmp	r0, r3
 800be7e:	b510      	push	{r4, lr}
 800be80:	db11      	blt.n	800bea6 <__any_on+0x32>
 800be82:	dd0a      	ble.n	800be9a <__any_on+0x26>
 800be84:	f011 011f 	ands.w	r1, r1, #31
 800be88:	d007      	beq.n	800be9a <__any_on+0x26>
 800be8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800be8e:	fa24 f001 	lsr.w	r0, r4, r1
 800be92:	fa00 f101 	lsl.w	r1, r0, r1
 800be96:	428c      	cmp	r4, r1
 800be98:	d10b      	bne.n	800beb2 <__any_on+0x3e>
 800be9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d803      	bhi.n	800beaa <__any_on+0x36>
 800bea2:	2000      	movs	r0, #0
 800bea4:	bd10      	pop	{r4, pc}
 800bea6:	4603      	mov	r3, r0
 800bea8:	e7f7      	b.n	800be9a <__any_on+0x26>
 800beaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800beae:	2900      	cmp	r1, #0
 800beb0:	d0f5      	beq.n	800be9e <__any_on+0x2a>
 800beb2:	2001      	movs	r0, #1
 800beb4:	e7f6      	b.n	800bea4 <__any_on+0x30>

0800beb6 <_malloc_usable_size_r>:
 800beb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800beba:	1f18      	subs	r0, r3, #4
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	bfbc      	itt	lt
 800bec0:	580b      	ldrlt	r3, [r1, r0]
 800bec2:	18c0      	addlt	r0, r0, r3
 800bec4:	4770      	bx	lr

0800bec6 <sulp>:
 800bec6:	b570      	push	{r4, r5, r6, lr}
 800bec8:	4604      	mov	r4, r0
 800beca:	460d      	mov	r5, r1
 800becc:	ec45 4b10 	vmov	d0, r4, r5
 800bed0:	4616      	mov	r6, r2
 800bed2:	f7ff feaf 	bl	800bc34 <__ulp>
 800bed6:	ec51 0b10 	vmov	r0, r1, d0
 800beda:	b17e      	cbz	r6, 800befc <sulp+0x36>
 800bedc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bee0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	dd09      	ble.n	800befc <sulp+0x36>
 800bee8:	051b      	lsls	r3, r3, #20
 800beea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800beee:	2400      	movs	r4, #0
 800bef0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bef4:	4622      	mov	r2, r4
 800bef6:	462b      	mov	r3, r5
 800bef8:	f7f4 fb86 	bl	8000608 <__aeabi_dmul>
 800befc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf00 <_strtod_l>:
 800bf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf04:	ed2d 8b02 	vpush	{d8}
 800bf08:	b09b      	sub	sp, #108	; 0x6c
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	9213      	str	r2, [sp, #76]	; 0x4c
 800bf0e:	2200      	movs	r2, #0
 800bf10:	9216      	str	r2, [sp, #88]	; 0x58
 800bf12:	460d      	mov	r5, r1
 800bf14:	f04f 0800 	mov.w	r8, #0
 800bf18:	f04f 0900 	mov.w	r9, #0
 800bf1c:	460a      	mov	r2, r1
 800bf1e:	9215      	str	r2, [sp, #84]	; 0x54
 800bf20:	7811      	ldrb	r1, [r2, #0]
 800bf22:	292b      	cmp	r1, #43	; 0x2b
 800bf24:	d04c      	beq.n	800bfc0 <_strtod_l+0xc0>
 800bf26:	d83a      	bhi.n	800bf9e <_strtod_l+0x9e>
 800bf28:	290d      	cmp	r1, #13
 800bf2a:	d834      	bhi.n	800bf96 <_strtod_l+0x96>
 800bf2c:	2908      	cmp	r1, #8
 800bf2e:	d834      	bhi.n	800bf9a <_strtod_l+0x9a>
 800bf30:	2900      	cmp	r1, #0
 800bf32:	d03d      	beq.n	800bfb0 <_strtod_l+0xb0>
 800bf34:	2200      	movs	r2, #0
 800bf36:	920a      	str	r2, [sp, #40]	; 0x28
 800bf38:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800bf3a:	7832      	ldrb	r2, [r6, #0]
 800bf3c:	2a30      	cmp	r2, #48	; 0x30
 800bf3e:	f040 80b4 	bne.w	800c0aa <_strtod_l+0x1aa>
 800bf42:	7872      	ldrb	r2, [r6, #1]
 800bf44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bf48:	2a58      	cmp	r2, #88	; 0x58
 800bf4a:	d170      	bne.n	800c02e <_strtod_l+0x12e>
 800bf4c:	9302      	str	r3, [sp, #8]
 800bf4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf50:	9301      	str	r3, [sp, #4]
 800bf52:	ab16      	add	r3, sp, #88	; 0x58
 800bf54:	9300      	str	r3, [sp, #0]
 800bf56:	4a8e      	ldr	r2, [pc, #568]	; (800c190 <_strtod_l+0x290>)
 800bf58:	ab17      	add	r3, sp, #92	; 0x5c
 800bf5a:	a915      	add	r1, sp, #84	; 0x54
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	f001 f907 	bl	800d170 <__gethex>
 800bf62:	f010 070f 	ands.w	r7, r0, #15
 800bf66:	4605      	mov	r5, r0
 800bf68:	d005      	beq.n	800bf76 <_strtod_l+0x76>
 800bf6a:	2f06      	cmp	r7, #6
 800bf6c:	d12a      	bne.n	800bfc4 <_strtod_l+0xc4>
 800bf6e:	3601      	adds	r6, #1
 800bf70:	2300      	movs	r3, #0
 800bf72:	9615      	str	r6, [sp, #84]	; 0x54
 800bf74:	930a      	str	r3, [sp, #40]	; 0x28
 800bf76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f040 857f 	bne.w	800ca7c <_strtod_l+0xb7c>
 800bf7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf80:	b1db      	cbz	r3, 800bfba <_strtod_l+0xba>
 800bf82:	4642      	mov	r2, r8
 800bf84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bf88:	ec43 2b10 	vmov	d0, r2, r3
 800bf8c:	b01b      	add	sp, #108	; 0x6c
 800bf8e:	ecbd 8b02 	vpop	{d8}
 800bf92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf96:	2920      	cmp	r1, #32
 800bf98:	d1cc      	bne.n	800bf34 <_strtod_l+0x34>
 800bf9a:	3201      	adds	r2, #1
 800bf9c:	e7bf      	b.n	800bf1e <_strtod_l+0x1e>
 800bf9e:	292d      	cmp	r1, #45	; 0x2d
 800bfa0:	d1c8      	bne.n	800bf34 <_strtod_l+0x34>
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	910a      	str	r1, [sp, #40]	; 0x28
 800bfa6:	1c51      	adds	r1, r2, #1
 800bfa8:	9115      	str	r1, [sp, #84]	; 0x54
 800bfaa:	7852      	ldrb	r2, [r2, #1]
 800bfac:	2a00      	cmp	r2, #0
 800bfae:	d1c3      	bne.n	800bf38 <_strtod_l+0x38>
 800bfb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bfb2:	9515      	str	r5, [sp, #84]	; 0x54
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f040 855f 	bne.w	800ca78 <_strtod_l+0xb78>
 800bfba:	4642      	mov	r2, r8
 800bfbc:	464b      	mov	r3, r9
 800bfbe:	e7e3      	b.n	800bf88 <_strtod_l+0x88>
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	e7ef      	b.n	800bfa4 <_strtod_l+0xa4>
 800bfc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bfc6:	b13a      	cbz	r2, 800bfd8 <_strtod_l+0xd8>
 800bfc8:	2135      	movs	r1, #53	; 0x35
 800bfca:	a818      	add	r0, sp, #96	; 0x60
 800bfcc:	f7ff ff2f 	bl	800be2e <__copybits>
 800bfd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f7ff fb02 	bl	800b5dc <_Bfree>
 800bfd8:	3f01      	subs	r7, #1
 800bfda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bfdc:	2f04      	cmp	r7, #4
 800bfde:	d806      	bhi.n	800bfee <_strtod_l+0xee>
 800bfe0:	e8df f007 	tbb	[pc, r7]
 800bfe4:	201d0314 	.word	0x201d0314
 800bfe8:	14          	.byte	0x14
 800bfe9:	00          	.byte	0x00
 800bfea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800bfee:	05e9      	lsls	r1, r5, #23
 800bff0:	bf48      	it	mi
 800bff2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800bff6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bffa:	0d1b      	lsrs	r3, r3, #20
 800bffc:	051b      	lsls	r3, r3, #20
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1b9      	bne.n	800bf76 <_strtod_l+0x76>
 800c002:	f7fe fba1 	bl	800a748 <__errno>
 800c006:	2322      	movs	r3, #34	; 0x22
 800c008:	6003      	str	r3, [r0, #0]
 800c00a:	e7b4      	b.n	800bf76 <_strtod_l+0x76>
 800c00c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800c010:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c014:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c018:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c01c:	e7e7      	b.n	800bfee <_strtod_l+0xee>
 800c01e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c198 <_strtod_l+0x298>
 800c022:	e7e4      	b.n	800bfee <_strtod_l+0xee>
 800c024:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c028:	f04f 38ff 	mov.w	r8, #4294967295
 800c02c:	e7df      	b.n	800bfee <_strtod_l+0xee>
 800c02e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c030:	1c5a      	adds	r2, r3, #1
 800c032:	9215      	str	r2, [sp, #84]	; 0x54
 800c034:	785b      	ldrb	r3, [r3, #1]
 800c036:	2b30      	cmp	r3, #48	; 0x30
 800c038:	d0f9      	beq.n	800c02e <_strtod_l+0x12e>
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d09b      	beq.n	800bf76 <_strtod_l+0x76>
 800c03e:	2301      	movs	r3, #1
 800c040:	f04f 0a00 	mov.w	sl, #0
 800c044:	9304      	str	r3, [sp, #16]
 800c046:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c048:	930b      	str	r3, [sp, #44]	; 0x2c
 800c04a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c04e:	46d3      	mov	fp, sl
 800c050:	220a      	movs	r2, #10
 800c052:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c054:	7806      	ldrb	r6, [r0, #0]
 800c056:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c05a:	b2d9      	uxtb	r1, r3
 800c05c:	2909      	cmp	r1, #9
 800c05e:	d926      	bls.n	800c0ae <_strtod_l+0x1ae>
 800c060:	494c      	ldr	r1, [pc, #304]	; (800c194 <_strtod_l+0x294>)
 800c062:	2201      	movs	r2, #1
 800c064:	f000 ffcc 	bl	800d000 <strncmp>
 800c068:	2800      	cmp	r0, #0
 800c06a:	d030      	beq.n	800c0ce <_strtod_l+0x1ce>
 800c06c:	2000      	movs	r0, #0
 800c06e:	4632      	mov	r2, r6
 800c070:	9005      	str	r0, [sp, #20]
 800c072:	465e      	mov	r6, fp
 800c074:	4603      	mov	r3, r0
 800c076:	2a65      	cmp	r2, #101	; 0x65
 800c078:	d001      	beq.n	800c07e <_strtod_l+0x17e>
 800c07a:	2a45      	cmp	r2, #69	; 0x45
 800c07c:	d113      	bne.n	800c0a6 <_strtod_l+0x1a6>
 800c07e:	b91e      	cbnz	r6, 800c088 <_strtod_l+0x188>
 800c080:	9a04      	ldr	r2, [sp, #16]
 800c082:	4302      	orrs	r2, r0
 800c084:	d094      	beq.n	800bfb0 <_strtod_l+0xb0>
 800c086:	2600      	movs	r6, #0
 800c088:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c08a:	1c6a      	adds	r2, r5, #1
 800c08c:	9215      	str	r2, [sp, #84]	; 0x54
 800c08e:	786a      	ldrb	r2, [r5, #1]
 800c090:	2a2b      	cmp	r2, #43	; 0x2b
 800c092:	d074      	beq.n	800c17e <_strtod_l+0x27e>
 800c094:	2a2d      	cmp	r2, #45	; 0x2d
 800c096:	d078      	beq.n	800c18a <_strtod_l+0x28a>
 800c098:	f04f 0c00 	mov.w	ip, #0
 800c09c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c0a0:	2909      	cmp	r1, #9
 800c0a2:	d97f      	bls.n	800c1a4 <_strtod_l+0x2a4>
 800c0a4:	9515      	str	r5, [sp, #84]	; 0x54
 800c0a6:	2700      	movs	r7, #0
 800c0a8:	e09e      	b.n	800c1e8 <_strtod_l+0x2e8>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	e7c8      	b.n	800c040 <_strtod_l+0x140>
 800c0ae:	f1bb 0f08 	cmp.w	fp, #8
 800c0b2:	bfd8      	it	le
 800c0b4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c0b6:	f100 0001 	add.w	r0, r0, #1
 800c0ba:	bfda      	itte	le
 800c0bc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c0c0:	9309      	strle	r3, [sp, #36]	; 0x24
 800c0c2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c0c6:	f10b 0b01 	add.w	fp, fp, #1
 800c0ca:	9015      	str	r0, [sp, #84]	; 0x54
 800c0cc:	e7c1      	b.n	800c052 <_strtod_l+0x152>
 800c0ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0d0:	1c5a      	adds	r2, r3, #1
 800c0d2:	9215      	str	r2, [sp, #84]	; 0x54
 800c0d4:	785a      	ldrb	r2, [r3, #1]
 800c0d6:	f1bb 0f00 	cmp.w	fp, #0
 800c0da:	d037      	beq.n	800c14c <_strtod_l+0x24c>
 800c0dc:	9005      	str	r0, [sp, #20]
 800c0de:	465e      	mov	r6, fp
 800c0e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c0e4:	2b09      	cmp	r3, #9
 800c0e6:	d912      	bls.n	800c10e <_strtod_l+0x20e>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e7c4      	b.n	800c076 <_strtod_l+0x176>
 800c0ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0ee:	1c5a      	adds	r2, r3, #1
 800c0f0:	9215      	str	r2, [sp, #84]	; 0x54
 800c0f2:	785a      	ldrb	r2, [r3, #1]
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	2a30      	cmp	r2, #48	; 0x30
 800c0f8:	d0f8      	beq.n	800c0ec <_strtod_l+0x1ec>
 800c0fa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c0fe:	2b08      	cmp	r3, #8
 800c100:	f200 84c1 	bhi.w	800ca86 <_strtod_l+0xb86>
 800c104:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c106:	9005      	str	r0, [sp, #20]
 800c108:	2000      	movs	r0, #0
 800c10a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c10c:	4606      	mov	r6, r0
 800c10e:	3a30      	subs	r2, #48	; 0x30
 800c110:	f100 0301 	add.w	r3, r0, #1
 800c114:	d014      	beq.n	800c140 <_strtod_l+0x240>
 800c116:	9905      	ldr	r1, [sp, #20]
 800c118:	4419      	add	r1, r3
 800c11a:	9105      	str	r1, [sp, #20]
 800c11c:	4633      	mov	r3, r6
 800c11e:	eb00 0c06 	add.w	ip, r0, r6
 800c122:	210a      	movs	r1, #10
 800c124:	4563      	cmp	r3, ip
 800c126:	d113      	bne.n	800c150 <_strtod_l+0x250>
 800c128:	1833      	adds	r3, r6, r0
 800c12a:	2b08      	cmp	r3, #8
 800c12c:	f106 0601 	add.w	r6, r6, #1
 800c130:	4406      	add	r6, r0
 800c132:	dc1a      	bgt.n	800c16a <_strtod_l+0x26a>
 800c134:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c136:	230a      	movs	r3, #10
 800c138:	fb03 2301 	mla	r3, r3, r1, r2
 800c13c:	9309      	str	r3, [sp, #36]	; 0x24
 800c13e:	2300      	movs	r3, #0
 800c140:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c142:	1c51      	adds	r1, r2, #1
 800c144:	9115      	str	r1, [sp, #84]	; 0x54
 800c146:	7852      	ldrb	r2, [r2, #1]
 800c148:	4618      	mov	r0, r3
 800c14a:	e7c9      	b.n	800c0e0 <_strtod_l+0x1e0>
 800c14c:	4658      	mov	r0, fp
 800c14e:	e7d2      	b.n	800c0f6 <_strtod_l+0x1f6>
 800c150:	2b08      	cmp	r3, #8
 800c152:	f103 0301 	add.w	r3, r3, #1
 800c156:	dc03      	bgt.n	800c160 <_strtod_l+0x260>
 800c158:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c15a:	434f      	muls	r7, r1
 800c15c:	9709      	str	r7, [sp, #36]	; 0x24
 800c15e:	e7e1      	b.n	800c124 <_strtod_l+0x224>
 800c160:	2b10      	cmp	r3, #16
 800c162:	bfd8      	it	le
 800c164:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c168:	e7dc      	b.n	800c124 <_strtod_l+0x224>
 800c16a:	2e10      	cmp	r6, #16
 800c16c:	bfdc      	itt	le
 800c16e:	230a      	movle	r3, #10
 800c170:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c174:	e7e3      	b.n	800c13e <_strtod_l+0x23e>
 800c176:	2300      	movs	r3, #0
 800c178:	9305      	str	r3, [sp, #20]
 800c17a:	2301      	movs	r3, #1
 800c17c:	e780      	b.n	800c080 <_strtod_l+0x180>
 800c17e:	f04f 0c00 	mov.w	ip, #0
 800c182:	1caa      	adds	r2, r5, #2
 800c184:	9215      	str	r2, [sp, #84]	; 0x54
 800c186:	78aa      	ldrb	r2, [r5, #2]
 800c188:	e788      	b.n	800c09c <_strtod_l+0x19c>
 800c18a:	f04f 0c01 	mov.w	ip, #1
 800c18e:	e7f8      	b.n	800c182 <_strtod_l+0x282>
 800c190:	08016ec0 	.word	0x08016ec0
 800c194:	08016ebc 	.word	0x08016ebc
 800c198:	7ff00000 	.word	0x7ff00000
 800c19c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c19e:	1c51      	adds	r1, r2, #1
 800c1a0:	9115      	str	r1, [sp, #84]	; 0x54
 800c1a2:	7852      	ldrb	r2, [r2, #1]
 800c1a4:	2a30      	cmp	r2, #48	; 0x30
 800c1a6:	d0f9      	beq.n	800c19c <_strtod_l+0x29c>
 800c1a8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c1ac:	2908      	cmp	r1, #8
 800c1ae:	f63f af7a 	bhi.w	800c0a6 <_strtod_l+0x1a6>
 800c1b2:	3a30      	subs	r2, #48	; 0x30
 800c1b4:	9208      	str	r2, [sp, #32]
 800c1b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c1b8:	920c      	str	r2, [sp, #48]	; 0x30
 800c1ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c1bc:	1c57      	adds	r7, r2, #1
 800c1be:	9715      	str	r7, [sp, #84]	; 0x54
 800c1c0:	7852      	ldrb	r2, [r2, #1]
 800c1c2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c1c6:	f1be 0f09 	cmp.w	lr, #9
 800c1ca:	d938      	bls.n	800c23e <_strtod_l+0x33e>
 800c1cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c1ce:	1a7f      	subs	r7, r7, r1
 800c1d0:	2f08      	cmp	r7, #8
 800c1d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c1d6:	dc03      	bgt.n	800c1e0 <_strtod_l+0x2e0>
 800c1d8:	9908      	ldr	r1, [sp, #32]
 800c1da:	428f      	cmp	r7, r1
 800c1dc:	bfa8      	it	ge
 800c1de:	460f      	movge	r7, r1
 800c1e0:	f1bc 0f00 	cmp.w	ip, #0
 800c1e4:	d000      	beq.n	800c1e8 <_strtod_l+0x2e8>
 800c1e6:	427f      	negs	r7, r7
 800c1e8:	2e00      	cmp	r6, #0
 800c1ea:	d14f      	bne.n	800c28c <_strtod_l+0x38c>
 800c1ec:	9904      	ldr	r1, [sp, #16]
 800c1ee:	4301      	orrs	r1, r0
 800c1f0:	f47f aec1 	bne.w	800bf76 <_strtod_l+0x76>
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f47f aedb 	bne.w	800bfb0 <_strtod_l+0xb0>
 800c1fa:	2a69      	cmp	r2, #105	; 0x69
 800c1fc:	d029      	beq.n	800c252 <_strtod_l+0x352>
 800c1fe:	dc26      	bgt.n	800c24e <_strtod_l+0x34e>
 800c200:	2a49      	cmp	r2, #73	; 0x49
 800c202:	d026      	beq.n	800c252 <_strtod_l+0x352>
 800c204:	2a4e      	cmp	r2, #78	; 0x4e
 800c206:	f47f aed3 	bne.w	800bfb0 <_strtod_l+0xb0>
 800c20a:	499b      	ldr	r1, [pc, #620]	; (800c478 <_strtod_l+0x578>)
 800c20c:	a815      	add	r0, sp, #84	; 0x54
 800c20e:	f001 f9ef 	bl	800d5f0 <__match>
 800c212:	2800      	cmp	r0, #0
 800c214:	f43f aecc 	beq.w	800bfb0 <_strtod_l+0xb0>
 800c218:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	2b28      	cmp	r3, #40	; 0x28
 800c21e:	d12f      	bne.n	800c280 <_strtod_l+0x380>
 800c220:	4996      	ldr	r1, [pc, #600]	; (800c47c <_strtod_l+0x57c>)
 800c222:	aa18      	add	r2, sp, #96	; 0x60
 800c224:	a815      	add	r0, sp, #84	; 0x54
 800c226:	f001 f9f7 	bl	800d618 <__hexnan>
 800c22a:	2805      	cmp	r0, #5
 800c22c:	d128      	bne.n	800c280 <_strtod_l+0x380>
 800c22e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c230:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c234:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c238:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c23c:	e69b      	b.n	800bf76 <_strtod_l+0x76>
 800c23e:	9f08      	ldr	r7, [sp, #32]
 800c240:	210a      	movs	r1, #10
 800c242:	fb01 2107 	mla	r1, r1, r7, r2
 800c246:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c24a:	9208      	str	r2, [sp, #32]
 800c24c:	e7b5      	b.n	800c1ba <_strtod_l+0x2ba>
 800c24e:	2a6e      	cmp	r2, #110	; 0x6e
 800c250:	e7d9      	b.n	800c206 <_strtod_l+0x306>
 800c252:	498b      	ldr	r1, [pc, #556]	; (800c480 <_strtod_l+0x580>)
 800c254:	a815      	add	r0, sp, #84	; 0x54
 800c256:	f001 f9cb 	bl	800d5f0 <__match>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	f43f aea8 	beq.w	800bfb0 <_strtod_l+0xb0>
 800c260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c262:	4988      	ldr	r1, [pc, #544]	; (800c484 <_strtod_l+0x584>)
 800c264:	3b01      	subs	r3, #1
 800c266:	a815      	add	r0, sp, #84	; 0x54
 800c268:	9315      	str	r3, [sp, #84]	; 0x54
 800c26a:	f001 f9c1 	bl	800d5f0 <__match>
 800c26e:	b910      	cbnz	r0, 800c276 <_strtod_l+0x376>
 800c270:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c272:	3301      	adds	r3, #1
 800c274:	9315      	str	r3, [sp, #84]	; 0x54
 800c276:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c494 <_strtod_l+0x594>
 800c27a:	f04f 0800 	mov.w	r8, #0
 800c27e:	e67a      	b.n	800bf76 <_strtod_l+0x76>
 800c280:	4881      	ldr	r0, [pc, #516]	; (800c488 <_strtod_l+0x588>)
 800c282:	f000 fed1 	bl	800d028 <nan>
 800c286:	ec59 8b10 	vmov	r8, r9, d0
 800c28a:	e674      	b.n	800bf76 <_strtod_l+0x76>
 800c28c:	9b05      	ldr	r3, [sp, #20]
 800c28e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c290:	1afb      	subs	r3, r7, r3
 800c292:	f1bb 0f00 	cmp.w	fp, #0
 800c296:	bf08      	it	eq
 800c298:	46b3      	moveq	fp, r6
 800c29a:	2e10      	cmp	r6, #16
 800c29c:	9308      	str	r3, [sp, #32]
 800c29e:	4635      	mov	r5, r6
 800c2a0:	bfa8      	it	ge
 800c2a2:	2510      	movge	r5, #16
 800c2a4:	f7f4 f936 	bl	8000514 <__aeabi_ui2d>
 800c2a8:	2e09      	cmp	r6, #9
 800c2aa:	4680      	mov	r8, r0
 800c2ac:	4689      	mov	r9, r1
 800c2ae:	dd13      	ble.n	800c2d8 <_strtod_l+0x3d8>
 800c2b0:	4b76      	ldr	r3, [pc, #472]	; (800c48c <_strtod_l+0x58c>)
 800c2b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c2b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c2ba:	f7f4 f9a5 	bl	8000608 <__aeabi_dmul>
 800c2be:	4680      	mov	r8, r0
 800c2c0:	4650      	mov	r0, sl
 800c2c2:	4689      	mov	r9, r1
 800c2c4:	f7f4 f926 	bl	8000514 <__aeabi_ui2d>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	4640      	mov	r0, r8
 800c2ce:	4649      	mov	r1, r9
 800c2d0:	f7f3 ffe4 	bl	800029c <__adddf3>
 800c2d4:	4680      	mov	r8, r0
 800c2d6:	4689      	mov	r9, r1
 800c2d8:	2e0f      	cmp	r6, #15
 800c2da:	dc38      	bgt.n	800c34e <_strtod_l+0x44e>
 800c2dc:	9b08      	ldr	r3, [sp, #32]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	f43f ae49 	beq.w	800bf76 <_strtod_l+0x76>
 800c2e4:	dd24      	ble.n	800c330 <_strtod_l+0x430>
 800c2e6:	2b16      	cmp	r3, #22
 800c2e8:	dc0b      	bgt.n	800c302 <_strtod_l+0x402>
 800c2ea:	4968      	ldr	r1, [pc, #416]	; (800c48c <_strtod_l+0x58c>)
 800c2ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c2f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2f4:	4642      	mov	r2, r8
 800c2f6:	464b      	mov	r3, r9
 800c2f8:	f7f4 f986 	bl	8000608 <__aeabi_dmul>
 800c2fc:	4680      	mov	r8, r0
 800c2fe:	4689      	mov	r9, r1
 800c300:	e639      	b.n	800bf76 <_strtod_l+0x76>
 800c302:	9a08      	ldr	r2, [sp, #32]
 800c304:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c308:	4293      	cmp	r3, r2
 800c30a:	db20      	blt.n	800c34e <_strtod_l+0x44e>
 800c30c:	4c5f      	ldr	r4, [pc, #380]	; (800c48c <_strtod_l+0x58c>)
 800c30e:	f1c6 060f 	rsb	r6, r6, #15
 800c312:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c316:	4642      	mov	r2, r8
 800c318:	464b      	mov	r3, r9
 800c31a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c31e:	f7f4 f973 	bl	8000608 <__aeabi_dmul>
 800c322:	9b08      	ldr	r3, [sp, #32]
 800c324:	1b9e      	subs	r6, r3, r6
 800c326:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c32a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c32e:	e7e3      	b.n	800c2f8 <_strtod_l+0x3f8>
 800c330:	9b08      	ldr	r3, [sp, #32]
 800c332:	3316      	adds	r3, #22
 800c334:	db0b      	blt.n	800c34e <_strtod_l+0x44e>
 800c336:	9b05      	ldr	r3, [sp, #20]
 800c338:	1bdf      	subs	r7, r3, r7
 800c33a:	4b54      	ldr	r3, [pc, #336]	; (800c48c <_strtod_l+0x58c>)
 800c33c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c340:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c344:	4640      	mov	r0, r8
 800c346:	4649      	mov	r1, r9
 800c348:	f7f4 fa88 	bl	800085c <__aeabi_ddiv>
 800c34c:	e7d6      	b.n	800c2fc <_strtod_l+0x3fc>
 800c34e:	9b08      	ldr	r3, [sp, #32]
 800c350:	1b75      	subs	r5, r6, r5
 800c352:	441d      	add	r5, r3
 800c354:	2d00      	cmp	r5, #0
 800c356:	dd70      	ble.n	800c43a <_strtod_l+0x53a>
 800c358:	f015 030f 	ands.w	r3, r5, #15
 800c35c:	d00a      	beq.n	800c374 <_strtod_l+0x474>
 800c35e:	494b      	ldr	r1, [pc, #300]	; (800c48c <_strtod_l+0x58c>)
 800c360:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c364:	4642      	mov	r2, r8
 800c366:	464b      	mov	r3, r9
 800c368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c36c:	f7f4 f94c 	bl	8000608 <__aeabi_dmul>
 800c370:	4680      	mov	r8, r0
 800c372:	4689      	mov	r9, r1
 800c374:	f035 050f 	bics.w	r5, r5, #15
 800c378:	d04d      	beq.n	800c416 <_strtod_l+0x516>
 800c37a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c37e:	dd22      	ble.n	800c3c6 <_strtod_l+0x4c6>
 800c380:	2500      	movs	r5, #0
 800c382:	46ab      	mov	fp, r5
 800c384:	9509      	str	r5, [sp, #36]	; 0x24
 800c386:	9505      	str	r5, [sp, #20]
 800c388:	2322      	movs	r3, #34	; 0x22
 800c38a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c494 <_strtod_l+0x594>
 800c38e:	6023      	str	r3, [r4, #0]
 800c390:	f04f 0800 	mov.w	r8, #0
 800c394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c396:	2b00      	cmp	r3, #0
 800c398:	f43f aded 	beq.w	800bf76 <_strtod_l+0x76>
 800c39c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f7ff f91c 	bl	800b5dc <_Bfree>
 800c3a4:	9905      	ldr	r1, [sp, #20]
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f7ff f918 	bl	800b5dc <_Bfree>
 800c3ac:	4659      	mov	r1, fp
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	f7ff f914 	bl	800b5dc <_Bfree>
 800c3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f7ff f910 	bl	800b5dc <_Bfree>
 800c3bc:	4629      	mov	r1, r5
 800c3be:	4620      	mov	r0, r4
 800c3c0:	f7ff f90c 	bl	800b5dc <_Bfree>
 800c3c4:	e5d7      	b.n	800bf76 <_strtod_l+0x76>
 800c3c6:	4b32      	ldr	r3, [pc, #200]	; (800c490 <_strtod_l+0x590>)
 800c3c8:	9304      	str	r3, [sp, #16]
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	112d      	asrs	r5, r5, #4
 800c3ce:	4640      	mov	r0, r8
 800c3d0:	4649      	mov	r1, r9
 800c3d2:	469a      	mov	sl, r3
 800c3d4:	2d01      	cmp	r5, #1
 800c3d6:	dc21      	bgt.n	800c41c <_strtod_l+0x51c>
 800c3d8:	b10b      	cbz	r3, 800c3de <_strtod_l+0x4de>
 800c3da:	4680      	mov	r8, r0
 800c3dc:	4689      	mov	r9, r1
 800c3de:	492c      	ldr	r1, [pc, #176]	; (800c490 <_strtod_l+0x590>)
 800c3e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c3e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c3e8:	4642      	mov	r2, r8
 800c3ea:	464b      	mov	r3, r9
 800c3ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3f0:	f7f4 f90a 	bl	8000608 <__aeabi_dmul>
 800c3f4:	4b27      	ldr	r3, [pc, #156]	; (800c494 <_strtod_l+0x594>)
 800c3f6:	460a      	mov	r2, r1
 800c3f8:	400b      	ands	r3, r1
 800c3fa:	4927      	ldr	r1, [pc, #156]	; (800c498 <_strtod_l+0x598>)
 800c3fc:	428b      	cmp	r3, r1
 800c3fe:	4680      	mov	r8, r0
 800c400:	d8be      	bhi.n	800c380 <_strtod_l+0x480>
 800c402:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c406:	428b      	cmp	r3, r1
 800c408:	bf86      	itte	hi
 800c40a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c49c <_strtod_l+0x59c>
 800c40e:	f04f 38ff 	movhi.w	r8, #4294967295
 800c412:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c416:	2300      	movs	r3, #0
 800c418:	9304      	str	r3, [sp, #16]
 800c41a:	e07b      	b.n	800c514 <_strtod_l+0x614>
 800c41c:	07ea      	lsls	r2, r5, #31
 800c41e:	d505      	bpl.n	800c42c <_strtod_l+0x52c>
 800c420:	9b04      	ldr	r3, [sp, #16]
 800c422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c426:	f7f4 f8ef 	bl	8000608 <__aeabi_dmul>
 800c42a:	2301      	movs	r3, #1
 800c42c:	9a04      	ldr	r2, [sp, #16]
 800c42e:	3208      	adds	r2, #8
 800c430:	f10a 0a01 	add.w	sl, sl, #1
 800c434:	106d      	asrs	r5, r5, #1
 800c436:	9204      	str	r2, [sp, #16]
 800c438:	e7cc      	b.n	800c3d4 <_strtod_l+0x4d4>
 800c43a:	d0ec      	beq.n	800c416 <_strtod_l+0x516>
 800c43c:	426d      	negs	r5, r5
 800c43e:	f015 020f 	ands.w	r2, r5, #15
 800c442:	d00a      	beq.n	800c45a <_strtod_l+0x55a>
 800c444:	4b11      	ldr	r3, [pc, #68]	; (800c48c <_strtod_l+0x58c>)
 800c446:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c44a:	4640      	mov	r0, r8
 800c44c:	4649      	mov	r1, r9
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	f7f4 fa03 	bl	800085c <__aeabi_ddiv>
 800c456:	4680      	mov	r8, r0
 800c458:	4689      	mov	r9, r1
 800c45a:	112d      	asrs	r5, r5, #4
 800c45c:	d0db      	beq.n	800c416 <_strtod_l+0x516>
 800c45e:	2d1f      	cmp	r5, #31
 800c460:	dd1e      	ble.n	800c4a0 <_strtod_l+0x5a0>
 800c462:	2500      	movs	r5, #0
 800c464:	46ab      	mov	fp, r5
 800c466:	9509      	str	r5, [sp, #36]	; 0x24
 800c468:	9505      	str	r5, [sp, #20]
 800c46a:	2322      	movs	r3, #34	; 0x22
 800c46c:	f04f 0800 	mov.w	r8, #0
 800c470:	f04f 0900 	mov.w	r9, #0
 800c474:	6023      	str	r3, [r4, #0]
 800c476:	e78d      	b.n	800c394 <_strtod_l+0x494>
 800c478:	08016cad 	.word	0x08016cad
 800c47c:	08016ed4 	.word	0x08016ed4
 800c480:	08016ca5 	.word	0x08016ca5
 800c484:	08016cdc 	.word	0x08016cdc
 800c488:	08017065 	.word	0x08017065
 800c48c:	08016de8 	.word	0x08016de8
 800c490:	08016dc0 	.word	0x08016dc0
 800c494:	7ff00000 	.word	0x7ff00000
 800c498:	7ca00000 	.word	0x7ca00000
 800c49c:	7fefffff 	.word	0x7fefffff
 800c4a0:	f015 0310 	ands.w	r3, r5, #16
 800c4a4:	bf18      	it	ne
 800c4a6:	236a      	movne	r3, #106	; 0x6a
 800c4a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c84c <_strtod_l+0x94c>
 800c4ac:	9304      	str	r3, [sp, #16]
 800c4ae:	4640      	mov	r0, r8
 800c4b0:	4649      	mov	r1, r9
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	07ea      	lsls	r2, r5, #31
 800c4b6:	d504      	bpl.n	800c4c2 <_strtod_l+0x5c2>
 800c4b8:	e9da 2300 	ldrd	r2, r3, [sl]
 800c4bc:	f7f4 f8a4 	bl	8000608 <__aeabi_dmul>
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	106d      	asrs	r5, r5, #1
 800c4c4:	f10a 0a08 	add.w	sl, sl, #8
 800c4c8:	d1f4      	bne.n	800c4b4 <_strtod_l+0x5b4>
 800c4ca:	b10b      	cbz	r3, 800c4d0 <_strtod_l+0x5d0>
 800c4cc:	4680      	mov	r8, r0
 800c4ce:	4689      	mov	r9, r1
 800c4d0:	9b04      	ldr	r3, [sp, #16]
 800c4d2:	b1bb      	cbz	r3, 800c504 <_strtod_l+0x604>
 800c4d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c4d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	4649      	mov	r1, r9
 800c4e0:	dd10      	ble.n	800c504 <_strtod_l+0x604>
 800c4e2:	2b1f      	cmp	r3, #31
 800c4e4:	f340 811e 	ble.w	800c724 <_strtod_l+0x824>
 800c4e8:	2b34      	cmp	r3, #52	; 0x34
 800c4ea:	bfde      	ittt	le
 800c4ec:	f04f 33ff 	movle.w	r3, #4294967295
 800c4f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c4f4:	4093      	lslle	r3, r2
 800c4f6:	f04f 0800 	mov.w	r8, #0
 800c4fa:	bfcc      	ite	gt
 800c4fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c500:	ea03 0901 	andle.w	r9, r3, r1
 800c504:	2200      	movs	r2, #0
 800c506:	2300      	movs	r3, #0
 800c508:	4640      	mov	r0, r8
 800c50a:	4649      	mov	r1, r9
 800c50c:	f7f4 fae4 	bl	8000ad8 <__aeabi_dcmpeq>
 800c510:	2800      	cmp	r0, #0
 800c512:	d1a6      	bne.n	800c462 <_strtod_l+0x562>
 800c514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c51a:	4633      	mov	r3, r6
 800c51c:	465a      	mov	r2, fp
 800c51e:	4620      	mov	r0, r4
 800c520:	f7ff f8c4 	bl	800b6ac <__s2b>
 800c524:	9009      	str	r0, [sp, #36]	; 0x24
 800c526:	2800      	cmp	r0, #0
 800c528:	f43f af2a 	beq.w	800c380 <_strtod_l+0x480>
 800c52c:	9a08      	ldr	r2, [sp, #32]
 800c52e:	9b05      	ldr	r3, [sp, #20]
 800c530:	2a00      	cmp	r2, #0
 800c532:	eba3 0307 	sub.w	r3, r3, r7
 800c536:	bfa8      	it	ge
 800c538:	2300      	movge	r3, #0
 800c53a:	930c      	str	r3, [sp, #48]	; 0x30
 800c53c:	2500      	movs	r5, #0
 800c53e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c542:	9312      	str	r3, [sp, #72]	; 0x48
 800c544:	46ab      	mov	fp, r5
 800c546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c548:	4620      	mov	r0, r4
 800c54a:	6859      	ldr	r1, [r3, #4]
 800c54c:	f7ff f806 	bl	800b55c <_Balloc>
 800c550:	9005      	str	r0, [sp, #20]
 800c552:	2800      	cmp	r0, #0
 800c554:	f43f af18 	beq.w	800c388 <_strtod_l+0x488>
 800c558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c55a:	691a      	ldr	r2, [r3, #16]
 800c55c:	3202      	adds	r2, #2
 800c55e:	f103 010c 	add.w	r1, r3, #12
 800c562:	0092      	lsls	r2, r2, #2
 800c564:	300c      	adds	r0, #12
 800c566:	f7fe f91c 	bl	800a7a2 <memcpy>
 800c56a:	ec49 8b10 	vmov	d0, r8, r9
 800c56e:	aa18      	add	r2, sp, #96	; 0x60
 800c570:	a917      	add	r1, sp, #92	; 0x5c
 800c572:	4620      	mov	r0, r4
 800c574:	f7ff fbce 	bl	800bd14 <__d2b>
 800c578:	ec49 8b18 	vmov	d8, r8, r9
 800c57c:	9016      	str	r0, [sp, #88]	; 0x58
 800c57e:	2800      	cmp	r0, #0
 800c580:	f43f af02 	beq.w	800c388 <_strtod_l+0x488>
 800c584:	2101      	movs	r1, #1
 800c586:	4620      	mov	r0, r4
 800c588:	f7ff f928 	bl	800b7dc <__i2b>
 800c58c:	4683      	mov	fp, r0
 800c58e:	2800      	cmp	r0, #0
 800c590:	f43f aefa 	beq.w	800c388 <_strtod_l+0x488>
 800c594:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c596:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c598:	2e00      	cmp	r6, #0
 800c59a:	bfab      	itete	ge
 800c59c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c59e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c5a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c5a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c5a6:	bfac      	ite	ge
 800c5a8:	eb06 0a03 	addge.w	sl, r6, r3
 800c5ac:	1b9f      	sublt	r7, r3, r6
 800c5ae:	9b04      	ldr	r3, [sp, #16]
 800c5b0:	1af6      	subs	r6, r6, r3
 800c5b2:	4416      	add	r6, r2
 800c5b4:	4ba0      	ldr	r3, [pc, #640]	; (800c838 <_strtod_l+0x938>)
 800c5b6:	3e01      	subs	r6, #1
 800c5b8:	429e      	cmp	r6, r3
 800c5ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c5be:	f280 80c4 	bge.w	800c74a <_strtod_l+0x84a>
 800c5c2:	1b9b      	subs	r3, r3, r6
 800c5c4:	2b1f      	cmp	r3, #31
 800c5c6:	eba2 0203 	sub.w	r2, r2, r3
 800c5ca:	f04f 0101 	mov.w	r1, #1
 800c5ce:	f300 80b0 	bgt.w	800c732 <_strtod_l+0x832>
 800c5d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c5d6:	930e      	str	r3, [sp, #56]	; 0x38
 800c5d8:	2300      	movs	r3, #0
 800c5da:	930d      	str	r3, [sp, #52]	; 0x34
 800c5dc:	eb0a 0602 	add.w	r6, sl, r2
 800c5e0:	9b04      	ldr	r3, [sp, #16]
 800c5e2:	45b2      	cmp	sl, r6
 800c5e4:	4417      	add	r7, r2
 800c5e6:	441f      	add	r7, r3
 800c5e8:	4653      	mov	r3, sl
 800c5ea:	bfa8      	it	ge
 800c5ec:	4633      	movge	r3, r6
 800c5ee:	42bb      	cmp	r3, r7
 800c5f0:	bfa8      	it	ge
 800c5f2:	463b      	movge	r3, r7
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	bfc2      	ittt	gt
 800c5f8:	1af6      	subgt	r6, r6, r3
 800c5fa:	1aff      	subgt	r7, r7, r3
 800c5fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c602:	2b00      	cmp	r3, #0
 800c604:	dd17      	ble.n	800c636 <_strtod_l+0x736>
 800c606:	4659      	mov	r1, fp
 800c608:	461a      	mov	r2, r3
 800c60a:	4620      	mov	r0, r4
 800c60c:	f7ff f9a6 	bl	800b95c <__pow5mult>
 800c610:	4683      	mov	fp, r0
 800c612:	2800      	cmp	r0, #0
 800c614:	f43f aeb8 	beq.w	800c388 <_strtod_l+0x488>
 800c618:	4601      	mov	r1, r0
 800c61a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c61c:	4620      	mov	r0, r4
 800c61e:	f7ff f8f3 	bl	800b808 <__multiply>
 800c622:	900b      	str	r0, [sp, #44]	; 0x2c
 800c624:	2800      	cmp	r0, #0
 800c626:	f43f aeaf 	beq.w	800c388 <_strtod_l+0x488>
 800c62a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c62c:	4620      	mov	r0, r4
 800c62e:	f7fe ffd5 	bl	800b5dc <_Bfree>
 800c632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c634:	9316      	str	r3, [sp, #88]	; 0x58
 800c636:	2e00      	cmp	r6, #0
 800c638:	f300 808c 	bgt.w	800c754 <_strtod_l+0x854>
 800c63c:	9b08      	ldr	r3, [sp, #32]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dd08      	ble.n	800c654 <_strtod_l+0x754>
 800c642:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c644:	9905      	ldr	r1, [sp, #20]
 800c646:	4620      	mov	r0, r4
 800c648:	f7ff f988 	bl	800b95c <__pow5mult>
 800c64c:	9005      	str	r0, [sp, #20]
 800c64e:	2800      	cmp	r0, #0
 800c650:	f43f ae9a 	beq.w	800c388 <_strtod_l+0x488>
 800c654:	2f00      	cmp	r7, #0
 800c656:	dd08      	ble.n	800c66a <_strtod_l+0x76a>
 800c658:	9905      	ldr	r1, [sp, #20]
 800c65a:	463a      	mov	r2, r7
 800c65c:	4620      	mov	r0, r4
 800c65e:	f7ff f9d7 	bl	800ba10 <__lshift>
 800c662:	9005      	str	r0, [sp, #20]
 800c664:	2800      	cmp	r0, #0
 800c666:	f43f ae8f 	beq.w	800c388 <_strtod_l+0x488>
 800c66a:	f1ba 0f00 	cmp.w	sl, #0
 800c66e:	dd08      	ble.n	800c682 <_strtod_l+0x782>
 800c670:	4659      	mov	r1, fp
 800c672:	4652      	mov	r2, sl
 800c674:	4620      	mov	r0, r4
 800c676:	f7ff f9cb 	bl	800ba10 <__lshift>
 800c67a:	4683      	mov	fp, r0
 800c67c:	2800      	cmp	r0, #0
 800c67e:	f43f ae83 	beq.w	800c388 <_strtod_l+0x488>
 800c682:	9a05      	ldr	r2, [sp, #20]
 800c684:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c686:	4620      	mov	r0, r4
 800c688:	f7ff fa4a 	bl	800bb20 <__mdiff>
 800c68c:	4605      	mov	r5, r0
 800c68e:	2800      	cmp	r0, #0
 800c690:	f43f ae7a 	beq.w	800c388 <_strtod_l+0x488>
 800c694:	68c3      	ldr	r3, [r0, #12]
 800c696:	930b      	str	r3, [sp, #44]	; 0x2c
 800c698:	2300      	movs	r3, #0
 800c69a:	60c3      	str	r3, [r0, #12]
 800c69c:	4659      	mov	r1, fp
 800c69e:	f7ff fa23 	bl	800bae8 <__mcmp>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	da60      	bge.n	800c768 <_strtod_l+0x868>
 800c6a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6a8:	ea53 0308 	orrs.w	r3, r3, r8
 800c6ac:	f040 8084 	bne.w	800c7b8 <_strtod_l+0x8b8>
 800c6b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d17f      	bne.n	800c7b8 <_strtod_l+0x8b8>
 800c6b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c6bc:	0d1b      	lsrs	r3, r3, #20
 800c6be:	051b      	lsls	r3, r3, #20
 800c6c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c6c4:	d978      	bls.n	800c7b8 <_strtod_l+0x8b8>
 800c6c6:	696b      	ldr	r3, [r5, #20]
 800c6c8:	b913      	cbnz	r3, 800c6d0 <_strtod_l+0x7d0>
 800c6ca:	692b      	ldr	r3, [r5, #16]
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	dd73      	ble.n	800c7b8 <_strtod_l+0x8b8>
 800c6d0:	4629      	mov	r1, r5
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f7ff f99b 	bl	800ba10 <__lshift>
 800c6da:	4659      	mov	r1, fp
 800c6dc:	4605      	mov	r5, r0
 800c6de:	f7ff fa03 	bl	800bae8 <__mcmp>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	dd68      	ble.n	800c7b8 <_strtod_l+0x8b8>
 800c6e6:	9904      	ldr	r1, [sp, #16]
 800c6e8:	4a54      	ldr	r2, [pc, #336]	; (800c83c <_strtod_l+0x93c>)
 800c6ea:	464b      	mov	r3, r9
 800c6ec:	2900      	cmp	r1, #0
 800c6ee:	f000 8084 	beq.w	800c7fa <_strtod_l+0x8fa>
 800c6f2:	ea02 0109 	and.w	r1, r2, r9
 800c6f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c6fa:	dc7e      	bgt.n	800c7fa <_strtod_l+0x8fa>
 800c6fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c700:	f77f aeb3 	ble.w	800c46a <_strtod_l+0x56a>
 800c704:	4b4e      	ldr	r3, [pc, #312]	; (800c840 <_strtod_l+0x940>)
 800c706:	4640      	mov	r0, r8
 800c708:	4649      	mov	r1, r9
 800c70a:	2200      	movs	r2, #0
 800c70c:	f7f3 ff7c 	bl	8000608 <__aeabi_dmul>
 800c710:	4b4a      	ldr	r3, [pc, #296]	; (800c83c <_strtod_l+0x93c>)
 800c712:	400b      	ands	r3, r1
 800c714:	4680      	mov	r8, r0
 800c716:	4689      	mov	r9, r1
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f47f ae3f 	bne.w	800c39c <_strtod_l+0x49c>
 800c71e:	2322      	movs	r3, #34	; 0x22
 800c720:	6023      	str	r3, [r4, #0]
 800c722:	e63b      	b.n	800c39c <_strtod_l+0x49c>
 800c724:	f04f 32ff 	mov.w	r2, #4294967295
 800c728:	fa02 f303 	lsl.w	r3, r2, r3
 800c72c:	ea03 0808 	and.w	r8, r3, r8
 800c730:	e6e8      	b.n	800c504 <_strtod_l+0x604>
 800c732:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c736:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c73a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c73e:	36e2      	adds	r6, #226	; 0xe2
 800c740:	fa01 f306 	lsl.w	r3, r1, r6
 800c744:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c748:	e748      	b.n	800c5dc <_strtod_l+0x6dc>
 800c74a:	2100      	movs	r1, #0
 800c74c:	2301      	movs	r3, #1
 800c74e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c752:	e743      	b.n	800c5dc <_strtod_l+0x6dc>
 800c754:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c756:	4632      	mov	r2, r6
 800c758:	4620      	mov	r0, r4
 800c75a:	f7ff f959 	bl	800ba10 <__lshift>
 800c75e:	9016      	str	r0, [sp, #88]	; 0x58
 800c760:	2800      	cmp	r0, #0
 800c762:	f47f af6b 	bne.w	800c63c <_strtod_l+0x73c>
 800c766:	e60f      	b.n	800c388 <_strtod_l+0x488>
 800c768:	46ca      	mov	sl, r9
 800c76a:	d171      	bne.n	800c850 <_strtod_l+0x950>
 800c76c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c76e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c772:	b352      	cbz	r2, 800c7ca <_strtod_l+0x8ca>
 800c774:	4a33      	ldr	r2, [pc, #204]	; (800c844 <_strtod_l+0x944>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d12a      	bne.n	800c7d0 <_strtod_l+0x8d0>
 800c77a:	9b04      	ldr	r3, [sp, #16]
 800c77c:	4641      	mov	r1, r8
 800c77e:	b1fb      	cbz	r3, 800c7c0 <_strtod_l+0x8c0>
 800c780:	4b2e      	ldr	r3, [pc, #184]	; (800c83c <_strtod_l+0x93c>)
 800c782:	ea09 0303 	and.w	r3, r9, r3
 800c786:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c78a:	f04f 32ff 	mov.w	r2, #4294967295
 800c78e:	d81a      	bhi.n	800c7c6 <_strtod_l+0x8c6>
 800c790:	0d1b      	lsrs	r3, r3, #20
 800c792:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c796:	fa02 f303 	lsl.w	r3, r2, r3
 800c79a:	4299      	cmp	r1, r3
 800c79c:	d118      	bne.n	800c7d0 <_strtod_l+0x8d0>
 800c79e:	4b2a      	ldr	r3, [pc, #168]	; (800c848 <_strtod_l+0x948>)
 800c7a0:	459a      	cmp	sl, r3
 800c7a2:	d102      	bne.n	800c7aa <_strtod_l+0x8aa>
 800c7a4:	3101      	adds	r1, #1
 800c7a6:	f43f adef 	beq.w	800c388 <_strtod_l+0x488>
 800c7aa:	4b24      	ldr	r3, [pc, #144]	; (800c83c <_strtod_l+0x93c>)
 800c7ac:	ea0a 0303 	and.w	r3, sl, r3
 800c7b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c7b4:	f04f 0800 	mov.w	r8, #0
 800c7b8:	9b04      	ldr	r3, [sp, #16]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1a2      	bne.n	800c704 <_strtod_l+0x804>
 800c7be:	e5ed      	b.n	800c39c <_strtod_l+0x49c>
 800c7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7c4:	e7e9      	b.n	800c79a <_strtod_l+0x89a>
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	e7e7      	b.n	800c79a <_strtod_l+0x89a>
 800c7ca:	ea53 0308 	orrs.w	r3, r3, r8
 800c7ce:	d08a      	beq.n	800c6e6 <_strtod_l+0x7e6>
 800c7d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7d2:	b1e3      	cbz	r3, 800c80e <_strtod_l+0x90e>
 800c7d4:	ea13 0f0a 	tst.w	r3, sl
 800c7d8:	d0ee      	beq.n	800c7b8 <_strtod_l+0x8b8>
 800c7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7dc:	9a04      	ldr	r2, [sp, #16]
 800c7de:	4640      	mov	r0, r8
 800c7e0:	4649      	mov	r1, r9
 800c7e2:	b1c3      	cbz	r3, 800c816 <_strtod_l+0x916>
 800c7e4:	f7ff fb6f 	bl	800bec6 <sulp>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	ec51 0b18 	vmov	r0, r1, d8
 800c7f0:	f7f3 fd54 	bl	800029c <__adddf3>
 800c7f4:	4680      	mov	r8, r0
 800c7f6:	4689      	mov	r9, r1
 800c7f8:	e7de      	b.n	800c7b8 <_strtod_l+0x8b8>
 800c7fa:	4013      	ands	r3, r2
 800c7fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c800:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c804:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c808:	f04f 38ff 	mov.w	r8, #4294967295
 800c80c:	e7d4      	b.n	800c7b8 <_strtod_l+0x8b8>
 800c80e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c810:	ea13 0f08 	tst.w	r3, r8
 800c814:	e7e0      	b.n	800c7d8 <_strtod_l+0x8d8>
 800c816:	f7ff fb56 	bl	800bec6 <sulp>
 800c81a:	4602      	mov	r2, r0
 800c81c:	460b      	mov	r3, r1
 800c81e:	ec51 0b18 	vmov	r0, r1, d8
 800c822:	f7f3 fd39 	bl	8000298 <__aeabi_dsub>
 800c826:	2200      	movs	r2, #0
 800c828:	2300      	movs	r3, #0
 800c82a:	4680      	mov	r8, r0
 800c82c:	4689      	mov	r9, r1
 800c82e:	f7f4 f953 	bl	8000ad8 <__aeabi_dcmpeq>
 800c832:	2800      	cmp	r0, #0
 800c834:	d0c0      	beq.n	800c7b8 <_strtod_l+0x8b8>
 800c836:	e618      	b.n	800c46a <_strtod_l+0x56a>
 800c838:	fffffc02 	.word	0xfffffc02
 800c83c:	7ff00000 	.word	0x7ff00000
 800c840:	39500000 	.word	0x39500000
 800c844:	000fffff 	.word	0x000fffff
 800c848:	7fefffff 	.word	0x7fefffff
 800c84c:	08016ee8 	.word	0x08016ee8
 800c850:	4659      	mov	r1, fp
 800c852:	4628      	mov	r0, r5
 800c854:	f7ff fab8 	bl	800bdc8 <__ratio>
 800c858:	ec57 6b10 	vmov	r6, r7, d0
 800c85c:	ee10 0a10 	vmov	r0, s0
 800c860:	2200      	movs	r2, #0
 800c862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c866:	4639      	mov	r1, r7
 800c868:	f7f4 f94a 	bl	8000b00 <__aeabi_dcmple>
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d071      	beq.n	800c954 <_strtod_l+0xa54>
 800c870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c872:	2b00      	cmp	r3, #0
 800c874:	d17c      	bne.n	800c970 <_strtod_l+0xa70>
 800c876:	f1b8 0f00 	cmp.w	r8, #0
 800c87a:	d15a      	bne.n	800c932 <_strtod_l+0xa32>
 800c87c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c880:	2b00      	cmp	r3, #0
 800c882:	d15d      	bne.n	800c940 <_strtod_l+0xa40>
 800c884:	4b90      	ldr	r3, [pc, #576]	; (800cac8 <_strtod_l+0xbc8>)
 800c886:	2200      	movs	r2, #0
 800c888:	4630      	mov	r0, r6
 800c88a:	4639      	mov	r1, r7
 800c88c:	f7f4 f92e 	bl	8000aec <__aeabi_dcmplt>
 800c890:	2800      	cmp	r0, #0
 800c892:	d15c      	bne.n	800c94e <_strtod_l+0xa4e>
 800c894:	4630      	mov	r0, r6
 800c896:	4639      	mov	r1, r7
 800c898:	4b8c      	ldr	r3, [pc, #560]	; (800cacc <_strtod_l+0xbcc>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	f7f3 feb4 	bl	8000608 <__aeabi_dmul>
 800c8a0:	4606      	mov	r6, r0
 800c8a2:	460f      	mov	r7, r1
 800c8a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c8a8:	9606      	str	r6, [sp, #24]
 800c8aa:	9307      	str	r3, [sp, #28]
 800c8ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c8b4:	4b86      	ldr	r3, [pc, #536]	; (800cad0 <_strtod_l+0xbd0>)
 800c8b6:	ea0a 0303 	and.w	r3, sl, r3
 800c8ba:	930d      	str	r3, [sp, #52]	; 0x34
 800c8bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8be:	4b85      	ldr	r3, [pc, #532]	; (800cad4 <_strtod_l+0xbd4>)
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	f040 8090 	bne.w	800c9e6 <_strtod_l+0xae6>
 800c8c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c8ca:	ec49 8b10 	vmov	d0, r8, r9
 800c8ce:	f7ff f9b1 	bl	800bc34 <__ulp>
 800c8d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8d6:	ec51 0b10 	vmov	r0, r1, d0
 800c8da:	f7f3 fe95 	bl	8000608 <__aeabi_dmul>
 800c8de:	4642      	mov	r2, r8
 800c8e0:	464b      	mov	r3, r9
 800c8e2:	f7f3 fcdb 	bl	800029c <__adddf3>
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	4979      	ldr	r1, [pc, #484]	; (800cad0 <_strtod_l+0xbd0>)
 800c8ea:	4a7b      	ldr	r2, [pc, #492]	; (800cad8 <_strtod_l+0xbd8>)
 800c8ec:	4019      	ands	r1, r3
 800c8ee:	4291      	cmp	r1, r2
 800c8f0:	4680      	mov	r8, r0
 800c8f2:	d944      	bls.n	800c97e <_strtod_l+0xa7e>
 800c8f4:	ee18 2a90 	vmov	r2, s17
 800c8f8:	4b78      	ldr	r3, [pc, #480]	; (800cadc <_strtod_l+0xbdc>)
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d104      	bne.n	800c908 <_strtod_l+0xa08>
 800c8fe:	ee18 3a10 	vmov	r3, s16
 800c902:	3301      	adds	r3, #1
 800c904:	f43f ad40 	beq.w	800c388 <_strtod_l+0x488>
 800c908:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800cadc <_strtod_l+0xbdc>
 800c90c:	f04f 38ff 	mov.w	r8, #4294967295
 800c910:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c912:	4620      	mov	r0, r4
 800c914:	f7fe fe62 	bl	800b5dc <_Bfree>
 800c918:	9905      	ldr	r1, [sp, #20]
 800c91a:	4620      	mov	r0, r4
 800c91c:	f7fe fe5e 	bl	800b5dc <_Bfree>
 800c920:	4659      	mov	r1, fp
 800c922:	4620      	mov	r0, r4
 800c924:	f7fe fe5a 	bl	800b5dc <_Bfree>
 800c928:	4629      	mov	r1, r5
 800c92a:	4620      	mov	r0, r4
 800c92c:	f7fe fe56 	bl	800b5dc <_Bfree>
 800c930:	e609      	b.n	800c546 <_strtod_l+0x646>
 800c932:	f1b8 0f01 	cmp.w	r8, #1
 800c936:	d103      	bne.n	800c940 <_strtod_l+0xa40>
 800c938:	f1b9 0f00 	cmp.w	r9, #0
 800c93c:	f43f ad95 	beq.w	800c46a <_strtod_l+0x56a>
 800c940:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ca98 <_strtod_l+0xb98>
 800c944:	4f60      	ldr	r7, [pc, #384]	; (800cac8 <_strtod_l+0xbc8>)
 800c946:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c94a:	2600      	movs	r6, #0
 800c94c:	e7ae      	b.n	800c8ac <_strtod_l+0x9ac>
 800c94e:	4f5f      	ldr	r7, [pc, #380]	; (800cacc <_strtod_l+0xbcc>)
 800c950:	2600      	movs	r6, #0
 800c952:	e7a7      	b.n	800c8a4 <_strtod_l+0x9a4>
 800c954:	4b5d      	ldr	r3, [pc, #372]	; (800cacc <_strtod_l+0xbcc>)
 800c956:	4630      	mov	r0, r6
 800c958:	4639      	mov	r1, r7
 800c95a:	2200      	movs	r2, #0
 800c95c:	f7f3 fe54 	bl	8000608 <__aeabi_dmul>
 800c960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c962:	4606      	mov	r6, r0
 800c964:	460f      	mov	r7, r1
 800c966:	2b00      	cmp	r3, #0
 800c968:	d09c      	beq.n	800c8a4 <_strtod_l+0x9a4>
 800c96a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c96e:	e79d      	b.n	800c8ac <_strtod_l+0x9ac>
 800c970:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800caa0 <_strtod_l+0xba0>
 800c974:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c978:	ec57 6b17 	vmov	r6, r7, d7
 800c97c:	e796      	b.n	800c8ac <_strtod_l+0x9ac>
 800c97e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c982:	9b04      	ldr	r3, [sp, #16]
 800c984:	46ca      	mov	sl, r9
 800c986:	2b00      	cmp	r3, #0
 800c988:	d1c2      	bne.n	800c910 <_strtod_l+0xa10>
 800c98a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c98e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c990:	0d1b      	lsrs	r3, r3, #20
 800c992:	051b      	lsls	r3, r3, #20
 800c994:	429a      	cmp	r2, r3
 800c996:	d1bb      	bne.n	800c910 <_strtod_l+0xa10>
 800c998:	4630      	mov	r0, r6
 800c99a:	4639      	mov	r1, r7
 800c99c:	f7f4 f994 	bl	8000cc8 <__aeabi_d2lz>
 800c9a0:	f7f3 fe04 	bl	80005ac <__aeabi_l2d>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	4639      	mov	r1, r7
 800c9ac:	f7f3 fc74 	bl	8000298 <__aeabi_dsub>
 800c9b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9b6:	ea43 0308 	orr.w	r3, r3, r8
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	4606      	mov	r6, r0
 800c9be:	460f      	mov	r7, r1
 800c9c0:	d054      	beq.n	800ca6c <_strtod_l+0xb6c>
 800c9c2:	a339      	add	r3, pc, #228	; (adr r3, 800caa8 <_strtod_l+0xba8>)
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	f7f4 f890 	bl	8000aec <__aeabi_dcmplt>
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	f47f ace5 	bne.w	800c39c <_strtod_l+0x49c>
 800c9d2:	a337      	add	r3, pc, #220	; (adr r3, 800cab0 <_strtod_l+0xbb0>)
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	4630      	mov	r0, r6
 800c9da:	4639      	mov	r1, r7
 800c9dc:	f7f4 f8a4 	bl	8000b28 <__aeabi_dcmpgt>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d095      	beq.n	800c910 <_strtod_l+0xa10>
 800c9e4:	e4da      	b.n	800c39c <_strtod_l+0x49c>
 800c9e6:	9b04      	ldr	r3, [sp, #16]
 800c9e8:	b333      	cbz	r3, 800ca38 <_strtod_l+0xb38>
 800c9ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c9f0:	d822      	bhi.n	800ca38 <_strtod_l+0xb38>
 800c9f2:	a331      	add	r3, pc, #196	; (adr r3, 800cab8 <_strtod_l+0xbb8>)
 800c9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	4639      	mov	r1, r7
 800c9fc:	f7f4 f880 	bl	8000b00 <__aeabi_dcmple>
 800ca00:	b1a0      	cbz	r0, 800ca2c <_strtod_l+0xb2c>
 800ca02:	4639      	mov	r1, r7
 800ca04:	4630      	mov	r0, r6
 800ca06:	f7f4 f8d7 	bl	8000bb8 <__aeabi_d2uiz>
 800ca0a:	2801      	cmp	r0, #1
 800ca0c:	bf38      	it	cc
 800ca0e:	2001      	movcc	r0, #1
 800ca10:	f7f3 fd80 	bl	8000514 <__aeabi_ui2d>
 800ca14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca16:	4606      	mov	r6, r0
 800ca18:	460f      	mov	r7, r1
 800ca1a:	bb23      	cbnz	r3, 800ca66 <_strtod_l+0xb66>
 800ca1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca20:	9010      	str	r0, [sp, #64]	; 0x40
 800ca22:	9311      	str	r3, [sp, #68]	; 0x44
 800ca24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ca2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca30:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ca34:	1a9b      	subs	r3, r3, r2
 800ca36:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ca3c:	eeb0 0a48 	vmov.f32	s0, s16
 800ca40:	eef0 0a68 	vmov.f32	s1, s17
 800ca44:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ca48:	f7ff f8f4 	bl	800bc34 <__ulp>
 800ca4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ca50:	ec53 2b10 	vmov	r2, r3, d0
 800ca54:	f7f3 fdd8 	bl	8000608 <__aeabi_dmul>
 800ca58:	ec53 2b18 	vmov	r2, r3, d8
 800ca5c:	f7f3 fc1e 	bl	800029c <__adddf3>
 800ca60:	4680      	mov	r8, r0
 800ca62:	4689      	mov	r9, r1
 800ca64:	e78d      	b.n	800c982 <_strtod_l+0xa82>
 800ca66:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ca6a:	e7db      	b.n	800ca24 <_strtod_l+0xb24>
 800ca6c:	a314      	add	r3, pc, #80	; (adr r3, 800cac0 <_strtod_l+0xbc0>)
 800ca6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca72:	f7f4 f83b 	bl	8000aec <__aeabi_dcmplt>
 800ca76:	e7b3      	b.n	800c9e0 <_strtod_l+0xae0>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	930a      	str	r3, [sp, #40]	; 0x28
 800ca7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ca7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca80:	6013      	str	r3, [r2, #0]
 800ca82:	f7ff ba7c 	b.w	800bf7e <_strtod_l+0x7e>
 800ca86:	2a65      	cmp	r2, #101	; 0x65
 800ca88:	f43f ab75 	beq.w	800c176 <_strtod_l+0x276>
 800ca8c:	2a45      	cmp	r2, #69	; 0x45
 800ca8e:	f43f ab72 	beq.w	800c176 <_strtod_l+0x276>
 800ca92:	2301      	movs	r3, #1
 800ca94:	f7ff bbaa 	b.w	800c1ec <_strtod_l+0x2ec>
 800ca98:	00000000 	.word	0x00000000
 800ca9c:	bff00000 	.word	0xbff00000
 800caa0:	00000000 	.word	0x00000000
 800caa4:	3ff00000 	.word	0x3ff00000
 800caa8:	94a03595 	.word	0x94a03595
 800caac:	3fdfffff 	.word	0x3fdfffff
 800cab0:	35afe535 	.word	0x35afe535
 800cab4:	3fe00000 	.word	0x3fe00000
 800cab8:	ffc00000 	.word	0xffc00000
 800cabc:	41dfffff 	.word	0x41dfffff
 800cac0:	94a03595 	.word	0x94a03595
 800cac4:	3fcfffff 	.word	0x3fcfffff
 800cac8:	3ff00000 	.word	0x3ff00000
 800cacc:	3fe00000 	.word	0x3fe00000
 800cad0:	7ff00000 	.word	0x7ff00000
 800cad4:	7fe00000 	.word	0x7fe00000
 800cad8:	7c9fffff 	.word	0x7c9fffff
 800cadc:	7fefffff 	.word	0x7fefffff

0800cae0 <_strtod_r>:
 800cae0:	4b01      	ldr	r3, [pc, #4]	; (800cae8 <_strtod_r+0x8>)
 800cae2:	f7ff ba0d 	b.w	800bf00 <_strtod_l>
 800cae6:	bf00      	nop
 800cae8:	20000c2c 	.word	0x20000c2c

0800caec <_strtol_l.constprop.0>:
 800caec:	2b01      	cmp	r3, #1
 800caee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf2:	d001      	beq.n	800caf8 <_strtol_l.constprop.0+0xc>
 800caf4:	2b24      	cmp	r3, #36	; 0x24
 800caf6:	d906      	bls.n	800cb06 <_strtol_l.constprop.0+0x1a>
 800caf8:	f7fd fe26 	bl	800a748 <__errno>
 800cafc:	2316      	movs	r3, #22
 800cafe:	6003      	str	r3, [r0, #0]
 800cb00:	2000      	movs	r0, #0
 800cb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb06:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cbec <_strtol_l.constprop.0+0x100>
 800cb0a:	460d      	mov	r5, r1
 800cb0c:	462e      	mov	r6, r5
 800cb0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb12:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cb16:	f017 0708 	ands.w	r7, r7, #8
 800cb1a:	d1f7      	bne.n	800cb0c <_strtol_l.constprop.0+0x20>
 800cb1c:	2c2d      	cmp	r4, #45	; 0x2d
 800cb1e:	d132      	bne.n	800cb86 <_strtol_l.constprop.0+0x9a>
 800cb20:	782c      	ldrb	r4, [r5, #0]
 800cb22:	2701      	movs	r7, #1
 800cb24:	1cb5      	adds	r5, r6, #2
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d05b      	beq.n	800cbe2 <_strtol_l.constprop.0+0xf6>
 800cb2a:	2b10      	cmp	r3, #16
 800cb2c:	d109      	bne.n	800cb42 <_strtol_l.constprop.0+0x56>
 800cb2e:	2c30      	cmp	r4, #48	; 0x30
 800cb30:	d107      	bne.n	800cb42 <_strtol_l.constprop.0+0x56>
 800cb32:	782c      	ldrb	r4, [r5, #0]
 800cb34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cb38:	2c58      	cmp	r4, #88	; 0x58
 800cb3a:	d14d      	bne.n	800cbd8 <_strtol_l.constprop.0+0xec>
 800cb3c:	786c      	ldrb	r4, [r5, #1]
 800cb3e:	2310      	movs	r3, #16
 800cb40:	3502      	adds	r5, #2
 800cb42:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cb46:	f108 38ff 	add.w	r8, r8, #4294967295
 800cb4a:	f04f 0e00 	mov.w	lr, #0
 800cb4e:	fbb8 f9f3 	udiv	r9, r8, r3
 800cb52:	4676      	mov	r6, lr
 800cb54:	fb03 8a19 	mls	sl, r3, r9, r8
 800cb58:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cb5c:	f1bc 0f09 	cmp.w	ip, #9
 800cb60:	d816      	bhi.n	800cb90 <_strtol_l.constprop.0+0xa4>
 800cb62:	4664      	mov	r4, ip
 800cb64:	42a3      	cmp	r3, r4
 800cb66:	dd24      	ble.n	800cbb2 <_strtol_l.constprop.0+0xc6>
 800cb68:	f1be 3fff 	cmp.w	lr, #4294967295
 800cb6c:	d008      	beq.n	800cb80 <_strtol_l.constprop.0+0x94>
 800cb6e:	45b1      	cmp	r9, r6
 800cb70:	d31c      	bcc.n	800cbac <_strtol_l.constprop.0+0xc0>
 800cb72:	d101      	bne.n	800cb78 <_strtol_l.constprop.0+0x8c>
 800cb74:	45a2      	cmp	sl, r4
 800cb76:	db19      	blt.n	800cbac <_strtol_l.constprop.0+0xc0>
 800cb78:	fb06 4603 	mla	r6, r6, r3, r4
 800cb7c:	f04f 0e01 	mov.w	lr, #1
 800cb80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb84:	e7e8      	b.n	800cb58 <_strtol_l.constprop.0+0x6c>
 800cb86:	2c2b      	cmp	r4, #43	; 0x2b
 800cb88:	bf04      	itt	eq
 800cb8a:	782c      	ldrbeq	r4, [r5, #0]
 800cb8c:	1cb5      	addeq	r5, r6, #2
 800cb8e:	e7ca      	b.n	800cb26 <_strtol_l.constprop.0+0x3a>
 800cb90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cb94:	f1bc 0f19 	cmp.w	ip, #25
 800cb98:	d801      	bhi.n	800cb9e <_strtol_l.constprop.0+0xb2>
 800cb9a:	3c37      	subs	r4, #55	; 0x37
 800cb9c:	e7e2      	b.n	800cb64 <_strtol_l.constprop.0+0x78>
 800cb9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cba2:	f1bc 0f19 	cmp.w	ip, #25
 800cba6:	d804      	bhi.n	800cbb2 <_strtol_l.constprop.0+0xc6>
 800cba8:	3c57      	subs	r4, #87	; 0x57
 800cbaa:	e7db      	b.n	800cb64 <_strtol_l.constprop.0+0x78>
 800cbac:	f04f 3eff 	mov.w	lr, #4294967295
 800cbb0:	e7e6      	b.n	800cb80 <_strtol_l.constprop.0+0x94>
 800cbb2:	f1be 3fff 	cmp.w	lr, #4294967295
 800cbb6:	d105      	bne.n	800cbc4 <_strtol_l.constprop.0+0xd8>
 800cbb8:	2322      	movs	r3, #34	; 0x22
 800cbba:	6003      	str	r3, [r0, #0]
 800cbbc:	4646      	mov	r6, r8
 800cbbe:	b942      	cbnz	r2, 800cbd2 <_strtol_l.constprop.0+0xe6>
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	e79e      	b.n	800cb02 <_strtol_l.constprop.0+0x16>
 800cbc4:	b107      	cbz	r7, 800cbc8 <_strtol_l.constprop.0+0xdc>
 800cbc6:	4276      	negs	r6, r6
 800cbc8:	2a00      	cmp	r2, #0
 800cbca:	d0f9      	beq.n	800cbc0 <_strtol_l.constprop.0+0xd4>
 800cbcc:	f1be 0f00 	cmp.w	lr, #0
 800cbd0:	d000      	beq.n	800cbd4 <_strtol_l.constprop.0+0xe8>
 800cbd2:	1e69      	subs	r1, r5, #1
 800cbd4:	6011      	str	r1, [r2, #0]
 800cbd6:	e7f3      	b.n	800cbc0 <_strtol_l.constprop.0+0xd4>
 800cbd8:	2430      	movs	r4, #48	; 0x30
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d1b1      	bne.n	800cb42 <_strtol_l.constprop.0+0x56>
 800cbde:	2308      	movs	r3, #8
 800cbe0:	e7af      	b.n	800cb42 <_strtol_l.constprop.0+0x56>
 800cbe2:	2c30      	cmp	r4, #48	; 0x30
 800cbe4:	d0a5      	beq.n	800cb32 <_strtol_l.constprop.0+0x46>
 800cbe6:	230a      	movs	r3, #10
 800cbe8:	e7ab      	b.n	800cb42 <_strtol_l.constprop.0+0x56>
 800cbea:	bf00      	nop
 800cbec:	08016f11 	.word	0x08016f11

0800cbf0 <_strtol_r>:
 800cbf0:	f7ff bf7c 	b.w	800caec <_strtol_l.constprop.0>

0800cbf4 <__ssputs_r>:
 800cbf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf8:	688e      	ldr	r6, [r1, #8]
 800cbfa:	461f      	mov	r7, r3
 800cbfc:	42be      	cmp	r6, r7
 800cbfe:	680b      	ldr	r3, [r1, #0]
 800cc00:	4682      	mov	sl, r0
 800cc02:	460c      	mov	r4, r1
 800cc04:	4690      	mov	r8, r2
 800cc06:	d82c      	bhi.n	800cc62 <__ssputs_r+0x6e>
 800cc08:	898a      	ldrh	r2, [r1, #12]
 800cc0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc0e:	d026      	beq.n	800cc5e <__ssputs_r+0x6a>
 800cc10:	6965      	ldr	r5, [r4, #20]
 800cc12:	6909      	ldr	r1, [r1, #16]
 800cc14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc18:	eba3 0901 	sub.w	r9, r3, r1
 800cc1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc20:	1c7b      	adds	r3, r7, #1
 800cc22:	444b      	add	r3, r9
 800cc24:	106d      	asrs	r5, r5, #1
 800cc26:	429d      	cmp	r5, r3
 800cc28:	bf38      	it	cc
 800cc2a:	461d      	movcc	r5, r3
 800cc2c:	0553      	lsls	r3, r2, #21
 800cc2e:	d527      	bpl.n	800cc80 <__ssputs_r+0x8c>
 800cc30:	4629      	mov	r1, r5
 800cc32:	f7fc fcb5 	bl	80095a0 <_malloc_r>
 800cc36:	4606      	mov	r6, r0
 800cc38:	b360      	cbz	r0, 800cc94 <__ssputs_r+0xa0>
 800cc3a:	6921      	ldr	r1, [r4, #16]
 800cc3c:	464a      	mov	r2, r9
 800cc3e:	f7fd fdb0 	bl	800a7a2 <memcpy>
 800cc42:	89a3      	ldrh	r3, [r4, #12]
 800cc44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc4c:	81a3      	strh	r3, [r4, #12]
 800cc4e:	6126      	str	r6, [r4, #16]
 800cc50:	6165      	str	r5, [r4, #20]
 800cc52:	444e      	add	r6, r9
 800cc54:	eba5 0509 	sub.w	r5, r5, r9
 800cc58:	6026      	str	r6, [r4, #0]
 800cc5a:	60a5      	str	r5, [r4, #8]
 800cc5c:	463e      	mov	r6, r7
 800cc5e:	42be      	cmp	r6, r7
 800cc60:	d900      	bls.n	800cc64 <__ssputs_r+0x70>
 800cc62:	463e      	mov	r6, r7
 800cc64:	6820      	ldr	r0, [r4, #0]
 800cc66:	4632      	mov	r2, r6
 800cc68:	4641      	mov	r1, r8
 800cc6a:	f7fd fcf0 	bl	800a64e <memmove>
 800cc6e:	68a3      	ldr	r3, [r4, #8]
 800cc70:	1b9b      	subs	r3, r3, r6
 800cc72:	60a3      	str	r3, [r4, #8]
 800cc74:	6823      	ldr	r3, [r4, #0]
 800cc76:	4433      	add	r3, r6
 800cc78:	6023      	str	r3, [r4, #0]
 800cc7a:	2000      	movs	r0, #0
 800cc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc80:	462a      	mov	r2, r5
 800cc82:	f7fc fd19 	bl	80096b8 <_realloc_r>
 800cc86:	4606      	mov	r6, r0
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d1e0      	bne.n	800cc4e <__ssputs_r+0x5a>
 800cc8c:	6921      	ldr	r1, [r4, #16]
 800cc8e:	4650      	mov	r0, sl
 800cc90:	f7fe fc18 	bl	800b4c4 <_free_r>
 800cc94:	230c      	movs	r3, #12
 800cc96:	f8ca 3000 	str.w	r3, [sl]
 800cc9a:	89a3      	ldrh	r3, [r4, #12]
 800cc9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cca0:	81a3      	strh	r3, [r4, #12]
 800cca2:	f04f 30ff 	mov.w	r0, #4294967295
 800cca6:	e7e9      	b.n	800cc7c <__ssputs_r+0x88>

0800cca8 <_svfiprintf_r>:
 800cca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccac:	4698      	mov	r8, r3
 800ccae:	898b      	ldrh	r3, [r1, #12]
 800ccb0:	061b      	lsls	r3, r3, #24
 800ccb2:	b09d      	sub	sp, #116	; 0x74
 800ccb4:	4607      	mov	r7, r0
 800ccb6:	460d      	mov	r5, r1
 800ccb8:	4614      	mov	r4, r2
 800ccba:	d50e      	bpl.n	800ccda <_svfiprintf_r+0x32>
 800ccbc:	690b      	ldr	r3, [r1, #16]
 800ccbe:	b963      	cbnz	r3, 800ccda <_svfiprintf_r+0x32>
 800ccc0:	2140      	movs	r1, #64	; 0x40
 800ccc2:	f7fc fc6d 	bl	80095a0 <_malloc_r>
 800ccc6:	6028      	str	r0, [r5, #0]
 800ccc8:	6128      	str	r0, [r5, #16]
 800ccca:	b920      	cbnz	r0, 800ccd6 <_svfiprintf_r+0x2e>
 800cccc:	230c      	movs	r3, #12
 800ccce:	603b      	str	r3, [r7, #0]
 800ccd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd4:	e0d0      	b.n	800ce78 <_svfiprintf_r+0x1d0>
 800ccd6:	2340      	movs	r3, #64	; 0x40
 800ccd8:	616b      	str	r3, [r5, #20]
 800ccda:	2300      	movs	r3, #0
 800ccdc:	9309      	str	r3, [sp, #36]	; 0x24
 800ccde:	2320      	movs	r3, #32
 800cce0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cce4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cce8:	2330      	movs	r3, #48	; 0x30
 800ccea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce90 <_svfiprintf_r+0x1e8>
 800ccee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccf2:	f04f 0901 	mov.w	r9, #1
 800ccf6:	4623      	mov	r3, r4
 800ccf8:	469a      	mov	sl, r3
 800ccfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccfe:	b10a      	cbz	r2, 800cd04 <_svfiprintf_r+0x5c>
 800cd00:	2a25      	cmp	r2, #37	; 0x25
 800cd02:	d1f9      	bne.n	800ccf8 <_svfiprintf_r+0x50>
 800cd04:	ebba 0b04 	subs.w	fp, sl, r4
 800cd08:	d00b      	beq.n	800cd22 <_svfiprintf_r+0x7a>
 800cd0a:	465b      	mov	r3, fp
 800cd0c:	4622      	mov	r2, r4
 800cd0e:	4629      	mov	r1, r5
 800cd10:	4638      	mov	r0, r7
 800cd12:	f7ff ff6f 	bl	800cbf4 <__ssputs_r>
 800cd16:	3001      	adds	r0, #1
 800cd18:	f000 80a9 	beq.w	800ce6e <_svfiprintf_r+0x1c6>
 800cd1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd1e:	445a      	add	r2, fp
 800cd20:	9209      	str	r2, [sp, #36]	; 0x24
 800cd22:	f89a 3000 	ldrb.w	r3, [sl]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	f000 80a1 	beq.w	800ce6e <_svfiprintf_r+0x1c6>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd36:	f10a 0a01 	add.w	sl, sl, #1
 800cd3a:	9304      	str	r3, [sp, #16]
 800cd3c:	9307      	str	r3, [sp, #28]
 800cd3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd42:	931a      	str	r3, [sp, #104]	; 0x68
 800cd44:	4654      	mov	r4, sl
 800cd46:	2205      	movs	r2, #5
 800cd48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd4c:	4850      	ldr	r0, [pc, #320]	; (800ce90 <_svfiprintf_r+0x1e8>)
 800cd4e:	f7f3 fa47 	bl	80001e0 <memchr>
 800cd52:	9a04      	ldr	r2, [sp, #16]
 800cd54:	b9d8      	cbnz	r0, 800cd8e <_svfiprintf_r+0xe6>
 800cd56:	06d0      	lsls	r0, r2, #27
 800cd58:	bf44      	itt	mi
 800cd5a:	2320      	movmi	r3, #32
 800cd5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd60:	0711      	lsls	r1, r2, #28
 800cd62:	bf44      	itt	mi
 800cd64:	232b      	movmi	r3, #43	; 0x2b
 800cd66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd6a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd6e:	2b2a      	cmp	r3, #42	; 0x2a
 800cd70:	d015      	beq.n	800cd9e <_svfiprintf_r+0xf6>
 800cd72:	9a07      	ldr	r2, [sp, #28]
 800cd74:	4654      	mov	r4, sl
 800cd76:	2000      	movs	r0, #0
 800cd78:	f04f 0c0a 	mov.w	ip, #10
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd82:	3b30      	subs	r3, #48	; 0x30
 800cd84:	2b09      	cmp	r3, #9
 800cd86:	d94d      	bls.n	800ce24 <_svfiprintf_r+0x17c>
 800cd88:	b1b0      	cbz	r0, 800cdb8 <_svfiprintf_r+0x110>
 800cd8a:	9207      	str	r2, [sp, #28]
 800cd8c:	e014      	b.n	800cdb8 <_svfiprintf_r+0x110>
 800cd8e:	eba0 0308 	sub.w	r3, r0, r8
 800cd92:	fa09 f303 	lsl.w	r3, r9, r3
 800cd96:	4313      	orrs	r3, r2
 800cd98:	9304      	str	r3, [sp, #16]
 800cd9a:	46a2      	mov	sl, r4
 800cd9c:	e7d2      	b.n	800cd44 <_svfiprintf_r+0x9c>
 800cd9e:	9b03      	ldr	r3, [sp, #12]
 800cda0:	1d19      	adds	r1, r3, #4
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	9103      	str	r1, [sp, #12]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	bfbb      	ittet	lt
 800cdaa:	425b      	neglt	r3, r3
 800cdac:	f042 0202 	orrlt.w	r2, r2, #2
 800cdb0:	9307      	strge	r3, [sp, #28]
 800cdb2:	9307      	strlt	r3, [sp, #28]
 800cdb4:	bfb8      	it	lt
 800cdb6:	9204      	strlt	r2, [sp, #16]
 800cdb8:	7823      	ldrb	r3, [r4, #0]
 800cdba:	2b2e      	cmp	r3, #46	; 0x2e
 800cdbc:	d10c      	bne.n	800cdd8 <_svfiprintf_r+0x130>
 800cdbe:	7863      	ldrb	r3, [r4, #1]
 800cdc0:	2b2a      	cmp	r3, #42	; 0x2a
 800cdc2:	d134      	bne.n	800ce2e <_svfiprintf_r+0x186>
 800cdc4:	9b03      	ldr	r3, [sp, #12]
 800cdc6:	1d1a      	adds	r2, r3, #4
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	9203      	str	r2, [sp, #12]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	bfb8      	it	lt
 800cdd0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdd4:	3402      	adds	r4, #2
 800cdd6:	9305      	str	r3, [sp, #20]
 800cdd8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cea0 <_svfiprintf_r+0x1f8>
 800cddc:	7821      	ldrb	r1, [r4, #0]
 800cdde:	2203      	movs	r2, #3
 800cde0:	4650      	mov	r0, sl
 800cde2:	f7f3 f9fd 	bl	80001e0 <memchr>
 800cde6:	b138      	cbz	r0, 800cdf8 <_svfiprintf_r+0x150>
 800cde8:	9b04      	ldr	r3, [sp, #16]
 800cdea:	eba0 000a 	sub.w	r0, r0, sl
 800cdee:	2240      	movs	r2, #64	; 0x40
 800cdf0:	4082      	lsls	r2, r0
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	3401      	adds	r4, #1
 800cdf6:	9304      	str	r3, [sp, #16]
 800cdf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdfc:	4825      	ldr	r0, [pc, #148]	; (800ce94 <_svfiprintf_r+0x1ec>)
 800cdfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce02:	2206      	movs	r2, #6
 800ce04:	f7f3 f9ec 	bl	80001e0 <memchr>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d038      	beq.n	800ce7e <_svfiprintf_r+0x1d6>
 800ce0c:	4b22      	ldr	r3, [pc, #136]	; (800ce98 <_svfiprintf_r+0x1f0>)
 800ce0e:	bb1b      	cbnz	r3, 800ce58 <_svfiprintf_r+0x1b0>
 800ce10:	9b03      	ldr	r3, [sp, #12]
 800ce12:	3307      	adds	r3, #7
 800ce14:	f023 0307 	bic.w	r3, r3, #7
 800ce18:	3308      	adds	r3, #8
 800ce1a:	9303      	str	r3, [sp, #12]
 800ce1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce1e:	4433      	add	r3, r6
 800ce20:	9309      	str	r3, [sp, #36]	; 0x24
 800ce22:	e768      	b.n	800ccf6 <_svfiprintf_r+0x4e>
 800ce24:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce28:	460c      	mov	r4, r1
 800ce2a:	2001      	movs	r0, #1
 800ce2c:	e7a6      	b.n	800cd7c <_svfiprintf_r+0xd4>
 800ce2e:	2300      	movs	r3, #0
 800ce30:	3401      	adds	r4, #1
 800ce32:	9305      	str	r3, [sp, #20]
 800ce34:	4619      	mov	r1, r3
 800ce36:	f04f 0c0a 	mov.w	ip, #10
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce40:	3a30      	subs	r2, #48	; 0x30
 800ce42:	2a09      	cmp	r2, #9
 800ce44:	d903      	bls.n	800ce4e <_svfiprintf_r+0x1a6>
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d0c6      	beq.n	800cdd8 <_svfiprintf_r+0x130>
 800ce4a:	9105      	str	r1, [sp, #20]
 800ce4c:	e7c4      	b.n	800cdd8 <_svfiprintf_r+0x130>
 800ce4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce52:	4604      	mov	r4, r0
 800ce54:	2301      	movs	r3, #1
 800ce56:	e7f0      	b.n	800ce3a <_svfiprintf_r+0x192>
 800ce58:	ab03      	add	r3, sp, #12
 800ce5a:	9300      	str	r3, [sp, #0]
 800ce5c:	462a      	mov	r2, r5
 800ce5e:	4b0f      	ldr	r3, [pc, #60]	; (800ce9c <_svfiprintf_r+0x1f4>)
 800ce60:	a904      	add	r1, sp, #16
 800ce62:	4638      	mov	r0, r7
 800ce64:	f7fc fcf8 	bl	8009858 <_printf_float>
 800ce68:	1c42      	adds	r2, r0, #1
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	d1d6      	bne.n	800ce1c <_svfiprintf_r+0x174>
 800ce6e:	89ab      	ldrh	r3, [r5, #12]
 800ce70:	065b      	lsls	r3, r3, #25
 800ce72:	f53f af2d 	bmi.w	800ccd0 <_svfiprintf_r+0x28>
 800ce76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce78:	b01d      	add	sp, #116	; 0x74
 800ce7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce7e:	ab03      	add	r3, sp, #12
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	462a      	mov	r2, r5
 800ce84:	4b05      	ldr	r3, [pc, #20]	; (800ce9c <_svfiprintf_r+0x1f4>)
 800ce86:	a904      	add	r1, sp, #16
 800ce88:	4638      	mov	r0, r7
 800ce8a:	f7fc ff89 	bl	8009da0 <_printf_i>
 800ce8e:	e7eb      	b.n	800ce68 <_svfiprintf_r+0x1c0>
 800ce90:	08017011 	.word	0x08017011
 800ce94:	0801701b 	.word	0x0801701b
 800ce98:	08009859 	.word	0x08009859
 800ce9c:	0800cbf5 	.word	0x0800cbf5
 800cea0:	08017017 	.word	0x08017017

0800cea4 <__sflush_r>:
 800cea4:	898a      	ldrh	r2, [r1, #12]
 800cea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceaa:	4605      	mov	r5, r0
 800ceac:	0710      	lsls	r0, r2, #28
 800ceae:	460c      	mov	r4, r1
 800ceb0:	d458      	bmi.n	800cf64 <__sflush_r+0xc0>
 800ceb2:	684b      	ldr	r3, [r1, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	dc05      	bgt.n	800cec4 <__sflush_r+0x20>
 800ceb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	dc02      	bgt.n	800cec4 <__sflush_r+0x20>
 800cebe:	2000      	movs	r0, #0
 800cec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cec6:	2e00      	cmp	r6, #0
 800cec8:	d0f9      	beq.n	800cebe <__sflush_r+0x1a>
 800ceca:	2300      	movs	r3, #0
 800cecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ced0:	682f      	ldr	r7, [r5, #0]
 800ced2:	6a21      	ldr	r1, [r4, #32]
 800ced4:	602b      	str	r3, [r5, #0]
 800ced6:	d032      	beq.n	800cf3e <__sflush_r+0x9a>
 800ced8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ceda:	89a3      	ldrh	r3, [r4, #12]
 800cedc:	075a      	lsls	r2, r3, #29
 800cede:	d505      	bpl.n	800ceec <__sflush_r+0x48>
 800cee0:	6863      	ldr	r3, [r4, #4]
 800cee2:	1ac0      	subs	r0, r0, r3
 800cee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cee6:	b10b      	cbz	r3, 800ceec <__sflush_r+0x48>
 800cee8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ceea:	1ac0      	subs	r0, r0, r3
 800ceec:	2300      	movs	r3, #0
 800ceee:	4602      	mov	r2, r0
 800cef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cef2:	6a21      	ldr	r1, [r4, #32]
 800cef4:	4628      	mov	r0, r5
 800cef6:	47b0      	blx	r6
 800cef8:	1c43      	adds	r3, r0, #1
 800cefa:	89a3      	ldrh	r3, [r4, #12]
 800cefc:	d106      	bne.n	800cf0c <__sflush_r+0x68>
 800cefe:	6829      	ldr	r1, [r5, #0]
 800cf00:	291d      	cmp	r1, #29
 800cf02:	d82b      	bhi.n	800cf5c <__sflush_r+0xb8>
 800cf04:	4a29      	ldr	r2, [pc, #164]	; (800cfac <__sflush_r+0x108>)
 800cf06:	410a      	asrs	r2, r1
 800cf08:	07d6      	lsls	r6, r2, #31
 800cf0a:	d427      	bmi.n	800cf5c <__sflush_r+0xb8>
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	6062      	str	r2, [r4, #4]
 800cf10:	04d9      	lsls	r1, r3, #19
 800cf12:	6922      	ldr	r2, [r4, #16]
 800cf14:	6022      	str	r2, [r4, #0]
 800cf16:	d504      	bpl.n	800cf22 <__sflush_r+0x7e>
 800cf18:	1c42      	adds	r2, r0, #1
 800cf1a:	d101      	bne.n	800cf20 <__sflush_r+0x7c>
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	b903      	cbnz	r3, 800cf22 <__sflush_r+0x7e>
 800cf20:	6560      	str	r0, [r4, #84]	; 0x54
 800cf22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf24:	602f      	str	r7, [r5, #0]
 800cf26:	2900      	cmp	r1, #0
 800cf28:	d0c9      	beq.n	800cebe <__sflush_r+0x1a>
 800cf2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf2e:	4299      	cmp	r1, r3
 800cf30:	d002      	beq.n	800cf38 <__sflush_r+0x94>
 800cf32:	4628      	mov	r0, r5
 800cf34:	f7fe fac6 	bl	800b4c4 <_free_r>
 800cf38:	2000      	movs	r0, #0
 800cf3a:	6360      	str	r0, [r4, #52]	; 0x34
 800cf3c:	e7c0      	b.n	800cec0 <__sflush_r+0x1c>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	4628      	mov	r0, r5
 800cf42:	47b0      	blx	r6
 800cf44:	1c41      	adds	r1, r0, #1
 800cf46:	d1c8      	bne.n	800ceda <__sflush_r+0x36>
 800cf48:	682b      	ldr	r3, [r5, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d0c5      	beq.n	800ceda <__sflush_r+0x36>
 800cf4e:	2b1d      	cmp	r3, #29
 800cf50:	d001      	beq.n	800cf56 <__sflush_r+0xb2>
 800cf52:	2b16      	cmp	r3, #22
 800cf54:	d101      	bne.n	800cf5a <__sflush_r+0xb6>
 800cf56:	602f      	str	r7, [r5, #0]
 800cf58:	e7b1      	b.n	800cebe <__sflush_r+0x1a>
 800cf5a:	89a3      	ldrh	r3, [r4, #12]
 800cf5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf60:	81a3      	strh	r3, [r4, #12]
 800cf62:	e7ad      	b.n	800cec0 <__sflush_r+0x1c>
 800cf64:	690f      	ldr	r7, [r1, #16]
 800cf66:	2f00      	cmp	r7, #0
 800cf68:	d0a9      	beq.n	800cebe <__sflush_r+0x1a>
 800cf6a:	0793      	lsls	r3, r2, #30
 800cf6c:	680e      	ldr	r6, [r1, #0]
 800cf6e:	bf08      	it	eq
 800cf70:	694b      	ldreq	r3, [r1, #20]
 800cf72:	600f      	str	r7, [r1, #0]
 800cf74:	bf18      	it	ne
 800cf76:	2300      	movne	r3, #0
 800cf78:	eba6 0807 	sub.w	r8, r6, r7
 800cf7c:	608b      	str	r3, [r1, #8]
 800cf7e:	f1b8 0f00 	cmp.w	r8, #0
 800cf82:	dd9c      	ble.n	800cebe <__sflush_r+0x1a>
 800cf84:	6a21      	ldr	r1, [r4, #32]
 800cf86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf88:	4643      	mov	r3, r8
 800cf8a:	463a      	mov	r2, r7
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	47b0      	blx	r6
 800cf90:	2800      	cmp	r0, #0
 800cf92:	dc06      	bgt.n	800cfa2 <__sflush_r+0xfe>
 800cf94:	89a3      	ldrh	r3, [r4, #12]
 800cf96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf9a:	81a3      	strh	r3, [r4, #12]
 800cf9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa0:	e78e      	b.n	800cec0 <__sflush_r+0x1c>
 800cfa2:	4407      	add	r7, r0
 800cfa4:	eba8 0800 	sub.w	r8, r8, r0
 800cfa8:	e7e9      	b.n	800cf7e <__sflush_r+0xda>
 800cfaa:	bf00      	nop
 800cfac:	dfbffffe 	.word	0xdfbffffe

0800cfb0 <_fflush_r>:
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	690b      	ldr	r3, [r1, #16]
 800cfb4:	4605      	mov	r5, r0
 800cfb6:	460c      	mov	r4, r1
 800cfb8:	b913      	cbnz	r3, 800cfc0 <_fflush_r+0x10>
 800cfba:	2500      	movs	r5, #0
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	bd38      	pop	{r3, r4, r5, pc}
 800cfc0:	b118      	cbz	r0, 800cfca <_fflush_r+0x1a>
 800cfc2:	6a03      	ldr	r3, [r0, #32]
 800cfc4:	b90b      	cbnz	r3, 800cfca <_fflush_r+0x1a>
 800cfc6:	f7fd faa9 	bl	800a51c <__sinit>
 800cfca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d0f3      	beq.n	800cfba <_fflush_r+0xa>
 800cfd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cfd4:	07d0      	lsls	r0, r2, #31
 800cfd6:	d404      	bmi.n	800cfe2 <_fflush_r+0x32>
 800cfd8:	0599      	lsls	r1, r3, #22
 800cfda:	d402      	bmi.n	800cfe2 <_fflush_r+0x32>
 800cfdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfde:	f7fd fbde 	bl	800a79e <__retarget_lock_acquire_recursive>
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	4621      	mov	r1, r4
 800cfe6:	f7ff ff5d 	bl	800cea4 <__sflush_r>
 800cfea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfec:	07da      	lsls	r2, r3, #31
 800cfee:	4605      	mov	r5, r0
 800cff0:	d4e4      	bmi.n	800cfbc <_fflush_r+0xc>
 800cff2:	89a3      	ldrh	r3, [r4, #12]
 800cff4:	059b      	lsls	r3, r3, #22
 800cff6:	d4e1      	bmi.n	800cfbc <_fflush_r+0xc>
 800cff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cffa:	f7fd fbd1 	bl	800a7a0 <__retarget_lock_release_recursive>
 800cffe:	e7dd      	b.n	800cfbc <_fflush_r+0xc>

0800d000 <strncmp>:
 800d000:	b510      	push	{r4, lr}
 800d002:	b16a      	cbz	r2, 800d020 <strncmp+0x20>
 800d004:	3901      	subs	r1, #1
 800d006:	1884      	adds	r4, r0, r2
 800d008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d00c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d010:	429a      	cmp	r2, r3
 800d012:	d103      	bne.n	800d01c <strncmp+0x1c>
 800d014:	42a0      	cmp	r0, r4
 800d016:	d001      	beq.n	800d01c <strncmp+0x1c>
 800d018:	2a00      	cmp	r2, #0
 800d01a:	d1f5      	bne.n	800d008 <strncmp+0x8>
 800d01c:	1ad0      	subs	r0, r2, r3
 800d01e:	bd10      	pop	{r4, pc}
 800d020:	4610      	mov	r0, r2
 800d022:	e7fc      	b.n	800d01e <strncmp+0x1e>
 800d024:	0000      	movs	r0, r0
	...

0800d028 <nan>:
 800d028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d030 <nan+0x8>
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	00000000 	.word	0x00000000
 800d034:	7ff80000 	.word	0x7ff80000

0800d038 <__assert_func>:
 800d038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d03a:	4614      	mov	r4, r2
 800d03c:	461a      	mov	r2, r3
 800d03e:	4b09      	ldr	r3, [pc, #36]	; (800d064 <__assert_func+0x2c>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4605      	mov	r5, r0
 800d044:	68d8      	ldr	r0, [r3, #12]
 800d046:	b14c      	cbz	r4, 800d05c <__assert_func+0x24>
 800d048:	4b07      	ldr	r3, [pc, #28]	; (800d068 <__assert_func+0x30>)
 800d04a:	9100      	str	r1, [sp, #0]
 800d04c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d050:	4906      	ldr	r1, [pc, #24]	; (800d06c <__assert_func+0x34>)
 800d052:	462b      	mov	r3, r5
 800d054:	f000 fb9a 	bl	800d78c <fiprintf>
 800d058:	f000 fbaa 	bl	800d7b0 <abort>
 800d05c:	4b04      	ldr	r3, [pc, #16]	; (800d070 <__assert_func+0x38>)
 800d05e:	461c      	mov	r4, r3
 800d060:	e7f3      	b.n	800d04a <__assert_func+0x12>
 800d062:	bf00      	nop
 800d064:	20000c28 	.word	0x20000c28
 800d068:	0801702a 	.word	0x0801702a
 800d06c:	08017037 	.word	0x08017037
 800d070:	08017065 	.word	0x08017065

0800d074 <_calloc_r>:
 800d074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d076:	fba1 2402 	umull	r2, r4, r1, r2
 800d07a:	b94c      	cbnz	r4, 800d090 <_calloc_r+0x1c>
 800d07c:	4611      	mov	r1, r2
 800d07e:	9201      	str	r2, [sp, #4]
 800d080:	f7fc fa8e 	bl	80095a0 <_malloc_r>
 800d084:	9a01      	ldr	r2, [sp, #4]
 800d086:	4605      	mov	r5, r0
 800d088:	b930      	cbnz	r0, 800d098 <_calloc_r+0x24>
 800d08a:	4628      	mov	r0, r5
 800d08c:	b003      	add	sp, #12
 800d08e:	bd30      	pop	{r4, r5, pc}
 800d090:	220c      	movs	r2, #12
 800d092:	6002      	str	r2, [r0, #0]
 800d094:	2500      	movs	r5, #0
 800d096:	e7f8      	b.n	800d08a <_calloc_r+0x16>
 800d098:	4621      	mov	r1, r4
 800d09a:	f7fd faf2 	bl	800a682 <memset>
 800d09e:	e7f4      	b.n	800d08a <_calloc_r+0x16>

0800d0a0 <rshift>:
 800d0a0:	6903      	ldr	r3, [r0, #16]
 800d0a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d0a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d0ae:	f100 0414 	add.w	r4, r0, #20
 800d0b2:	dd45      	ble.n	800d140 <rshift+0xa0>
 800d0b4:	f011 011f 	ands.w	r1, r1, #31
 800d0b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d0bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d0c0:	d10c      	bne.n	800d0dc <rshift+0x3c>
 800d0c2:	f100 0710 	add.w	r7, r0, #16
 800d0c6:	4629      	mov	r1, r5
 800d0c8:	42b1      	cmp	r1, r6
 800d0ca:	d334      	bcc.n	800d136 <rshift+0x96>
 800d0cc:	1a9b      	subs	r3, r3, r2
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	1eea      	subs	r2, r5, #3
 800d0d2:	4296      	cmp	r6, r2
 800d0d4:	bf38      	it	cc
 800d0d6:	2300      	movcc	r3, #0
 800d0d8:	4423      	add	r3, r4
 800d0da:	e015      	b.n	800d108 <rshift+0x68>
 800d0dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d0e0:	f1c1 0820 	rsb	r8, r1, #32
 800d0e4:	40cf      	lsrs	r7, r1
 800d0e6:	f105 0e04 	add.w	lr, r5, #4
 800d0ea:	46a1      	mov	r9, r4
 800d0ec:	4576      	cmp	r6, lr
 800d0ee:	46f4      	mov	ip, lr
 800d0f0:	d815      	bhi.n	800d11e <rshift+0x7e>
 800d0f2:	1a9a      	subs	r2, r3, r2
 800d0f4:	0092      	lsls	r2, r2, #2
 800d0f6:	3a04      	subs	r2, #4
 800d0f8:	3501      	adds	r5, #1
 800d0fa:	42ae      	cmp	r6, r5
 800d0fc:	bf38      	it	cc
 800d0fe:	2200      	movcc	r2, #0
 800d100:	18a3      	adds	r3, r4, r2
 800d102:	50a7      	str	r7, [r4, r2]
 800d104:	b107      	cbz	r7, 800d108 <rshift+0x68>
 800d106:	3304      	adds	r3, #4
 800d108:	1b1a      	subs	r2, r3, r4
 800d10a:	42a3      	cmp	r3, r4
 800d10c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d110:	bf08      	it	eq
 800d112:	2300      	moveq	r3, #0
 800d114:	6102      	str	r2, [r0, #16]
 800d116:	bf08      	it	eq
 800d118:	6143      	streq	r3, [r0, #20]
 800d11a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d11e:	f8dc c000 	ldr.w	ip, [ip]
 800d122:	fa0c fc08 	lsl.w	ip, ip, r8
 800d126:	ea4c 0707 	orr.w	r7, ip, r7
 800d12a:	f849 7b04 	str.w	r7, [r9], #4
 800d12e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d132:	40cf      	lsrs	r7, r1
 800d134:	e7da      	b.n	800d0ec <rshift+0x4c>
 800d136:	f851 cb04 	ldr.w	ip, [r1], #4
 800d13a:	f847 cf04 	str.w	ip, [r7, #4]!
 800d13e:	e7c3      	b.n	800d0c8 <rshift+0x28>
 800d140:	4623      	mov	r3, r4
 800d142:	e7e1      	b.n	800d108 <rshift+0x68>

0800d144 <__hexdig_fun>:
 800d144:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d148:	2b09      	cmp	r3, #9
 800d14a:	d802      	bhi.n	800d152 <__hexdig_fun+0xe>
 800d14c:	3820      	subs	r0, #32
 800d14e:	b2c0      	uxtb	r0, r0
 800d150:	4770      	bx	lr
 800d152:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d156:	2b05      	cmp	r3, #5
 800d158:	d801      	bhi.n	800d15e <__hexdig_fun+0x1a>
 800d15a:	3847      	subs	r0, #71	; 0x47
 800d15c:	e7f7      	b.n	800d14e <__hexdig_fun+0xa>
 800d15e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d162:	2b05      	cmp	r3, #5
 800d164:	d801      	bhi.n	800d16a <__hexdig_fun+0x26>
 800d166:	3827      	subs	r0, #39	; 0x27
 800d168:	e7f1      	b.n	800d14e <__hexdig_fun+0xa>
 800d16a:	2000      	movs	r0, #0
 800d16c:	4770      	bx	lr
	...

0800d170 <__gethex>:
 800d170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d174:	4617      	mov	r7, r2
 800d176:	680a      	ldr	r2, [r1, #0]
 800d178:	b085      	sub	sp, #20
 800d17a:	f102 0b02 	add.w	fp, r2, #2
 800d17e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d182:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d186:	4681      	mov	r9, r0
 800d188:	468a      	mov	sl, r1
 800d18a:	9302      	str	r3, [sp, #8]
 800d18c:	32fe      	adds	r2, #254	; 0xfe
 800d18e:	eb02 030b 	add.w	r3, r2, fp
 800d192:	46d8      	mov	r8, fp
 800d194:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d198:	9301      	str	r3, [sp, #4]
 800d19a:	2830      	cmp	r0, #48	; 0x30
 800d19c:	d0f7      	beq.n	800d18e <__gethex+0x1e>
 800d19e:	f7ff ffd1 	bl	800d144 <__hexdig_fun>
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d138      	bne.n	800d21a <__gethex+0xaa>
 800d1a8:	49a7      	ldr	r1, [pc, #668]	; (800d448 <__gethex+0x2d8>)
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	4640      	mov	r0, r8
 800d1ae:	f7ff ff27 	bl	800d000 <strncmp>
 800d1b2:	4606      	mov	r6, r0
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d169      	bne.n	800d28c <__gethex+0x11c>
 800d1b8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d1bc:	465d      	mov	r5, fp
 800d1be:	f7ff ffc1 	bl	800d144 <__hexdig_fun>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	d064      	beq.n	800d290 <__gethex+0x120>
 800d1c6:	465a      	mov	r2, fp
 800d1c8:	7810      	ldrb	r0, [r2, #0]
 800d1ca:	2830      	cmp	r0, #48	; 0x30
 800d1cc:	4690      	mov	r8, r2
 800d1ce:	f102 0201 	add.w	r2, r2, #1
 800d1d2:	d0f9      	beq.n	800d1c8 <__gethex+0x58>
 800d1d4:	f7ff ffb6 	bl	800d144 <__hexdig_fun>
 800d1d8:	2301      	movs	r3, #1
 800d1da:	fab0 f480 	clz	r4, r0
 800d1de:	0964      	lsrs	r4, r4, #5
 800d1e0:	465e      	mov	r6, fp
 800d1e2:	9301      	str	r3, [sp, #4]
 800d1e4:	4642      	mov	r2, r8
 800d1e6:	4615      	mov	r5, r2
 800d1e8:	3201      	adds	r2, #1
 800d1ea:	7828      	ldrb	r0, [r5, #0]
 800d1ec:	f7ff ffaa 	bl	800d144 <__hexdig_fun>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	d1f8      	bne.n	800d1e6 <__gethex+0x76>
 800d1f4:	4994      	ldr	r1, [pc, #592]	; (800d448 <__gethex+0x2d8>)
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	f7ff ff01 	bl	800d000 <strncmp>
 800d1fe:	b978      	cbnz	r0, 800d220 <__gethex+0xb0>
 800d200:	b946      	cbnz	r6, 800d214 <__gethex+0xa4>
 800d202:	1c6e      	adds	r6, r5, #1
 800d204:	4632      	mov	r2, r6
 800d206:	4615      	mov	r5, r2
 800d208:	3201      	adds	r2, #1
 800d20a:	7828      	ldrb	r0, [r5, #0]
 800d20c:	f7ff ff9a 	bl	800d144 <__hexdig_fun>
 800d210:	2800      	cmp	r0, #0
 800d212:	d1f8      	bne.n	800d206 <__gethex+0x96>
 800d214:	1b73      	subs	r3, r6, r5
 800d216:	009e      	lsls	r6, r3, #2
 800d218:	e004      	b.n	800d224 <__gethex+0xb4>
 800d21a:	2400      	movs	r4, #0
 800d21c:	4626      	mov	r6, r4
 800d21e:	e7e1      	b.n	800d1e4 <__gethex+0x74>
 800d220:	2e00      	cmp	r6, #0
 800d222:	d1f7      	bne.n	800d214 <__gethex+0xa4>
 800d224:	782b      	ldrb	r3, [r5, #0]
 800d226:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d22a:	2b50      	cmp	r3, #80	; 0x50
 800d22c:	d13d      	bne.n	800d2aa <__gethex+0x13a>
 800d22e:	786b      	ldrb	r3, [r5, #1]
 800d230:	2b2b      	cmp	r3, #43	; 0x2b
 800d232:	d02f      	beq.n	800d294 <__gethex+0x124>
 800d234:	2b2d      	cmp	r3, #45	; 0x2d
 800d236:	d031      	beq.n	800d29c <__gethex+0x12c>
 800d238:	1c69      	adds	r1, r5, #1
 800d23a:	f04f 0b00 	mov.w	fp, #0
 800d23e:	7808      	ldrb	r0, [r1, #0]
 800d240:	f7ff ff80 	bl	800d144 <__hexdig_fun>
 800d244:	1e42      	subs	r2, r0, #1
 800d246:	b2d2      	uxtb	r2, r2
 800d248:	2a18      	cmp	r2, #24
 800d24a:	d82e      	bhi.n	800d2aa <__gethex+0x13a>
 800d24c:	f1a0 0210 	sub.w	r2, r0, #16
 800d250:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d254:	f7ff ff76 	bl	800d144 <__hexdig_fun>
 800d258:	f100 3cff 	add.w	ip, r0, #4294967295
 800d25c:	fa5f fc8c 	uxtb.w	ip, ip
 800d260:	f1bc 0f18 	cmp.w	ip, #24
 800d264:	d91d      	bls.n	800d2a2 <__gethex+0x132>
 800d266:	f1bb 0f00 	cmp.w	fp, #0
 800d26a:	d000      	beq.n	800d26e <__gethex+0xfe>
 800d26c:	4252      	negs	r2, r2
 800d26e:	4416      	add	r6, r2
 800d270:	f8ca 1000 	str.w	r1, [sl]
 800d274:	b1dc      	cbz	r4, 800d2ae <__gethex+0x13e>
 800d276:	9b01      	ldr	r3, [sp, #4]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	bf14      	ite	ne
 800d27c:	f04f 0800 	movne.w	r8, #0
 800d280:	f04f 0806 	moveq.w	r8, #6
 800d284:	4640      	mov	r0, r8
 800d286:	b005      	add	sp, #20
 800d288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28c:	4645      	mov	r5, r8
 800d28e:	4626      	mov	r6, r4
 800d290:	2401      	movs	r4, #1
 800d292:	e7c7      	b.n	800d224 <__gethex+0xb4>
 800d294:	f04f 0b00 	mov.w	fp, #0
 800d298:	1ca9      	adds	r1, r5, #2
 800d29a:	e7d0      	b.n	800d23e <__gethex+0xce>
 800d29c:	f04f 0b01 	mov.w	fp, #1
 800d2a0:	e7fa      	b.n	800d298 <__gethex+0x128>
 800d2a2:	230a      	movs	r3, #10
 800d2a4:	fb03 0002 	mla	r0, r3, r2, r0
 800d2a8:	e7d0      	b.n	800d24c <__gethex+0xdc>
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	e7e0      	b.n	800d270 <__gethex+0x100>
 800d2ae:	eba5 0308 	sub.w	r3, r5, r8
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	2b07      	cmp	r3, #7
 800d2b8:	dc0a      	bgt.n	800d2d0 <__gethex+0x160>
 800d2ba:	4648      	mov	r0, r9
 800d2bc:	f7fe f94e 	bl	800b55c <_Balloc>
 800d2c0:	4604      	mov	r4, r0
 800d2c2:	b940      	cbnz	r0, 800d2d6 <__gethex+0x166>
 800d2c4:	4b61      	ldr	r3, [pc, #388]	; (800d44c <__gethex+0x2dc>)
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	21e4      	movs	r1, #228	; 0xe4
 800d2ca:	4861      	ldr	r0, [pc, #388]	; (800d450 <__gethex+0x2e0>)
 800d2cc:	f7ff feb4 	bl	800d038 <__assert_func>
 800d2d0:	3101      	adds	r1, #1
 800d2d2:	105b      	asrs	r3, r3, #1
 800d2d4:	e7ef      	b.n	800d2b6 <__gethex+0x146>
 800d2d6:	f100 0a14 	add.w	sl, r0, #20
 800d2da:	2300      	movs	r3, #0
 800d2dc:	495a      	ldr	r1, [pc, #360]	; (800d448 <__gethex+0x2d8>)
 800d2de:	f8cd a004 	str.w	sl, [sp, #4]
 800d2e2:	469b      	mov	fp, r3
 800d2e4:	45a8      	cmp	r8, r5
 800d2e6:	d342      	bcc.n	800d36e <__gethex+0x1fe>
 800d2e8:	9801      	ldr	r0, [sp, #4]
 800d2ea:	f840 bb04 	str.w	fp, [r0], #4
 800d2ee:	eba0 000a 	sub.w	r0, r0, sl
 800d2f2:	1080      	asrs	r0, r0, #2
 800d2f4:	6120      	str	r0, [r4, #16]
 800d2f6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d2fa:	4658      	mov	r0, fp
 800d2fc:	f7fe fa20 	bl	800b740 <__hi0bits>
 800d300:	683d      	ldr	r5, [r7, #0]
 800d302:	eba8 0000 	sub.w	r0, r8, r0
 800d306:	42a8      	cmp	r0, r5
 800d308:	dd59      	ble.n	800d3be <__gethex+0x24e>
 800d30a:	eba0 0805 	sub.w	r8, r0, r5
 800d30e:	4641      	mov	r1, r8
 800d310:	4620      	mov	r0, r4
 800d312:	f7fe fdaf 	bl	800be74 <__any_on>
 800d316:	4683      	mov	fp, r0
 800d318:	b1b8      	cbz	r0, 800d34a <__gethex+0x1da>
 800d31a:	f108 33ff 	add.w	r3, r8, #4294967295
 800d31e:	1159      	asrs	r1, r3, #5
 800d320:	f003 021f 	and.w	r2, r3, #31
 800d324:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d328:	f04f 0b01 	mov.w	fp, #1
 800d32c:	fa0b f202 	lsl.w	r2, fp, r2
 800d330:	420a      	tst	r2, r1
 800d332:	d00a      	beq.n	800d34a <__gethex+0x1da>
 800d334:	455b      	cmp	r3, fp
 800d336:	dd06      	ble.n	800d346 <__gethex+0x1d6>
 800d338:	f1a8 0102 	sub.w	r1, r8, #2
 800d33c:	4620      	mov	r0, r4
 800d33e:	f7fe fd99 	bl	800be74 <__any_on>
 800d342:	2800      	cmp	r0, #0
 800d344:	d138      	bne.n	800d3b8 <__gethex+0x248>
 800d346:	f04f 0b02 	mov.w	fp, #2
 800d34a:	4641      	mov	r1, r8
 800d34c:	4620      	mov	r0, r4
 800d34e:	f7ff fea7 	bl	800d0a0 <rshift>
 800d352:	4446      	add	r6, r8
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	42b3      	cmp	r3, r6
 800d358:	da41      	bge.n	800d3de <__gethex+0x26e>
 800d35a:	4621      	mov	r1, r4
 800d35c:	4648      	mov	r0, r9
 800d35e:	f7fe f93d 	bl	800b5dc <_Bfree>
 800d362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d364:	2300      	movs	r3, #0
 800d366:	6013      	str	r3, [r2, #0]
 800d368:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d36c:	e78a      	b.n	800d284 <__gethex+0x114>
 800d36e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d372:	2a2e      	cmp	r2, #46	; 0x2e
 800d374:	d014      	beq.n	800d3a0 <__gethex+0x230>
 800d376:	2b20      	cmp	r3, #32
 800d378:	d106      	bne.n	800d388 <__gethex+0x218>
 800d37a:	9b01      	ldr	r3, [sp, #4]
 800d37c:	f843 bb04 	str.w	fp, [r3], #4
 800d380:	f04f 0b00 	mov.w	fp, #0
 800d384:	9301      	str	r3, [sp, #4]
 800d386:	465b      	mov	r3, fp
 800d388:	7828      	ldrb	r0, [r5, #0]
 800d38a:	9303      	str	r3, [sp, #12]
 800d38c:	f7ff feda 	bl	800d144 <__hexdig_fun>
 800d390:	9b03      	ldr	r3, [sp, #12]
 800d392:	f000 000f 	and.w	r0, r0, #15
 800d396:	4098      	lsls	r0, r3
 800d398:	ea4b 0b00 	orr.w	fp, fp, r0
 800d39c:	3304      	adds	r3, #4
 800d39e:	e7a1      	b.n	800d2e4 <__gethex+0x174>
 800d3a0:	45a8      	cmp	r8, r5
 800d3a2:	d8e8      	bhi.n	800d376 <__gethex+0x206>
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	9303      	str	r3, [sp, #12]
 800d3aa:	f7ff fe29 	bl	800d000 <strncmp>
 800d3ae:	4926      	ldr	r1, [pc, #152]	; (800d448 <__gethex+0x2d8>)
 800d3b0:	9b03      	ldr	r3, [sp, #12]
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	d1df      	bne.n	800d376 <__gethex+0x206>
 800d3b6:	e795      	b.n	800d2e4 <__gethex+0x174>
 800d3b8:	f04f 0b03 	mov.w	fp, #3
 800d3bc:	e7c5      	b.n	800d34a <__gethex+0x1da>
 800d3be:	da0b      	bge.n	800d3d8 <__gethex+0x268>
 800d3c0:	eba5 0800 	sub.w	r8, r5, r0
 800d3c4:	4621      	mov	r1, r4
 800d3c6:	4642      	mov	r2, r8
 800d3c8:	4648      	mov	r0, r9
 800d3ca:	f7fe fb21 	bl	800ba10 <__lshift>
 800d3ce:	eba6 0608 	sub.w	r6, r6, r8
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	f100 0a14 	add.w	sl, r0, #20
 800d3d8:	f04f 0b00 	mov.w	fp, #0
 800d3dc:	e7ba      	b.n	800d354 <__gethex+0x1e4>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	42b3      	cmp	r3, r6
 800d3e2:	dd73      	ble.n	800d4cc <__gethex+0x35c>
 800d3e4:	1b9e      	subs	r6, r3, r6
 800d3e6:	42b5      	cmp	r5, r6
 800d3e8:	dc34      	bgt.n	800d454 <__gethex+0x2e4>
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	d023      	beq.n	800d438 <__gethex+0x2c8>
 800d3f0:	2b03      	cmp	r3, #3
 800d3f2:	d025      	beq.n	800d440 <__gethex+0x2d0>
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d115      	bne.n	800d424 <__gethex+0x2b4>
 800d3f8:	42b5      	cmp	r5, r6
 800d3fa:	d113      	bne.n	800d424 <__gethex+0x2b4>
 800d3fc:	2d01      	cmp	r5, #1
 800d3fe:	d10b      	bne.n	800d418 <__gethex+0x2a8>
 800d400:	9a02      	ldr	r2, [sp, #8]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6013      	str	r3, [r2, #0]
 800d406:	2301      	movs	r3, #1
 800d408:	6123      	str	r3, [r4, #16]
 800d40a:	f8ca 3000 	str.w	r3, [sl]
 800d40e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d410:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d414:	601c      	str	r4, [r3, #0]
 800d416:	e735      	b.n	800d284 <__gethex+0x114>
 800d418:	1e69      	subs	r1, r5, #1
 800d41a:	4620      	mov	r0, r4
 800d41c:	f7fe fd2a 	bl	800be74 <__any_on>
 800d420:	2800      	cmp	r0, #0
 800d422:	d1ed      	bne.n	800d400 <__gethex+0x290>
 800d424:	4621      	mov	r1, r4
 800d426:	4648      	mov	r0, r9
 800d428:	f7fe f8d8 	bl	800b5dc <_Bfree>
 800d42c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d42e:	2300      	movs	r3, #0
 800d430:	6013      	str	r3, [r2, #0]
 800d432:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d436:	e725      	b.n	800d284 <__gethex+0x114>
 800d438:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d1f2      	bne.n	800d424 <__gethex+0x2b4>
 800d43e:	e7df      	b.n	800d400 <__gethex+0x290>
 800d440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1dc      	bne.n	800d400 <__gethex+0x290>
 800d446:	e7ed      	b.n	800d424 <__gethex+0x2b4>
 800d448:	08016ebc 	.word	0x08016ebc
 800d44c:	08016d55 	.word	0x08016d55
 800d450:	08017066 	.word	0x08017066
 800d454:	f106 38ff 	add.w	r8, r6, #4294967295
 800d458:	f1bb 0f00 	cmp.w	fp, #0
 800d45c:	d133      	bne.n	800d4c6 <__gethex+0x356>
 800d45e:	f1b8 0f00 	cmp.w	r8, #0
 800d462:	d004      	beq.n	800d46e <__gethex+0x2fe>
 800d464:	4641      	mov	r1, r8
 800d466:	4620      	mov	r0, r4
 800d468:	f7fe fd04 	bl	800be74 <__any_on>
 800d46c:	4683      	mov	fp, r0
 800d46e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d472:	2301      	movs	r3, #1
 800d474:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d478:	f008 081f 	and.w	r8, r8, #31
 800d47c:	fa03 f308 	lsl.w	r3, r3, r8
 800d480:	4213      	tst	r3, r2
 800d482:	4631      	mov	r1, r6
 800d484:	4620      	mov	r0, r4
 800d486:	bf18      	it	ne
 800d488:	f04b 0b02 	orrne.w	fp, fp, #2
 800d48c:	1bad      	subs	r5, r5, r6
 800d48e:	f7ff fe07 	bl	800d0a0 <rshift>
 800d492:	687e      	ldr	r6, [r7, #4]
 800d494:	f04f 0802 	mov.w	r8, #2
 800d498:	f1bb 0f00 	cmp.w	fp, #0
 800d49c:	d04a      	beq.n	800d534 <__gethex+0x3c4>
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2b02      	cmp	r3, #2
 800d4a2:	d016      	beq.n	800d4d2 <__gethex+0x362>
 800d4a4:	2b03      	cmp	r3, #3
 800d4a6:	d018      	beq.n	800d4da <__gethex+0x36a>
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d109      	bne.n	800d4c0 <__gethex+0x350>
 800d4ac:	f01b 0f02 	tst.w	fp, #2
 800d4b0:	d006      	beq.n	800d4c0 <__gethex+0x350>
 800d4b2:	f8da 3000 	ldr.w	r3, [sl]
 800d4b6:	ea4b 0b03 	orr.w	fp, fp, r3
 800d4ba:	f01b 0f01 	tst.w	fp, #1
 800d4be:	d10f      	bne.n	800d4e0 <__gethex+0x370>
 800d4c0:	f048 0810 	orr.w	r8, r8, #16
 800d4c4:	e036      	b.n	800d534 <__gethex+0x3c4>
 800d4c6:	f04f 0b01 	mov.w	fp, #1
 800d4ca:	e7d0      	b.n	800d46e <__gethex+0x2fe>
 800d4cc:	f04f 0801 	mov.w	r8, #1
 800d4d0:	e7e2      	b.n	800d498 <__gethex+0x328>
 800d4d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4d4:	f1c3 0301 	rsb	r3, r3, #1
 800d4d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d0ef      	beq.n	800d4c0 <__gethex+0x350>
 800d4e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d4e4:	f104 0214 	add.w	r2, r4, #20
 800d4e8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d4ec:	9301      	str	r3, [sp, #4]
 800d4ee:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	4694      	mov	ip, r2
 800d4f6:	f852 1b04 	ldr.w	r1, [r2], #4
 800d4fa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d4fe:	d01e      	beq.n	800d53e <__gethex+0x3ce>
 800d500:	3101      	adds	r1, #1
 800d502:	f8cc 1000 	str.w	r1, [ip]
 800d506:	f1b8 0f02 	cmp.w	r8, #2
 800d50a:	f104 0214 	add.w	r2, r4, #20
 800d50e:	d13d      	bne.n	800d58c <__gethex+0x41c>
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	3b01      	subs	r3, #1
 800d514:	42ab      	cmp	r3, r5
 800d516:	d10b      	bne.n	800d530 <__gethex+0x3c0>
 800d518:	1169      	asrs	r1, r5, #5
 800d51a:	2301      	movs	r3, #1
 800d51c:	f005 051f 	and.w	r5, r5, #31
 800d520:	fa03 f505 	lsl.w	r5, r3, r5
 800d524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d528:	421d      	tst	r5, r3
 800d52a:	bf18      	it	ne
 800d52c:	f04f 0801 	movne.w	r8, #1
 800d530:	f048 0820 	orr.w	r8, r8, #32
 800d534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d536:	601c      	str	r4, [r3, #0]
 800d538:	9b02      	ldr	r3, [sp, #8]
 800d53a:	601e      	str	r6, [r3, #0]
 800d53c:	e6a2      	b.n	800d284 <__gethex+0x114>
 800d53e:	4290      	cmp	r0, r2
 800d540:	f842 3c04 	str.w	r3, [r2, #-4]
 800d544:	d8d6      	bhi.n	800d4f4 <__gethex+0x384>
 800d546:	68a2      	ldr	r2, [r4, #8]
 800d548:	4593      	cmp	fp, r2
 800d54a:	db17      	blt.n	800d57c <__gethex+0x40c>
 800d54c:	6861      	ldr	r1, [r4, #4]
 800d54e:	4648      	mov	r0, r9
 800d550:	3101      	adds	r1, #1
 800d552:	f7fe f803 	bl	800b55c <_Balloc>
 800d556:	4682      	mov	sl, r0
 800d558:	b918      	cbnz	r0, 800d562 <__gethex+0x3f2>
 800d55a:	4b1b      	ldr	r3, [pc, #108]	; (800d5c8 <__gethex+0x458>)
 800d55c:	4602      	mov	r2, r0
 800d55e:	2184      	movs	r1, #132	; 0x84
 800d560:	e6b3      	b.n	800d2ca <__gethex+0x15a>
 800d562:	6922      	ldr	r2, [r4, #16]
 800d564:	3202      	adds	r2, #2
 800d566:	f104 010c 	add.w	r1, r4, #12
 800d56a:	0092      	lsls	r2, r2, #2
 800d56c:	300c      	adds	r0, #12
 800d56e:	f7fd f918 	bl	800a7a2 <memcpy>
 800d572:	4621      	mov	r1, r4
 800d574:	4648      	mov	r0, r9
 800d576:	f7fe f831 	bl	800b5dc <_Bfree>
 800d57a:	4654      	mov	r4, sl
 800d57c:	6922      	ldr	r2, [r4, #16]
 800d57e:	1c51      	adds	r1, r2, #1
 800d580:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d584:	6121      	str	r1, [r4, #16]
 800d586:	2101      	movs	r1, #1
 800d588:	6151      	str	r1, [r2, #20]
 800d58a:	e7bc      	b.n	800d506 <__gethex+0x396>
 800d58c:	6921      	ldr	r1, [r4, #16]
 800d58e:	4559      	cmp	r1, fp
 800d590:	dd0b      	ble.n	800d5aa <__gethex+0x43a>
 800d592:	2101      	movs	r1, #1
 800d594:	4620      	mov	r0, r4
 800d596:	f7ff fd83 	bl	800d0a0 <rshift>
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	3601      	adds	r6, #1
 800d59e:	42b3      	cmp	r3, r6
 800d5a0:	f6ff aedb 	blt.w	800d35a <__gethex+0x1ea>
 800d5a4:	f04f 0801 	mov.w	r8, #1
 800d5a8:	e7c2      	b.n	800d530 <__gethex+0x3c0>
 800d5aa:	f015 051f 	ands.w	r5, r5, #31
 800d5ae:	d0f9      	beq.n	800d5a4 <__gethex+0x434>
 800d5b0:	9b01      	ldr	r3, [sp, #4]
 800d5b2:	441a      	add	r2, r3
 800d5b4:	f1c5 0520 	rsb	r5, r5, #32
 800d5b8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d5bc:	f7fe f8c0 	bl	800b740 <__hi0bits>
 800d5c0:	42a8      	cmp	r0, r5
 800d5c2:	dbe6      	blt.n	800d592 <__gethex+0x422>
 800d5c4:	e7ee      	b.n	800d5a4 <__gethex+0x434>
 800d5c6:	bf00      	nop
 800d5c8:	08016d55 	.word	0x08016d55

0800d5cc <L_shift>:
 800d5cc:	f1c2 0208 	rsb	r2, r2, #8
 800d5d0:	0092      	lsls	r2, r2, #2
 800d5d2:	b570      	push	{r4, r5, r6, lr}
 800d5d4:	f1c2 0620 	rsb	r6, r2, #32
 800d5d8:	6843      	ldr	r3, [r0, #4]
 800d5da:	6804      	ldr	r4, [r0, #0]
 800d5dc:	fa03 f506 	lsl.w	r5, r3, r6
 800d5e0:	432c      	orrs	r4, r5
 800d5e2:	40d3      	lsrs	r3, r2
 800d5e4:	6004      	str	r4, [r0, #0]
 800d5e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d5ea:	4288      	cmp	r0, r1
 800d5ec:	d3f4      	bcc.n	800d5d8 <L_shift+0xc>
 800d5ee:	bd70      	pop	{r4, r5, r6, pc}

0800d5f0 <__match>:
 800d5f0:	b530      	push	{r4, r5, lr}
 800d5f2:	6803      	ldr	r3, [r0, #0]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5fa:	b914      	cbnz	r4, 800d602 <__match+0x12>
 800d5fc:	6003      	str	r3, [r0, #0]
 800d5fe:	2001      	movs	r0, #1
 800d600:	bd30      	pop	{r4, r5, pc}
 800d602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d606:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d60a:	2d19      	cmp	r5, #25
 800d60c:	bf98      	it	ls
 800d60e:	3220      	addls	r2, #32
 800d610:	42a2      	cmp	r2, r4
 800d612:	d0f0      	beq.n	800d5f6 <__match+0x6>
 800d614:	2000      	movs	r0, #0
 800d616:	e7f3      	b.n	800d600 <__match+0x10>

0800d618 <__hexnan>:
 800d618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61c:	680b      	ldr	r3, [r1, #0]
 800d61e:	6801      	ldr	r1, [r0, #0]
 800d620:	115e      	asrs	r6, r3, #5
 800d622:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d626:	f013 031f 	ands.w	r3, r3, #31
 800d62a:	b087      	sub	sp, #28
 800d62c:	bf18      	it	ne
 800d62e:	3604      	addne	r6, #4
 800d630:	2500      	movs	r5, #0
 800d632:	1f37      	subs	r7, r6, #4
 800d634:	4682      	mov	sl, r0
 800d636:	4690      	mov	r8, r2
 800d638:	9301      	str	r3, [sp, #4]
 800d63a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d63e:	46b9      	mov	r9, r7
 800d640:	463c      	mov	r4, r7
 800d642:	9502      	str	r5, [sp, #8]
 800d644:	46ab      	mov	fp, r5
 800d646:	784a      	ldrb	r2, [r1, #1]
 800d648:	1c4b      	adds	r3, r1, #1
 800d64a:	9303      	str	r3, [sp, #12]
 800d64c:	b342      	cbz	r2, 800d6a0 <__hexnan+0x88>
 800d64e:	4610      	mov	r0, r2
 800d650:	9105      	str	r1, [sp, #20]
 800d652:	9204      	str	r2, [sp, #16]
 800d654:	f7ff fd76 	bl	800d144 <__hexdig_fun>
 800d658:	2800      	cmp	r0, #0
 800d65a:	d14f      	bne.n	800d6fc <__hexnan+0xe4>
 800d65c:	9a04      	ldr	r2, [sp, #16]
 800d65e:	9905      	ldr	r1, [sp, #20]
 800d660:	2a20      	cmp	r2, #32
 800d662:	d818      	bhi.n	800d696 <__hexnan+0x7e>
 800d664:	9b02      	ldr	r3, [sp, #8]
 800d666:	459b      	cmp	fp, r3
 800d668:	dd13      	ble.n	800d692 <__hexnan+0x7a>
 800d66a:	454c      	cmp	r4, r9
 800d66c:	d206      	bcs.n	800d67c <__hexnan+0x64>
 800d66e:	2d07      	cmp	r5, #7
 800d670:	dc04      	bgt.n	800d67c <__hexnan+0x64>
 800d672:	462a      	mov	r2, r5
 800d674:	4649      	mov	r1, r9
 800d676:	4620      	mov	r0, r4
 800d678:	f7ff ffa8 	bl	800d5cc <L_shift>
 800d67c:	4544      	cmp	r4, r8
 800d67e:	d950      	bls.n	800d722 <__hexnan+0x10a>
 800d680:	2300      	movs	r3, #0
 800d682:	f1a4 0904 	sub.w	r9, r4, #4
 800d686:	f844 3c04 	str.w	r3, [r4, #-4]
 800d68a:	f8cd b008 	str.w	fp, [sp, #8]
 800d68e:	464c      	mov	r4, r9
 800d690:	461d      	mov	r5, r3
 800d692:	9903      	ldr	r1, [sp, #12]
 800d694:	e7d7      	b.n	800d646 <__hexnan+0x2e>
 800d696:	2a29      	cmp	r2, #41	; 0x29
 800d698:	d155      	bne.n	800d746 <__hexnan+0x12e>
 800d69a:	3102      	adds	r1, #2
 800d69c:	f8ca 1000 	str.w	r1, [sl]
 800d6a0:	f1bb 0f00 	cmp.w	fp, #0
 800d6a4:	d04f      	beq.n	800d746 <__hexnan+0x12e>
 800d6a6:	454c      	cmp	r4, r9
 800d6a8:	d206      	bcs.n	800d6b8 <__hexnan+0xa0>
 800d6aa:	2d07      	cmp	r5, #7
 800d6ac:	dc04      	bgt.n	800d6b8 <__hexnan+0xa0>
 800d6ae:	462a      	mov	r2, r5
 800d6b0:	4649      	mov	r1, r9
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	f7ff ff8a 	bl	800d5cc <L_shift>
 800d6b8:	4544      	cmp	r4, r8
 800d6ba:	d934      	bls.n	800d726 <__hexnan+0x10e>
 800d6bc:	f1a8 0204 	sub.w	r2, r8, #4
 800d6c0:	4623      	mov	r3, r4
 800d6c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d6c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d6ca:	429f      	cmp	r7, r3
 800d6cc:	d2f9      	bcs.n	800d6c2 <__hexnan+0xaa>
 800d6ce:	1b3b      	subs	r3, r7, r4
 800d6d0:	f023 0303 	bic.w	r3, r3, #3
 800d6d4:	3304      	adds	r3, #4
 800d6d6:	3e03      	subs	r6, #3
 800d6d8:	3401      	adds	r4, #1
 800d6da:	42a6      	cmp	r6, r4
 800d6dc:	bf38      	it	cc
 800d6de:	2304      	movcc	r3, #4
 800d6e0:	4443      	add	r3, r8
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f843 2b04 	str.w	r2, [r3], #4
 800d6e8:	429f      	cmp	r7, r3
 800d6ea:	d2fb      	bcs.n	800d6e4 <__hexnan+0xcc>
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	b91b      	cbnz	r3, 800d6f8 <__hexnan+0xe0>
 800d6f0:	4547      	cmp	r7, r8
 800d6f2:	d126      	bne.n	800d742 <__hexnan+0x12a>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	603b      	str	r3, [r7, #0]
 800d6f8:	2005      	movs	r0, #5
 800d6fa:	e025      	b.n	800d748 <__hexnan+0x130>
 800d6fc:	3501      	adds	r5, #1
 800d6fe:	2d08      	cmp	r5, #8
 800d700:	f10b 0b01 	add.w	fp, fp, #1
 800d704:	dd06      	ble.n	800d714 <__hexnan+0xfc>
 800d706:	4544      	cmp	r4, r8
 800d708:	d9c3      	bls.n	800d692 <__hexnan+0x7a>
 800d70a:	2300      	movs	r3, #0
 800d70c:	f844 3c04 	str.w	r3, [r4, #-4]
 800d710:	2501      	movs	r5, #1
 800d712:	3c04      	subs	r4, #4
 800d714:	6822      	ldr	r2, [r4, #0]
 800d716:	f000 000f 	and.w	r0, r0, #15
 800d71a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d71e:	6020      	str	r0, [r4, #0]
 800d720:	e7b7      	b.n	800d692 <__hexnan+0x7a>
 800d722:	2508      	movs	r5, #8
 800d724:	e7b5      	b.n	800d692 <__hexnan+0x7a>
 800d726:	9b01      	ldr	r3, [sp, #4]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d0df      	beq.n	800d6ec <__hexnan+0xd4>
 800d72c:	f1c3 0320 	rsb	r3, r3, #32
 800d730:	f04f 32ff 	mov.w	r2, #4294967295
 800d734:	40da      	lsrs	r2, r3
 800d736:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d73a:	4013      	ands	r3, r2
 800d73c:	f846 3c04 	str.w	r3, [r6, #-4]
 800d740:	e7d4      	b.n	800d6ec <__hexnan+0xd4>
 800d742:	3f04      	subs	r7, #4
 800d744:	e7d2      	b.n	800d6ec <__hexnan+0xd4>
 800d746:	2004      	movs	r0, #4
 800d748:	b007      	add	sp, #28
 800d74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d74e <__ascii_mbtowc>:
 800d74e:	b082      	sub	sp, #8
 800d750:	b901      	cbnz	r1, 800d754 <__ascii_mbtowc+0x6>
 800d752:	a901      	add	r1, sp, #4
 800d754:	b142      	cbz	r2, 800d768 <__ascii_mbtowc+0x1a>
 800d756:	b14b      	cbz	r3, 800d76c <__ascii_mbtowc+0x1e>
 800d758:	7813      	ldrb	r3, [r2, #0]
 800d75a:	600b      	str	r3, [r1, #0]
 800d75c:	7812      	ldrb	r2, [r2, #0]
 800d75e:	1e10      	subs	r0, r2, #0
 800d760:	bf18      	it	ne
 800d762:	2001      	movne	r0, #1
 800d764:	b002      	add	sp, #8
 800d766:	4770      	bx	lr
 800d768:	4610      	mov	r0, r2
 800d76a:	e7fb      	b.n	800d764 <__ascii_mbtowc+0x16>
 800d76c:	f06f 0001 	mvn.w	r0, #1
 800d770:	e7f8      	b.n	800d764 <__ascii_mbtowc+0x16>

0800d772 <__ascii_wctomb>:
 800d772:	b149      	cbz	r1, 800d788 <__ascii_wctomb+0x16>
 800d774:	2aff      	cmp	r2, #255	; 0xff
 800d776:	bf85      	ittet	hi
 800d778:	238a      	movhi	r3, #138	; 0x8a
 800d77a:	6003      	strhi	r3, [r0, #0]
 800d77c:	700a      	strbls	r2, [r1, #0]
 800d77e:	f04f 30ff 	movhi.w	r0, #4294967295
 800d782:	bf98      	it	ls
 800d784:	2001      	movls	r0, #1
 800d786:	4770      	bx	lr
 800d788:	4608      	mov	r0, r1
 800d78a:	4770      	bx	lr

0800d78c <fiprintf>:
 800d78c:	b40e      	push	{r1, r2, r3}
 800d78e:	b503      	push	{r0, r1, lr}
 800d790:	4601      	mov	r1, r0
 800d792:	ab03      	add	r3, sp, #12
 800d794:	4805      	ldr	r0, [pc, #20]	; (800d7ac <fiprintf+0x20>)
 800d796:	f853 2b04 	ldr.w	r2, [r3], #4
 800d79a:	6800      	ldr	r0, [r0, #0]
 800d79c:	9301      	str	r3, [sp, #4]
 800d79e:	f000 f837 	bl	800d810 <_vfiprintf_r>
 800d7a2:	b002      	add	sp, #8
 800d7a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7a8:	b003      	add	sp, #12
 800d7aa:	4770      	bx	lr
 800d7ac:	20000c28 	.word	0x20000c28

0800d7b0 <abort>:
 800d7b0:	b508      	push	{r3, lr}
 800d7b2:	2006      	movs	r0, #6
 800d7b4:	f000 fa04 	bl	800dbc0 <raise>
 800d7b8:	2001      	movs	r0, #1
 800d7ba:	f7f4 f8e1 	bl	8001980 <_exit>

0800d7be <__sfputc_r>:
 800d7be:	6893      	ldr	r3, [r2, #8]
 800d7c0:	3b01      	subs	r3, #1
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	b410      	push	{r4}
 800d7c6:	6093      	str	r3, [r2, #8]
 800d7c8:	da08      	bge.n	800d7dc <__sfputc_r+0x1e>
 800d7ca:	6994      	ldr	r4, [r2, #24]
 800d7cc:	42a3      	cmp	r3, r4
 800d7ce:	db01      	blt.n	800d7d4 <__sfputc_r+0x16>
 800d7d0:	290a      	cmp	r1, #10
 800d7d2:	d103      	bne.n	800d7dc <__sfputc_r+0x1e>
 800d7d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7d8:	f000 b934 	b.w	800da44 <__swbuf_r>
 800d7dc:	6813      	ldr	r3, [r2, #0]
 800d7de:	1c58      	adds	r0, r3, #1
 800d7e0:	6010      	str	r0, [r2, #0]
 800d7e2:	7019      	strb	r1, [r3, #0]
 800d7e4:	4608      	mov	r0, r1
 800d7e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <__sfputs_r>:
 800d7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ee:	4606      	mov	r6, r0
 800d7f0:	460f      	mov	r7, r1
 800d7f2:	4614      	mov	r4, r2
 800d7f4:	18d5      	adds	r5, r2, r3
 800d7f6:	42ac      	cmp	r4, r5
 800d7f8:	d101      	bne.n	800d7fe <__sfputs_r+0x12>
 800d7fa:	2000      	movs	r0, #0
 800d7fc:	e007      	b.n	800d80e <__sfputs_r+0x22>
 800d7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d802:	463a      	mov	r2, r7
 800d804:	4630      	mov	r0, r6
 800d806:	f7ff ffda 	bl	800d7be <__sfputc_r>
 800d80a:	1c43      	adds	r3, r0, #1
 800d80c:	d1f3      	bne.n	800d7f6 <__sfputs_r+0xa>
 800d80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d810 <_vfiprintf_r>:
 800d810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d814:	460d      	mov	r5, r1
 800d816:	b09d      	sub	sp, #116	; 0x74
 800d818:	4614      	mov	r4, r2
 800d81a:	4698      	mov	r8, r3
 800d81c:	4606      	mov	r6, r0
 800d81e:	b118      	cbz	r0, 800d828 <_vfiprintf_r+0x18>
 800d820:	6a03      	ldr	r3, [r0, #32]
 800d822:	b90b      	cbnz	r3, 800d828 <_vfiprintf_r+0x18>
 800d824:	f7fc fe7a 	bl	800a51c <__sinit>
 800d828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d82a:	07d9      	lsls	r1, r3, #31
 800d82c:	d405      	bmi.n	800d83a <_vfiprintf_r+0x2a>
 800d82e:	89ab      	ldrh	r3, [r5, #12]
 800d830:	059a      	lsls	r2, r3, #22
 800d832:	d402      	bmi.n	800d83a <_vfiprintf_r+0x2a>
 800d834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d836:	f7fc ffb2 	bl	800a79e <__retarget_lock_acquire_recursive>
 800d83a:	89ab      	ldrh	r3, [r5, #12]
 800d83c:	071b      	lsls	r3, r3, #28
 800d83e:	d501      	bpl.n	800d844 <_vfiprintf_r+0x34>
 800d840:	692b      	ldr	r3, [r5, #16]
 800d842:	b99b      	cbnz	r3, 800d86c <_vfiprintf_r+0x5c>
 800d844:	4629      	mov	r1, r5
 800d846:	4630      	mov	r0, r6
 800d848:	f000 f93a 	bl	800dac0 <__swsetup_r>
 800d84c:	b170      	cbz	r0, 800d86c <_vfiprintf_r+0x5c>
 800d84e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d850:	07dc      	lsls	r4, r3, #31
 800d852:	d504      	bpl.n	800d85e <_vfiprintf_r+0x4e>
 800d854:	f04f 30ff 	mov.w	r0, #4294967295
 800d858:	b01d      	add	sp, #116	; 0x74
 800d85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d85e:	89ab      	ldrh	r3, [r5, #12]
 800d860:	0598      	lsls	r0, r3, #22
 800d862:	d4f7      	bmi.n	800d854 <_vfiprintf_r+0x44>
 800d864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d866:	f7fc ff9b 	bl	800a7a0 <__retarget_lock_release_recursive>
 800d86a:	e7f3      	b.n	800d854 <_vfiprintf_r+0x44>
 800d86c:	2300      	movs	r3, #0
 800d86e:	9309      	str	r3, [sp, #36]	; 0x24
 800d870:	2320      	movs	r3, #32
 800d872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d876:	f8cd 800c 	str.w	r8, [sp, #12]
 800d87a:	2330      	movs	r3, #48	; 0x30
 800d87c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800da30 <_vfiprintf_r+0x220>
 800d880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d884:	f04f 0901 	mov.w	r9, #1
 800d888:	4623      	mov	r3, r4
 800d88a:	469a      	mov	sl, r3
 800d88c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d890:	b10a      	cbz	r2, 800d896 <_vfiprintf_r+0x86>
 800d892:	2a25      	cmp	r2, #37	; 0x25
 800d894:	d1f9      	bne.n	800d88a <_vfiprintf_r+0x7a>
 800d896:	ebba 0b04 	subs.w	fp, sl, r4
 800d89a:	d00b      	beq.n	800d8b4 <_vfiprintf_r+0xa4>
 800d89c:	465b      	mov	r3, fp
 800d89e:	4622      	mov	r2, r4
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f7ff ffa2 	bl	800d7ec <__sfputs_r>
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	f000 80a9 	beq.w	800da00 <_vfiprintf_r+0x1f0>
 800d8ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8b0:	445a      	add	r2, fp
 800d8b2:	9209      	str	r2, [sp, #36]	; 0x24
 800d8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	f000 80a1 	beq.w	800da00 <_vfiprintf_r+0x1f0>
 800d8be:	2300      	movs	r3, #0
 800d8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8c8:	f10a 0a01 	add.w	sl, sl, #1
 800d8cc:	9304      	str	r3, [sp, #16]
 800d8ce:	9307      	str	r3, [sp, #28]
 800d8d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8d4:	931a      	str	r3, [sp, #104]	; 0x68
 800d8d6:	4654      	mov	r4, sl
 800d8d8:	2205      	movs	r2, #5
 800d8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8de:	4854      	ldr	r0, [pc, #336]	; (800da30 <_vfiprintf_r+0x220>)
 800d8e0:	f7f2 fc7e 	bl	80001e0 <memchr>
 800d8e4:	9a04      	ldr	r2, [sp, #16]
 800d8e6:	b9d8      	cbnz	r0, 800d920 <_vfiprintf_r+0x110>
 800d8e8:	06d1      	lsls	r1, r2, #27
 800d8ea:	bf44      	itt	mi
 800d8ec:	2320      	movmi	r3, #32
 800d8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8f2:	0713      	lsls	r3, r2, #28
 800d8f4:	bf44      	itt	mi
 800d8f6:	232b      	movmi	r3, #43	; 0x2b
 800d8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d900:	2b2a      	cmp	r3, #42	; 0x2a
 800d902:	d015      	beq.n	800d930 <_vfiprintf_r+0x120>
 800d904:	9a07      	ldr	r2, [sp, #28]
 800d906:	4654      	mov	r4, sl
 800d908:	2000      	movs	r0, #0
 800d90a:	f04f 0c0a 	mov.w	ip, #10
 800d90e:	4621      	mov	r1, r4
 800d910:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d914:	3b30      	subs	r3, #48	; 0x30
 800d916:	2b09      	cmp	r3, #9
 800d918:	d94d      	bls.n	800d9b6 <_vfiprintf_r+0x1a6>
 800d91a:	b1b0      	cbz	r0, 800d94a <_vfiprintf_r+0x13a>
 800d91c:	9207      	str	r2, [sp, #28]
 800d91e:	e014      	b.n	800d94a <_vfiprintf_r+0x13a>
 800d920:	eba0 0308 	sub.w	r3, r0, r8
 800d924:	fa09 f303 	lsl.w	r3, r9, r3
 800d928:	4313      	orrs	r3, r2
 800d92a:	9304      	str	r3, [sp, #16]
 800d92c:	46a2      	mov	sl, r4
 800d92e:	e7d2      	b.n	800d8d6 <_vfiprintf_r+0xc6>
 800d930:	9b03      	ldr	r3, [sp, #12]
 800d932:	1d19      	adds	r1, r3, #4
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	9103      	str	r1, [sp, #12]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	bfbb      	ittet	lt
 800d93c:	425b      	neglt	r3, r3
 800d93e:	f042 0202 	orrlt.w	r2, r2, #2
 800d942:	9307      	strge	r3, [sp, #28]
 800d944:	9307      	strlt	r3, [sp, #28]
 800d946:	bfb8      	it	lt
 800d948:	9204      	strlt	r2, [sp, #16]
 800d94a:	7823      	ldrb	r3, [r4, #0]
 800d94c:	2b2e      	cmp	r3, #46	; 0x2e
 800d94e:	d10c      	bne.n	800d96a <_vfiprintf_r+0x15a>
 800d950:	7863      	ldrb	r3, [r4, #1]
 800d952:	2b2a      	cmp	r3, #42	; 0x2a
 800d954:	d134      	bne.n	800d9c0 <_vfiprintf_r+0x1b0>
 800d956:	9b03      	ldr	r3, [sp, #12]
 800d958:	1d1a      	adds	r2, r3, #4
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	9203      	str	r2, [sp, #12]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	bfb8      	it	lt
 800d962:	f04f 33ff 	movlt.w	r3, #4294967295
 800d966:	3402      	adds	r4, #2
 800d968:	9305      	str	r3, [sp, #20]
 800d96a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800da40 <_vfiprintf_r+0x230>
 800d96e:	7821      	ldrb	r1, [r4, #0]
 800d970:	2203      	movs	r2, #3
 800d972:	4650      	mov	r0, sl
 800d974:	f7f2 fc34 	bl	80001e0 <memchr>
 800d978:	b138      	cbz	r0, 800d98a <_vfiprintf_r+0x17a>
 800d97a:	9b04      	ldr	r3, [sp, #16]
 800d97c:	eba0 000a 	sub.w	r0, r0, sl
 800d980:	2240      	movs	r2, #64	; 0x40
 800d982:	4082      	lsls	r2, r0
 800d984:	4313      	orrs	r3, r2
 800d986:	3401      	adds	r4, #1
 800d988:	9304      	str	r3, [sp, #16]
 800d98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d98e:	4829      	ldr	r0, [pc, #164]	; (800da34 <_vfiprintf_r+0x224>)
 800d990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d994:	2206      	movs	r2, #6
 800d996:	f7f2 fc23 	bl	80001e0 <memchr>
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d03f      	beq.n	800da1e <_vfiprintf_r+0x20e>
 800d99e:	4b26      	ldr	r3, [pc, #152]	; (800da38 <_vfiprintf_r+0x228>)
 800d9a0:	bb1b      	cbnz	r3, 800d9ea <_vfiprintf_r+0x1da>
 800d9a2:	9b03      	ldr	r3, [sp, #12]
 800d9a4:	3307      	adds	r3, #7
 800d9a6:	f023 0307 	bic.w	r3, r3, #7
 800d9aa:	3308      	adds	r3, #8
 800d9ac:	9303      	str	r3, [sp, #12]
 800d9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9b0:	443b      	add	r3, r7
 800d9b2:	9309      	str	r3, [sp, #36]	; 0x24
 800d9b4:	e768      	b.n	800d888 <_vfiprintf_r+0x78>
 800d9b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9ba:	460c      	mov	r4, r1
 800d9bc:	2001      	movs	r0, #1
 800d9be:	e7a6      	b.n	800d90e <_vfiprintf_r+0xfe>
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	3401      	adds	r4, #1
 800d9c4:	9305      	str	r3, [sp, #20]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	f04f 0c0a 	mov.w	ip, #10
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9d2:	3a30      	subs	r2, #48	; 0x30
 800d9d4:	2a09      	cmp	r2, #9
 800d9d6:	d903      	bls.n	800d9e0 <_vfiprintf_r+0x1d0>
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d0c6      	beq.n	800d96a <_vfiprintf_r+0x15a>
 800d9dc:	9105      	str	r1, [sp, #20]
 800d9de:	e7c4      	b.n	800d96a <_vfiprintf_r+0x15a>
 800d9e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	e7f0      	b.n	800d9cc <_vfiprintf_r+0x1bc>
 800d9ea:	ab03      	add	r3, sp, #12
 800d9ec:	9300      	str	r3, [sp, #0]
 800d9ee:	462a      	mov	r2, r5
 800d9f0:	4b12      	ldr	r3, [pc, #72]	; (800da3c <_vfiprintf_r+0x22c>)
 800d9f2:	a904      	add	r1, sp, #16
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	f7fb ff2f 	bl	8009858 <_printf_float>
 800d9fa:	4607      	mov	r7, r0
 800d9fc:	1c78      	adds	r0, r7, #1
 800d9fe:	d1d6      	bne.n	800d9ae <_vfiprintf_r+0x19e>
 800da00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da02:	07d9      	lsls	r1, r3, #31
 800da04:	d405      	bmi.n	800da12 <_vfiprintf_r+0x202>
 800da06:	89ab      	ldrh	r3, [r5, #12]
 800da08:	059a      	lsls	r2, r3, #22
 800da0a:	d402      	bmi.n	800da12 <_vfiprintf_r+0x202>
 800da0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da0e:	f7fc fec7 	bl	800a7a0 <__retarget_lock_release_recursive>
 800da12:	89ab      	ldrh	r3, [r5, #12]
 800da14:	065b      	lsls	r3, r3, #25
 800da16:	f53f af1d 	bmi.w	800d854 <_vfiprintf_r+0x44>
 800da1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da1c:	e71c      	b.n	800d858 <_vfiprintf_r+0x48>
 800da1e:	ab03      	add	r3, sp, #12
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	462a      	mov	r2, r5
 800da24:	4b05      	ldr	r3, [pc, #20]	; (800da3c <_vfiprintf_r+0x22c>)
 800da26:	a904      	add	r1, sp, #16
 800da28:	4630      	mov	r0, r6
 800da2a:	f7fc f9b9 	bl	8009da0 <_printf_i>
 800da2e:	e7e4      	b.n	800d9fa <_vfiprintf_r+0x1ea>
 800da30:	08017011 	.word	0x08017011
 800da34:	0801701b 	.word	0x0801701b
 800da38:	08009859 	.word	0x08009859
 800da3c:	0800d7ed 	.word	0x0800d7ed
 800da40:	08017017 	.word	0x08017017

0800da44 <__swbuf_r>:
 800da44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da46:	460e      	mov	r6, r1
 800da48:	4614      	mov	r4, r2
 800da4a:	4605      	mov	r5, r0
 800da4c:	b118      	cbz	r0, 800da56 <__swbuf_r+0x12>
 800da4e:	6a03      	ldr	r3, [r0, #32]
 800da50:	b90b      	cbnz	r3, 800da56 <__swbuf_r+0x12>
 800da52:	f7fc fd63 	bl	800a51c <__sinit>
 800da56:	69a3      	ldr	r3, [r4, #24]
 800da58:	60a3      	str	r3, [r4, #8]
 800da5a:	89a3      	ldrh	r3, [r4, #12]
 800da5c:	071a      	lsls	r2, r3, #28
 800da5e:	d525      	bpl.n	800daac <__swbuf_r+0x68>
 800da60:	6923      	ldr	r3, [r4, #16]
 800da62:	b31b      	cbz	r3, 800daac <__swbuf_r+0x68>
 800da64:	6823      	ldr	r3, [r4, #0]
 800da66:	6922      	ldr	r2, [r4, #16]
 800da68:	1a98      	subs	r0, r3, r2
 800da6a:	6963      	ldr	r3, [r4, #20]
 800da6c:	b2f6      	uxtb	r6, r6
 800da6e:	4283      	cmp	r3, r0
 800da70:	4637      	mov	r7, r6
 800da72:	dc04      	bgt.n	800da7e <__swbuf_r+0x3a>
 800da74:	4621      	mov	r1, r4
 800da76:	4628      	mov	r0, r5
 800da78:	f7ff fa9a 	bl	800cfb0 <_fflush_r>
 800da7c:	b9e0      	cbnz	r0, 800dab8 <__swbuf_r+0x74>
 800da7e:	68a3      	ldr	r3, [r4, #8]
 800da80:	3b01      	subs	r3, #1
 800da82:	60a3      	str	r3, [r4, #8]
 800da84:	6823      	ldr	r3, [r4, #0]
 800da86:	1c5a      	adds	r2, r3, #1
 800da88:	6022      	str	r2, [r4, #0]
 800da8a:	701e      	strb	r6, [r3, #0]
 800da8c:	6962      	ldr	r2, [r4, #20]
 800da8e:	1c43      	adds	r3, r0, #1
 800da90:	429a      	cmp	r2, r3
 800da92:	d004      	beq.n	800da9e <__swbuf_r+0x5a>
 800da94:	89a3      	ldrh	r3, [r4, #12]
 800da96:	07db      	lsls	r3, r3, #31
 800da98:	d506      	bpl.n	800daa8 <__swbuf_r+0x64>
 800da9a:	2e0a      	cmp	r6, #10
 800da9c:	d104      	bne.n	800daa8 <__swbuf_r+0x64>
 800da9e:	4621      	mov	r1, r4
 800daa0:	4628      	mov	r0, r5
 800daa2:	f7ff fa85 	bl	800cfb0 <_fflush_r>
 800daa6:	b938      	cbnz	r0, 800dab8 <__swbuf_r+0x74>
 800daa8:	4638      	mov	r0, r7
 800daaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daac:	4621      	mov	r1, r4
 800daae:	4628      	mov	r0, r5
 800dab0:	f000 f806 	bl	800dac0 <__swsetup_r>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d0d5      	beq.n	800da64 <__swbuf_r+0x20>
 800dab8:	f04f 37ff 	mov.w	r7, #4294967295
 800dabc:	e7f4      	b.n	800daa8 <__swbuf_r+0x64>
	...

0800dac0 <__swsetup_r>:
 800dac0:	b538      	push	{r3, r4, r5, lr}
 800dac2:	4b2a      	ldr	r3, [pc, #168]	; (800db6c <__swsetup_r+0xac>)
 800dac4:	4605      	mov	r5, r0
 800dac6:	6818      	ldr	r0, [r3, #0]
 800dac8:	460c      	mov	r4, r1
 800daca:	b118      	cbz	r0, 800dad4 <__swsetup_r+0x14>
 800dacc:	6a03      	ldr	r3, [r0, #32]
 800dace:	b90b      	cbnz	r3, 800dad4 <__swsetup_r+0x14>
 800dad0:	f7fc fd24 	bl	800a51c <__sinit>
 800dad4:	89a3      	ldrh	r3, [r4, #12]
 800dad6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dada:	0718      	lsls	r0, r3, #28
 800dadc:	d422      	bmi.n	800db24 <__swsetup_r+0x64>
 800dade:	06d9      	lsls	r1, r3, #27
 800dae0:	d407      	bmi.n	800daf2 <__swsetup_r+0x32>
 800dae2:	2309      	movs	r3, #9
 800dae4:	602b      	str	r3, [r5, #0]
 800dae6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800daea:	81a3      	strh	r3, [r4, #12]
 800daec:	f04f 30ff 	mov.w	r0, #4294967295
 800daf0:	e034      	b.n	800db5c <__swsetup_r+0x9c>
 800daf2:	0758      	lsls	r0, r3, #29
 800daf4:	d512      	bpl.n	800db1c <__swsetup_r+0x5c>
 800daf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800daf8:	b141      	cbz	r1, 800db0c <__swsetup_r+0x4c>
 800dafa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dafe:	4299      	cmp	r1, r3
 800db00:	d002      	beq.n	800db08 <__swsetup_r+0x48>
 800db02:	4628      	mov	r0, r5
 800db04:	f7fd fcde 	bl	800b4c4 <_free_r>
 800db08:	2300      	movs	r3, #0
 800db0a:	6363      	str	r3, [r4, #52]	; 0x34
 800db0c:	89a3      	ldrh	r3, [r4, #12]
 800db0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db12:	81a3      	strh	r3, [r4, #12]
 800db14:	2300      	movs	r3, #0
 800db16:	6063      	str	r3, [r4, #4]
 800db18:	6923      	ldr	r3, [r4, #16]
 800db1a:	6023      	str	r3, [r4, #0]
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	f043 0308 	orr.w	r3, r3, #8
 800db22:	81a3      	strh	r3, [r4, #12]
 800db24:	6923      	ldr	r3, [r4, #16]
 800db26:	b94b      	cbnz	r3, 800db3c <__swsetup_r+0x7c>
 800db28:	89a3      	ldrh	r3, [r4, #12]
 800db2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db32:	d003      	beq.n	800db3c <__swsetup_r+0x7c>
 800db34:	4621      	mov	r1, r4
 800db36:	4628      	mov	r0, r5
 800db38:	f000 f884 	bl	800dc44 <__smakebuf_r>
 800db3c:	89a0      	ldrh	r0, [r4, #12]
 800db3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db42:	f010 0301 	ands.w	r3, r0, #1
 800db46:	d00a      	beq.n	800db5e <__swsetup_r+0x9e>
 800db48:	2300      	movs	r3, #0
 800db4a:	60a3      	str	r3, [r4, #8]
 800db4c:	6963      	ldr	r3, [r4, #20]
 800db4e:	425b      	negs	r3, r3
 800db50:	61a3      	str	r3, [r4, #24]
 800db52:	6923      	ldr	r3, [r4, #16]
 800db54:	b943      	cbnz	r3, 800db68 <__swsetup_r+0xa8>
 800db56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db5a:	d1c4      	bne.n	800dae6 <__swsetup_r+0x26>
 800db5c:	bd38      	pop	{r3, r4, r5, pc}
 800db5e:	0781      	lsls	r1, r0, #30
 800db60:	bf58      	it	pl
 800db62:	6963      	ldrpl	r3, [r4, #20]
 800db64:	60a3      	str	r3, [r4, #8]
 800db66:	e7f4      	b.n	800db52 <__swsetup_r+0x92>
 800db68:	2000      	movs	r0, #0
 800db6a:	e7f7      	b.n	800db5c <__swsetup_r+0x9c>
 800db6c:	20000c28 	.word	0x20000c28

0800db70 <_raise_r>:
 800db70:	291f      	cmp	r1, #31
 800db72:	b538      	push	{r3, r4, r5, lr}
 800db74:	4604      	mov	r4, r0
 800db76:	460d      	mov	r5, r1
 800db78:	d904      	bls.n	800db84 <_raise_r+0x14>
 800db7a:	2316      	movs	r3, #22
 800db7c:	6003      	str	r3, [r0, #0]
 800db7e:	f04f 30ff 	mov.w	r0, #4294967295
 800db82:	bd38      	pop	{r3, r4, r5, pc}
 800db84:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800db86:	b112      	cbz	r2, 800db8e <_raise_r+0x1e>
 800db88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db8c:	b94b      	cbnz	r3, 800dba2 <_raise_r+0x32>
 800db8e:	4620      	mov	r0, r4
 800db90:	f000 f830 	bl	800dbf4 <_getpid_r>
 800db94:	462a      	mov	r2, r5
 800db96:	4601      	mov	r1, r0
 800db98:	4620      	mov	r0, r4
 800db9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db9e:	f000 b817 	b.w	800dbd0 <_kill_r>
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d00a      	beq.n	800dbbc <_raise_r+0x4c>
 800dba6:	1c59      	adds	r1, r3, #1
 800dba8:	d103      	bne.n	800dbb2 <_raise_r+0x42>
 800dbaa:	2316      	movs	r3, #22
 800dbac:	6003      	str	r3, [r0, #0]
 800dbae:	2001      	movs	r0, #1
 800dbb0:	e7e7      	b.n	800db82 <_raise_r+0x12>
 800dbb2:	2400      	movs	r4, #0
 800dbb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dbb8:	4628      	mov	r0, r5
 800dbba:	4798      	blx	r3
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	e7e0      	b.n	800db82 <_raise_r+0x12>

0800dbc0 <raise>:
 800dbc0:	4b02      	ldr	r3, [pc, #8]	; (800dbcc <raise+0xc>)
 800dbc2:	4601      	mov	r1, r0
 800dbc4:	6818      	ldr	r0, [r3, #0]
 800dbc6:	f7ff bfd3 	b.w	800db70 <_raise_r>
 800dbca:	bf00      	nop
 800dbcc:	20000c28 	.word	0x20000c28

0800dbd0 <_kill_r>:
 800dbd0:	b538      	push	{r3, r4, r5, lr}
 800dbd2:	4d07      	ldr	r5, [pc, #28]	; (800dbf0 <_kill_r+0x20>)
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	4604      	mov	r4, r0
 800dbd8:	4608      	mov	r0, r1
 800dbda:	4611      	mov	r1, r2
 800dbdc:	602b      	str	r3, [r5, #0]
 800dbde:	f7f3 febf 	bl	8001960 <_kill>
 800dbe2:	1c43      	adds	r3, r0, #1
 800dbe4:	d102      	bne.n	800dbec <_kill_r+0x1c>
 800dbe6:	682b      	ldr	r3, [r5, #0]
 800dbe8:	b103      	cbz	r3, 800dbec <_kill_r+0x1c>
 800dbea:	6023      	str	r3, [r4, #0]
 800dbec:	bd38      	pop	{r3, r4, r5, pc}
 800dbee:	bf00      	nop
 800dbf0:	20013aa4 	.word	0x20013aa4

0800dbf4 <_getpid_r>:
 800dbf4:	f7f3 beac 	b.w	8001950 <_getpid>

0800dbf8 <__swhatbuf_r>:
 800dbf8:	b570      	push	{r4, r5, r6, lr}
 800dbfa:	460c      	mov	r4, r1
 800dbfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc00:	2900      	cmp	r1, #0
 800dc02:	b096      	sub	sp, #88	; 0x58
 800dc04:	4615      	mov	r5, r2
 800dc06:	461e      	mov	r6, r3
 800dc08:	da0d      	bge.n	800dc26 <__swhatbuf_r+0x2e>
 800dc0a:	89a3      	ldrh	r3, [r4, #12]
 800dc0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dc10:	f04f 0100 	mov.w	r1, #0
 800dc14:	bf0c      	ite	eq
 800dc16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dc1a:	2340      	movne	r3, #64	; 0x40
 800dc1c:	2000      	movs	r0, #0
 800dc1e:	6031      	str	r1, [r6, #0]
 800dc20:	602b      	str	r3, [r5, #0]
 800dc22:	b016      	add	sp, #88	; 0x58
 800dc24:	bd70      	pop	{r4, r5, r6, pc}
 800dc26:	466a      	mov	r2, sp
 800dc28:	f000 f848 	bl	800dcbc <_fstat_r>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	dbec      	blt.n	800dc0a <__swhatbuf_r+0x12>
 800dc30:	9901      	ldr	r1, [sp, #4]
 800dc32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dc36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dc3a:	4259      	negs	r1, r3
 800dc3c:	4159      	adcs	r1, r3
 800dc3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc42:	e7eb      	b.n	800dc1c <__swhatbuf_r+0x24>

0800dc44 <__smakebuf_r>:
 800dc44:	898b      	ldrh	r3, [r1, #12]
 800dc46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc48:	079d      	lsls	r5, r3, #30
 800dc4a:	4606      	mov	r6, r0
 800dc4c:	460c      	mov	r4, r1
 800dc4e:	d507      	bpl.n	800dc60 <__smakebuf_r+0x1c>
 800dc50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc54:	6023      	str	r3, [r4, #0]
 800dc56:	6123      	str	r3, [r4, #16]
 800dc58:	2301      	movs	r3, #1
 800dc5a:	6163      	str	r3, [r4, #20]
 800dc5c:	b002      	add	sp, #8
 800dc5e:	bd70      	pop	{r4, r5, r6, pc}
 800dc60:	ab01      	add	r3, sp, #4
 800dc62:	466a      	mov	r2, sp
 800dc64:	f7ff ffc8 	bl	800dbf8 <__swhatbuf_r>
 800dc68:	9900      	ldr	r1, [sp, #0]
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	4630      	mov	r0, r6
 800dc6e:	f7fb fc97 	bl	80095a0 <_malloc_r>
 800dc72:	b948      	cbnz	r0, 800dc88 <__smakebuf_r+0x44>
 800dc74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc78:	059a      	lsls	r2, r3, #22
 800dc7a:	d4ef      	bmi.n	800dc5c <__smakebuf_r+0x18>
 800dc7c:	f023 0303 	bic.w	r3, r3, #3
 800dc80:	f043 0302 	orr.w	r3, r3, #2
 800dc84:	81a3      	strh	r3, [r4, #12]
 800dc86:	e7e3      	b.n	800dc50 <__smakebuf_r+0xc>
 800dc88:	89a3      	ldrh	r3, [r4, #12]
 800dc8a:	6020      	str	r0, [r4, #0]
 800dc8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc90:	81a3      	strh	r3, [r4, #12]
 800dc92:	9b00      	ldr	r3, [sp, #0]
 800dc94:	6163      	str	r3, [r4, #20]
 800dc96:	9b01      	ldr	r3, [sp, #4]
 800dc98:	6120      	str	r0, [r4, #16]
 800dc9a:	b15b      	cbz	r3, 800dcb4 <__smakebuf_r+0x70>
 800dc9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dca0:	4630      	mov	r0, r6
 800dca2:	f000 f81d 	bl	800dce0 <_isatty_r>
 800dca6:	b128      	cbz	r0, 800dcb4 <__smakebuf_r+0x70>
 800dca8:	89a3      	ldrh	r3, [r4, #12]
 800dcaa:	f023 0303 	bic.w	r3, r3, #3
 800dcae:	f043 0301 	orr.w	r3, r3, #1
 800dcb2:	81a3      	strh	r3, [r4, #12]
 800dcb4:	89a3      	ldrh	r3, [r4, #12]
 800dcb6:	431d      	orrs	r5, r3
 800dcb8:	81a5      	strh	r5, [r4, #12]
 800dcba:	e7cf      	b.n	800dc5c <__smakebuf_r+0x18>

0800dcbc <_fstat_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4d07      	ldr	r5, [pc, #28]	; (800dcdc <_fstat_r+0x20>)
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	4608      	mov	r0, r1
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	602b      	str	r3, [r5, #0]
 800dcca:	f7f3 fea8 	bl	8001a1e <_fstat>
 800dcce:	1c43      	adds	r3, r0, #1
 800dcd0:	d102      	bne.n	800dcd8 <_fstat_r+0x1c>
 800dcd2:	682b      	ldr	r3, [r5, #0]
 800dcd4:	b103      	cbz	r3, 800dcd8 <_fstat_r+0x1c>
 800dcd6:	6023      	str	r3, [r4, #0]
 800dcd8:	bd38      	pop	{r3, r4, r5, pc}
 800dcda:	bf00      	nop
 800dcdc:	20013aa4 	.word	0x20013aa4

0800dce0 <_isatty_r>:
 800dce0:	b538      	push	{r3, r4, r5, lr}
 800dce2:	4d06      	ldr	r5, [pc, #24]	; (800dcfc <_isatty_r+0x1c>)
 800dce4:	2300      	movs	r3, #0
 800dce6:	4604      	mov	r4, r0
 800dce8:	4608      	mov	r0, r1
 800dcea:	602b      	str	r3, [r5, #0]
 800dcec:	f7f3 fea7 	bl	8001a3e <_isatty>
 800dcf0:	1c43      	adds	r3, r0, #1
 800dcf2:	d102      	bne.n	800dcfa <_isatty_r+0x1a>
 800dcf4:	682b      	ldr	r3, [r5, #0]
 800dcf6:	b103      	cbz	r3, 800dcfa <_isatty_r+0x1a>
 800dcf8:	6023      	str	r3, [r4, #0]
 800dcfa:	bd38      	pop	{r3, r4, r5, pc}
 800dcfc:	20013aa4 	.word	0x20013aa4

0800dd00 <expf>:
 800dd00:	b508      	push	{r3, lr}
 800dd02:	ed2d 8b02 	vpush	{d8}
 800dd06:	eef0 8a40 	vmov.f32	s17, s0
 800dd0a:	f000 f8a5 	bl	800de58 <__ieee754_expf>
 800dd0e:	eeb0 8a40 	vmov.f32	s16, s0
 800dd12:	eeb0 0a68 	vmov.f32	s0, s17
 800dd16:	f000 f847 	bl	800dda8 <finitef>
 800dd1a:	b160      	cbz	r0, 800dd36 <expf+0x36>
 800dd1c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800dd5c <expf+0x5c>
 800dd20:	eef4 8ae7 	vcmpe.f32	s17, s15
 800dd24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd28:	dd0a      	ble.n	800dd40 <expf+0x40>
 800dd2a:	f7fc fd0d 	bl	800a748 <__errno>
 800dd2e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800dd60 <expf+0x60>
 800dd32:	2322      	movs	r3, #34	; 0x22
 800dd34:	6003      	str	r3, [r0, #0]
 800dd36:	eeb0 0a48 	vmov.f32	s0, s16
 800dd3a:	ecbd 8b02 	vpop	{d8}
 800dd3e:	bd08      	pop	{r3, pc}
 800dd40:	eddf 7a08 	vldr	s15, [pc, #32]	; 800dd64 <expf+0x64>
 800dd44:	eef4 8ae7 	vcmpe.f32	s17, s15
 800dd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd4c:	d5f3      	bpl.n	800dd36 <expf+0x36>
 800dd4e:	f7fc fcfb 	bl	800a748 <__errno>
 800dd52:	2322      	movs	r3, #34	; 0x22
 800dd54:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800dd68 <expf+0x68>
 800dd58:	6003      	str	r3, [r0, #0]
 800dd5a:	e7ec      	b.n	800dd36 <expf+0x36>
 800dd5c:	42b17217 	.word	0x42b17217
 800dd60:	7f800000 	.word	0x7f800000
 800dd64:	c2cff1b5 	.word	0xc2cff1b5
 800dd68:	00000000 	.word	0x00000000

0800dd6c <sqrtf>:
 800dd6c:	b508      	push	{r3, lr}
 800dd6e:	ed2d 8b02 	vpush	{d8}
 800dd72:	eeb0 8a40 	vmov.f32	s16, s0
 800dd76:	f000 f847 	bl	800de08 <__ieee754_sqrtf>
 800dd7a:	eeb4 8a48 	vcmp.f32	s16, s16
 800dd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd82:	d60c      	bvs.n	800dd9e <sqrtf+0x32>
 800dd84:	eddf 8a07 	vldr	s17, [pc, #28]	; 800dda4 <sqrtf+0x38>
 800dd88:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd90:	d505      	bpl.n	800dd9e <sqrtf+0x32>
 800dd92:	f7fc fcd9 	bl	800a748 <__errno>
 800dd96:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800dd9a:	2321      	movs	r3, #33	; 0x21
 800dd9c:	6003      	str	r3, [r0, #0]
 800dd9e:	ecbd 8b02 	vpop	{d8}
 800dda2:	bd08      	pop	{r3, pc}
 800dda4:	00000000 	.word	0x00000000

0800dda8 <finitef>:
 800dda8:	b082      	sub	sp, #8
 800ddaa:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ddae:	9801      	ldr	r0, [sp, #4]
 800ddb0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ddb4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ddb8:	bfac      	ite	ge
 800ddba:	2000      	movge	r0, #0
 800ddbc:	2001      	movlt	r0, #1
 800ddbe:	b002      	add	sp, #8
 800ddc0:	4770      	bx	lr

0800ddc2 <with_errnof>:
 800ddc2:	b513      	push	{r0, r1, r4, lr}
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ddca:	f7fc fcbd 	bl	800a748 <__errno>
 800ddce:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ddd2:	6004      	str	r4, [r0, #0]
 800ddd4:	b002      	add	sp, #8
 800ddd6:	bd10      	pop	{r4, pc}

0800ddd8 <xflowf>:
 800ddd8:	b130      	cbz	r0, 800dde8 <xflowf+0x10>
 800ddda:	eef1 7a40 	vneg.f32	s15, s0
 800ddde:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dde2:	2022      	movs	r0, #34	; 0x22
 800dde4:	f7ff bfed 	b.w	800ddc2 <with_errnof>
 800dde8:	eef0 7a40 	vmov.f32	s15, s0
 800ddec:	e7f7      	b.n	800ddde <xflowf+0x6>
	...

0800ddf0 <__math_uflowf>:
 800ddf0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ddf8 <__math_uflowf+0x8>
 800ddf4:	f7ff bff0 	b.w	800ddd8 <xflowf>
 800ddf8:	10000000 	.word	0x10000000

0800ddfc <__math_oflowf>:
 800ddfc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800de04 <__math_oflowf+0x8>
 800de00:	f7ff bfea 	b.w	800ddd8 <xflowf>
 800de04:	70000000 	.word	0x70000000

0800de08 <__ieee754_sqrtf>:
 800de08:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800de0c:	4770      	bx	lr
	...

0800de10 <roundf>:
 800de10:	ee10 0a10 	vmov	r0, s0
 800de14:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800de18:	3a7f      	subs	r2, #127	; 0x7f
 800de1a:	2a16      	cmp	r2, #22
 800de1c:	dc15      	bgt.n	800de4a <roundf+0x3a>
 800de1e:	2a00      	cmp	r2, #0
 800de20:	da08      	bge.n	800de34 <roundf+0x24>
 800de22:	3201      	adds	r2, #1
 800de24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800de28:	d101      	bne.n	800de2e <roundf+0x1e>
 800de2a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800de2e:	ee00 3a10 	vmov	s0, r3
 800de32:	4770      	bx	lr
 800de34:	4907      	ldr	r1, [pc, #28]	; (800de54 <roundf+0x44>)
 800de36:	4111      	asrs	r1, r2
 800de38:	4208      	tst	r0, r1
 800de3a:	d0fa      	beq.n	800de32 <roundf+0x22>
 800de3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800de40:	4113      	asrs	r3, r2
 800de42:	4403      	add	r3, r0
 800de44:	ea23 0301 	bic.w	r3, r3, r1
 800de48:	e7f1      	b.n	800de2e <roundf+0x1e>
 800de4a:	2a80      	cmp	r2, #128	; 0x80
 800de4c:	d1f1      	bne.n	800de32 <roundf+0x22>
 800de4e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800de52:	4770      	bx	lr
 800de54:	007fffff 	.word	0x007fffff

0800de58 <__ieee754_expf>:
 800de58:	ee10 2a10 	vmov	r2, s0
 800de5c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800de60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800de64:	d902      	bls.n	800de6c <__ieee754_expf+0x14>
 800de66:	ee30 0a00 	vadd.f32	s0, s0, s0
 800de6a:	4770      	bx	lr
 800de6c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800de70:	d106      	bne.n	800de80 <__ieee754_expf+0x28>
 800de72:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800dfac <__ieee754_expf+0x154>
 800de76:	2900      	cmp	r1, #0
 800de78:	bf18      	it	ne
 800de7a:	eeb0 0a67 	vmovne.f32	s0, s15
 800de7e:	4770      	bx	lr
 800de80:	484b      	ldr	r0, [pc, #300]	; (800dfb0 <__ieee754_expf+0x158>)
 800de82:	4282      	cmp	r2, r0
 800de84:	dd02      	ble.n	800de8c <__ieee754_expf+0x34>
 800de86:	2000      	movs	r0, #0
 800de88:	f7ff bfb8 	b.w	800ddfc <__math_oflowf>
 800de8c:	2a00      	cmp	r2, #0
 800de8e:	da05      	bge.n	800de9c <__ieee754_expf+0x44>
 800de90:	4a48      	ldr	r2, [pc, #288]	; (800dfb4 <__ieee754_expf+0x15c>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d902      	bls.n	800de9c <__ieee754_expf+0x44>
 800de96:	2000      	movs	r0, #0
 800de98:	f7ff bfaa 	b.w	800ddf0 <__math_uflowf>
 800de9c:	4a46      	ldr	r2, [pc, #280]	; (800dfb8 <__ieee754_expf+0x160>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800dea4:	d952      	bls.n	800df4c <__ieee754_expf+0xf4>
 800dea6:	4a45      	ldr	r2, [pc, #276]	; (800dfbc <__ieee754_expf+0x164>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800deae:	d834      	bhi.n	800df1a <__ieee754_expf+0xc2>
 800deb0:	4b43      	ldr	r3, [pc, #268]	; (800dfc0 <__ieee754_expf+0x168>)
 800deb2:	4413      	add	r3, r2
 800deb4:	ed93 7a00 	vldr	s14, [r3]
 800deb8:	4b42      	ldr	r3, [pc, #264]	; (800dfc4 <__ieee754_expf+0x16c>)
 800deba:	4413      	add	r3, r2
 800debc:	ee30 7a47 	vsub.f32	s14, s0, s14
 800dec0:	f1c1 0201 	rsb	r2, r1, #1
 800dec4:	edd3 7a00 	vldr	s15, [r3]
 800dec8:	1a52      	subs	r2, r2, r1
 800deca:	ee37 0a67 	vsub.f32	s0, s14, s15
 800dece:	ee20 6a00 	vmul.f32	s12, s0, s0
 800ded2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800dfc8 <__ieee754_expf+0x170>
 800ded6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dfcc <__ieee754_expf+0x174>
 800deda:	eee6 6a05 	vfma.f32	s13, s12, s10
 800dede:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800dfd0 <__ieee754_expf+0x178>
 800dee2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800dee6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800dfd4 <__ieee754_expf+0x17c>
 800deea:	eee5 6a06 	vfma.f32	s13, s10, s12
 800deee:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800dfd8 <__ieee754_expf+0x180>
 800def2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800def6:	eef0 6a40 	vmov.f32	s13, s0
 800defa:	eee5 6a46 	vfms.f32	s13, s10, s12
 800defe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800df02:	ee20 5a26 	vmul.f32	s10, s0, s13
 800df06:	bb92      	cbnz	r2, 800df6e <__ieee754_expf+0x116>
 800df08:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800df0c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800df10:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800df14:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800df18:	4770      	bx	lr
 800df1a:	4b30      	ldr	r3, [pc, #192]	; (800dfdc <__ieee754_expf+0x184>)
 800df1c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800dfe0 <__ieee754_expf+0x188>
 800df20:	eddf 6a30 	vldr	s13, [pc, #192]	; 800dfe4 <__ieee754_expf+0x18c>
 800df24:	4413      	add	r3, r2
 800df26:	edd3 7a00 	vldr	s15, [r3]
 800df2a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800df2e:	eeb0 7a40 	vmov.f32	s14, s0
 800df32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df36:	ee17 2a90 	vmov	r2, s15
 800df3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df3e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800df42:	eddf 6a29 	vldr	s13, [pc, #164]	; 800dfe8 <__ieee754_expf+0x190>
 800df46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800df4a:	e7be      	b.n	800deca <__ieee754_expf+0x72>
 800df4c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800df50:	d20b      	bcs.n	800df6a <__ieee754_expf+0x112>
 800df52:	eddf 6a26 	vldr	s13, [pc, #152]	; 800dfec <__ieee754_expf+0x194>
 800df56:	ee70 6a26 	vadd.f32	s13, s0, s13
 800df5a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800df5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df62:	dd02      	ble.n	800df6a <__ieee754_expf+0x112>
 800df64:	ee30 0a25 	vadd.f32	s0, s0, s11
 800df68:	4770      	bx	lr
 800df6a:	2200      	movs	r2, #0
 800df6c:	e7af      	b.n	800dece <__ieee754_expf+0x76>
 800df6e:	ee36 6a66 	vsub.f32	s12, s12, s13
 800df72:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800df76:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800df7a:	bfb8      	it	lt
 800df7c:	3264      	addlt	r2, #100	; 0x64
 800df7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800df82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df86:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800df8a:	ee17 3a90 	vmov	r3, s15
 800df8e:	bfab      	itete	ge
 800df90:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800df94:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800df98:	ee00 3a10 	vmovge	s0, r3
 800df9c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800dff0 <__ieee754_expf+0x198>
 800dfa0:	bfbc      	itt	lt
 800dfa2:	ee00 3a10 	vmovlt	s0, r3
 800dfa6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800dfaa:	4770      	bx	lr
 800dfac:	00000000 	.word	0x00000000
 800dfb0:	42b17217 	.word	0x42b17217
 800dfb4:	42cff1b5 	.word	0x42cff1b5
 800dfb8:	3eb17218 	.word	0x3eb17218
 800dfbc:	3f851591 	.word	0x3f851591
 800dfc0:	080170d0 	.word	0x080170d0
 800dfc4:	080170d8 	.word	0x080170d8
 800dfc8:	3331bb4c 	.word	0x3331bb4c
 800dfcc:	b5ddea0e 	.word	0xb5ddea0e
 800dfd0:	388ab355 	.word	0x388ab355
 800dfd4:	bb360b61 	.word	0xbb360b61
 800dfd8:	3e2aaaab 	.word	0x3e2aaaab
 800dfdc:	080170c8 	.word	0x080170c8
 800dfe0:	3fb8aa3b 	.word	0x3fb8aa3b
 800dfe4:	3f317180 	.word	0x3f317180
 800dfe8:	3717f7d1 	.word	0x3717f7d1
 800dfec:	7149f2ca 	.word	0x7149f2ca
 800dff0:	0d800000 	.word	0x0d800000

0800dff4 <_init>:
 800dff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dff6:	bf00      	nop
 800dff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dffa:	bc08      	pop	{r3}
 800dffc:	469e      	mov	lr, r3
 800dffe:	4770      	bx	lr

0800e000 <_fini>:
 800e000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e002:	bf00      	nop
 800e004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e006:	bc08      	pop	{r3}
 800e008:	469e      	mov	lr, r3
 800e00a:	4770      	bx	lr
